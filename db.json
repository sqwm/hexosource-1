{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.png","path":"favicon.png","modified":0,"renderable":0},{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/favicon.png","path":"css/images/favicon.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/header.png","path":"css/images/header.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","path":"libs/titillium-web/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/jquery/2.0.3/jquery.min.js","path":"libs/jquery/2.0.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"5cce9c9211aa39a58ead42264f60e4133c7e9ea7","modified":1491035270862},{"_id":"source/baidu_verify_RUVpqOn26C.html","hash":"6d0299366e9eecc35e74021a3bf04a1e2e5fda4e","modified":1494691967167},{"_id":"source/favicon.png","hash":"f86233b23383bf6c5e85d1b15a790cf942ba8bc7","modified":1459359988009},{"_id":"source/google8f959bed6376f4d8.html","hash":"77ac56dd8cd72e1194e5105646750d247daa3f15","modified":1494691967167},{"_id":"themes/hueman/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1492597724356},{"_id":"themes/hueman/LICENSE","hash":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1492597724356},{"_id":"themes/hueman/README.md","hash":"defb1f667677e1fd13b3a4799a6c70eae621f796","modified":1492597724356},{"_id":"themes/hueman/_config.yml","hash":"6a77061e5e2141975659c4d669b2b56653c449cc","modified":1493015462000},{"_id":"themes/hueman/package.json","hash":"d4ff853568e592265c2c9a21ce358f15babec14a","modified":1492597724360},{"_id":"source/_posts/DOM.md","hash":"b03f3273339223c8de34db4cfbbad114f55dafd8","modified":1493130745904},{"_id":"source/_posts/EventLoop.md","hash":"a7eff5b84040387c5e4225d7a983211f01afcb18","modified":1492612348538},{"_id":"source/_posts/EventLoopUp.md","hash":"47c488fa35d2aeca6a72dee974aaa4c76d4652cb","modified":1492612360530},{"_id":"source/_posts/EventUtil.md","hash":"69bbeecabc505ac541e1c754251d55092581913d","modified":1493130461210},{"_id":"source/_posts/HTTPprotocol.md","hash":"cb621c92cb5490fe2743ebf6b74a369a26276106","modified":1492612279027},{"_id":"source/_posts/ajax.md","hash":"25081c7de1671aa2771149a30b0b5c19171dbb78","modified":1493131663789},{"_id":"source/_posts/aptRemove.md","hash":"9b6bc35dfacfcd50a7140edba2ccbe773eecf036","modified":1492612168932},{"_id":"source/_posts/asyncJs.md","hash":"6b081a97065a1aacdf2e4db59a1ec75d70d7591a","modified":1493133460331},{"_id":"source/_posts/browserCore.md","hash":"9623f1538bc6a068c87164d17ff958b7961ab78a","modified":1492612373750},{"_id":"source/_posts/clearFloat.md","hash":"0f0dd21c96565494f9476bc40e6528ff63e7b567","modified":1492834404146},{"_id":"source/_posts/event.md","hash":"3e70b3799361e937cb27fc6c2e98517bd966fea2","modified":1493128930518},{"_id":"source/_posts/hexoCname.md","hash":"16d778a38591f88c5e36a04812e90a6baf6310dd","modified":1492612313314},{"_id":"source/_posts/iframe.md","hash":"6c70f8075933beb53fea63823728807f4182fd22","modified":1492612265419},{"_id":"source/_posts/json.md","hash":"fc7fb4c7428d4830eccd6067458ae34aef367c41","modified":1492612248147},{"_id":"source/_posts/letncst.md","hash":"30aa6ab7854065fd9c2daab4b4466468a3439f2e","modified":1493203796097},{"_id":"source/_posts/path-join-path-resolve.md","hash":"7df698e52583f692de189828230637a504e3f641","modified":1496240555150},{"_id":"source/_posts/sortAlgorithm.md","hash":"0ad8c12718533d769a0703e5658007e2ff055ed7","modified":1492612228979},{"_id":"source/_posts/tinymce-MySQL.md","hash":"830997461f9fcafbf7fc8d52fb0a468ef0002463","modified":1492612215739},{"_id":"source/_posts/ubuntuTip.md","hash":"da188d966ebd086a3a9f88a2f21160364ca46158","modified":1492765197173},{"_id":"source/_posts/ubuntuVpn.md","hash":"c9b8636c48f28f37a280b8944542dd89abf75a04","modified":1492612189748},{"_id":"source/_posts/whatUniversity.md","hash":"c89c0914ef84846e4623e57426dfdf197228ed50","modified":1493122297178},{"_id":"source/contact/index.md","hash":"a52eae13f629c6f542f705067735b570b2e9bcd1","modified":1492506285431},{"_id":"themes/hueman/.github/ISSUE_TEMPLATE.md","hash":"1ce6c6330e2e37fcf4764d69ed2c43670e30eb23","modified":1492597724356},{"_id":"themes/hueman/languages/ca.yml","hash":"d082e6f9e7615556b8f6c5f1286f0db8a0db195e","modified":1492597724360},{"_id":"themes/hueman/languages/en.yml","hash":"3416fee358d869e6abf0cca695edf8386349053f","modified":1492597724360},{"_id":"themes/hueman/languages/es.yml","hash":"97191c8ab7ce5334369d96f6e53a6d365a2057b1","modified":1492597724360},{"_id":"themes/hueman/languages/fr.yml","hash":"0624f8f7532f1312caaf4f8d498aab69c80a92f2","modified":1492597724360},{"_id":"themes/hueman/languages/hu.yml","hash":"5dd987ad5f33748bcba1d9a7eb78c1800b7c8bed","modified":1492597724360},{"_id":"themes/hueman/languages/id.yml","hash":"03e45cf88b69e657a340362e18668e443ddaae47","modified":1492597724360},{"_id":"themes/hueman/languages/ja.yml","hash":"56f3af0bf5cc56f9f7bf24fe5cb881a6a1b34e7b","modified":1492597724360},{"_id":"themes/hueman/languages/ko.yml","hash":"81ea44ecda87a4398bb6d88a3b02f6b73c9a1637","modified":1492597724360},{"_id":"themes/hueman/languages/pt-BR.yml","hash":"6f9539673e08d66866bb210b78863ef68023f991","modified":1492597724360},{"_id":"themes/hueman/languages/ru.yml","hash":"99f111b39f867d421ff4cb859dd1deb26caa382e","modified":1492597724360},{"_id":"themes/hueman/languages/tr.yml","hash":"003cb50200eba865d57e5c53925636f1a5ec0a70","modified":1492597724360},{"_id":"themes/hueman/languages/vi.yml","hash":"edeb4492a08af458fe958dc4d48101c96750b159","modified":1492597724360},{"_id":"themes/hueman/languages/zh-CN.yml","hash":"05737aa022a007b97034a9d9fc80e606d5a25598","modified":1492597724360},{"_id":"themes/hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1492597724360},{"_id":"themes/hueman/layout/category.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1492597724360},{"_id":"themes/hueman/layout/index.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1492597724360},{"_id":"themes/hueman/layout/layout.ejs","hash":"35fd7fe6d4e2d313246a0a31446a597714facdea","modified":1492597724360},{"_id":"themes/hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1492597724360},{"_id":"themes/hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1492597724360},{"_id":"themes/hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1492597724360},{"_id":"themes/hueman/scripts/excerpt.js","hash":"630f17f2647b2ba5b207dba36fb3c6587a3aa04f","modified":1492597724360},{"_id":"themes/hueman/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1492597724360},{"_id":"themes/hueman/scripts/thumbnail.js","hash":"e78b1b978fa1acad5409afc685d13f669e80b24f","modified":1492597724360},{"_id":"source/_posts/EventLoop/1.png","hash":"991109df2ef5ae00d95568a69200baa1775ed399","modified":1491746316504},{"_id":"source/_posts/EventLoop/2-1.png","hash":"d69c67b55e085236715547eccc756db0497e6a95","modified":1491733376159},{"_id":"source/_posts/EventLoop/2-2.png","hash":"97ee1eba70006611e864bc13050165939e10b33c","modified":1491734109397},{"_id":"source/_posts/EventLoop/2-3.png","hash":"e427e50ac02148dd09696fe5e106473a63a1aa07","modified":1491734119809},{"_id":"source/_posts/EventLoop/2-4.png","hash":"8a7a59b8f9548435a43e6c8fc83106d24aa839d0","modified":1491734126053},{"_id":"source/_posts/EventLoop/2-5.png","hash":"e37515df4057bd6188f7c4f074c823b848597a8d","modified":1491734132493},{"_id":"source/_posts/EventLoop/2-6.png","hash":"2b1f3f61632a2e5b31f15fdbe3b41d8301548634","modified":1491734137541},{"_id":"source/_posts/EventLoop/2-7.png","hash":"d06810423b3171d7455b37c4869178c75dd47206","modified":1491734142113},{"_id":"source/_posts/EventLoop/2-8.png","hash":"c89a783aad242f5c5559b4ba63c043aa8eb32e68","modified":1491734146993},{"_id":"source/_posts/EventLoopUp/1-1.png","hash":"1d7f43fd157791cd41825d75483a4961bdde3496","modified":1491815952313},{"_id":"source/_posts/EventLoopUp/1-2.png","hash":"b473ec8a75b8538a1408a926d4f976e732f271f1","modified":1491815994073},{"_id":"source/_posts/EventLoopUp/1-3.png","hash":"01ed5f0523ac4ceeaedfd94315b56c955c0a2e47","modified":1491816007329},{"_id":"source/_posts/EventLoopUp/1-4-1.png","hash":"2399ce2e72f76f9e7a4b3c31182415192c5e25af","modified":1491816024522},{"_id":"source/_posts/EventLoopUp/1-4-2.png","hash":"66f9e9dc1bc4e6c5640258c732e05f00826f4196","modified":1491816039422},{"_id":"source/_posts/EventLoopUp/1-5.png","hash":"8dd08a9b16abc15c51b071b5d2e72cbed4e289a3","modified":1491816051386},{"_id":"source/_posts/EventLoopUp/1-6.png","hash":"63343f0a2429388484bdf13fbe4410bb3a503a9c","modified":1491816059962},{"_id":"source/_posts/EventLoopUp/1-7-1.png","hash":"2cc03eed13c6bbbf51577f68eeffa7750c42b8a3","modified":1491816073266},{"_id":"source/_posts/EventLoopUp/1-7-2.png","hash":"c310235fbabfcdbb75918154a7119723b3d841a1","modified":1491816080610},{"_id":"source/_posts/EventLoopUp/1-8.png","hash":"c90fdba94198ebc0b3f8068dccb62961d935f60c","modified":1491816088675},{"_id":"source/_posts/hexoCname/cname.png","hash":"1143852b958ccbc71a865a7232caece4528b42db","modified":1491283333491},{"_id":"source/_posts/hexoCname/cnamefile.png","hash":"a1401f08bd62a00c42b8736f9daa3fa8b153487e","modified":1491283822897},{"_id":"source/_posts/hexoCname/domain.png","hash":"ca1c898e5bb91605463fb15d9f271a5b8447ab35","modified":1491283781237},{"_id":"source/_posts/ubuntuTip/1.png","hash":"06b2d43432296d3870997b70fc40315700baf53c","modified":1492405843009},{"_id":"source/_posts/ubuntuTip/2.png","hash":"6f341c2ff1b19ca378dd72270ea4e6e3165882dd","modified":1492668085469},{"_id":"source/_posts/ubuntuTip/3.png","hash":"4442302b4391dc9817adbe56a83f39527625b810","modified":1492691650318},{"_id":"source/_posts/ubuntuVpn/1.png","hash":"56829cb03b74a77c4291a0beb9e150218a0079ad","modified":1492064689937},{"_id":"source/_posts/ubuntuVpn/2.png","hash":"67114d25f9d670d1238025de925fcec1ee31f97b","modified":1492065201385},{"_id":"source/_posts/ubuntuVpn/4.png","hash":"04922d72560b26765ad7d1d9f90dd57199ec1373","modified":1492072012489},{"_id":"source/_posts/ubuntuVpn/5.png","hash":"3d7def227b604c149eee058b0ce8d6cd1c0f3a1f","modified":1492072775515},{"_id":"source/_posts/ubuntuVpn/6.png","hash":"0fa00f1d23b32311c2bda4a858dc911f368df2d7","modified":1492081858839},{"_id":"source/_posts/ubuntuVpn/7.png","hash":"1d0e948dbe10eb5570501b4ff3fed3ad0429648d","modified":1492082134020},{"_id":"themes/hueman/layout/comment/counter.ejs","hash":"5a65e9ef8d225ff789f6e8719aabfc49983da0cd","modified":1492597724360},{"_id":"themes/hueman/layout/comment/disqus.ejs","hash":"83158f5b00f95acf847524fd7ffeb5aab25add78","modified":1492597724360},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1492597724360},{"_id":"themes/hueman/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1492597724360},{"_id":"themes/hueman/layout/comment/index.ejs","hash":"1ecc5ba82ae4236da7635a58d4584fd67f6f1fc3","modified":1492597724360},{"_id":"themes/hueman/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1492597724360},{"_id":"themes/hueman/layout/comment/scripts.ejs","hash":"305aa07646ab03e00d8239a811f4ec6f75751e1e","modified":1492597724360},{"_id":"themes/hueman/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1492597724360},{"_id":"themes/hueman/layout/common/archive.ejs","hash":"bf909e4d6798374daf114cf41540f2bd300408d9","modified":1492597724360},{"_id":"themes/hueman/layout/common/article.ejs","hash":"94369b0078a61f6f07264f686cef1cede0fd1997","modified":1492597724360},{"_id":"themes/hueman/layout/common/content-title.ejs","hash":"43288ebc0ea30d80e6d7df56f2e7ed5d7935ed1a","modified":1492597724360},{"_id":"themes/hueman/layout/common/footer.ejs","hash":"4d01bd3d28820936b0d09529b60e9d6930afc9fe","modified":1492597724360},{"_id":"themes/hueman/layout/common/head.ejs","hash":"dacc29256a51d4867c662b6f1805d0d7652de45d","modified":1492597724360},{"_id":"themes/hueman/layout/common/header.ejs","hash":"4dbb53393c3ebef01088592babf135d2f6559f47","modified":1492597724360},{"_id":"themes/hueman/layout/common/scripts.ejs","hash":"db677ab336d31292bffc071b2115e25e9c6f198d","modified":1492597724360},{"_id":"themes/hueman/layout/common/sidebar.ejs","hash":"745666ee78b714aa34d8774a005a0598261ec349","modified":1492597724360},{"_id":"themes/hueman/layout/common/summary.ejs","hash":"42d6f99906ae96a6d00ee9a727405e47ec5e7c81","modified":1492597724360},{"_id":"themes/hueman/layout/common/thumbnail.ejs","hash":"c5fba5d5287f49e02040c530cd92312b2221a2c1","modified":1492597724360},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","hash":"d99089976258050666208f29000f84496fe1029c","modified":1492597724360},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1492597724360},{"_id":"themes/hueman/layout/plugin/scripts.ejs","hash":"5c74d66cbda8c5d6c37ee04cc6585005815bc6cf","modified":1492597724360},{"_id":"themes/hueman/layout/search/baidu.ejs","hash":"bcffa60f2d1750ac7499e928f538176e3804393b","modified":1492597724360},{"_id":"themes/hueman/layout/search/index.ejs","hash":"1a6a742727018567f60f8815be0bff5a45294ce5","modified":1492597724360},{"_id":"themes/hueman/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1492597724360},{"_id":"themes/hueman/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1492597724360},{"_id":"themes/hueman/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1492597724360},{"_id":"themes/hueman/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1492597724360},{"_id":"themes/hueman/layout/share/default.ejs","hash":"7492f5b375a56c67a1a1a4f6b893e37f49dc86dc","modified":1492597724360},{"_id":"themes/hueman/layout/share/index.ejs","hash":"029e91aace5a4c0d8387fc7744c477ccc6865c30","modified":1492597724360},{"_id":"themes/hueman/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1492597724360},{"_id":"themes/hueman/layout/widget/archive.ejs","hash":"c4d303eaaa23768e52ead324c422a8900b1fe448","modified":1492597724360},{"_id":"themes/hueman/layout/widget/category.ejs","hash":"2d705df76f2eef7d695a971266fc104e89ca6bcd","modified":1492597724360},{"_id":"themes/hueman/layout/widget/links.ejs","hash":"97dab84d6336a4c926ddc288d5a6c264f54c50c3","modified":1492597724360},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","hash":"16a2bd28bdf520616202670a18c6cc93d1dd3f54","modified":1492597724360},{"_id":"themes/hueman/layout/widget/sticky_posts.ejs","hash":"6bad4126bed652f5f9e93027cbe3ee03b67b034a","modified":1492597724360},{"_id":"themes/hueman/layout/widget/tag.ejs","hash":"bfbc63e675439dcdc35e07dce6948e41500b649c","modified":1492597724360},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","hash":"3ecb048d6098bc3953043a4c25f1f7c4b23397cf","modified":1492597724360},{"_id":"themes/hueman/source/css/_extend.styl","hash":"c2160499dc89c524ff17cd2e3fcbb8df83ebca1a","modified":1492597724360},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"4addaf2f203563accf0479850eda1ab4f4a4c34b","modified":1492597724360},{"_id":"themes/hueman/source/css/_variables.styl","hash":"ce03de3658b55b5f90bb4dd18679be18ec38acaa","modified":1492597724360},{"_id":"themes/hueman/source/css/style.styl","hash":"b76d43839bda01ee791e71093f009ad2c8b093b2","modified":1492597724364},{"_id":"themes/hueman/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1492597724364},{"_id":"themes/hueman/source/js/main.js","hash":"a15519ae8a397557cc594e8fb2f34fa9468f70fa","modified":1492597724364},{"_id":"source/_posts/event/1.png","hash":"37f33afc90563ae2628a272b06fbc082b5c6b5b1","modified":1493126265631},{"_id":"source/_posts/ubuntuVpn/3.png","hash":"1bf036fe738983a942d443616d8592f1bc36d714","modified":1492071693100},{"_id":"source/_posts/HTTPprotocol/1-1.png","hash":"0c65687c496088c98840f21e8c67200eadba5cad","modified":1492146428384},{"_id":"source/_posts/HTTPprotocol/1-2.png","hash":"7636186e292ccbe381fdbe6c89ee04229b1ff9cf","modified":1492146556273},{"_id":"source/_posts/ubuntuVpn/8.png","hash":"97d9c63f4b697bb4b7f342928bccfe85d5faac5b","modified":1492082794469},{"_id":"themes/hueman/layout/common/post/date.ejs","hash":"198f75157a776b3e05eeb5da85b14a42027bd524","modified":1492597724360},{"_id":"themes/hueman/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1492597724360},{"_id":"themes/hueman/layout/common/post/nav.ejs","hash":"c5f41ebf451cff39eaf116096604ce706a175767","modified":1492597724360},{"_id":"themes/hueman/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1492597724360},{"_id":"themes/hueman/layout/common/post/title.ejs","hash":"6d19c61afb1f5f71c483be2ce37c6820ac2cd8b5","modified":1492597724360},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"5e5fb791ab54f0acf33850f586f7aa8cb2782f3a","modified":1492597724360},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"0408bf9e1c62df58c68f849804e0d7c84f31797d","modified":1492597724360},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"3d95417663c5a737f064a31ab4ef52bac7fda8df","modified":1492597724360},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"d2de8f2c1cf6236ead0800c2a1566e01e7ae0b44","modified":1492597724360},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"8dffae4ac6a57e506e378a9ce44b85a15a912cad","modified":1492597724360},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"f94fcb4e2cbda45c8dc910ddb8ff4f19ff0644bf","modified":1492597724360},{"_id":"themes/hueman/source/css/_partial/insight.styl","hash":"3d66323e7b75ad197e80d7189a8d9216e1e1ef2f","modified":1492597724360},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"587a9c9d304ed83eb0331a1d16693461805311c3","modified":1492597724360},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"1e6255f1bfa1a820f70d5cfdadf2caa726bf853d","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/index.styl","hash":"d421ed06c84f7a561b293f662a670bf132d41c63","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1492597724360},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1492597724360},{"_id":"themes/hueman/source/css/images/favicon.png","hash":"f86233b23383bf6c5e85d1b15a790cf942ba8bc7","modified":1459359988009},{"_id":"themes/hueman/source/css/images/header.png","hash":"cde85b44299e614cd636697b8b15799d3dc30823","modified":1470460514604},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1492597724360},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1492597724360},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1492597724360},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1492597724360},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1492597724364},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1492597724368},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1492597724368},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1492597724372},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1492597724372},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1492597724364},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1492597724364},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1492597724368},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1492597724368},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1492597724368},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1492597724368},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1492597724368},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1492597724368},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1492597724372},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1492597724372},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1492597724372},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1492597724372},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1492597724372},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1492597724372},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1492597724372},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1492597724372},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1492597724372},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1492597724372},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1492597724364},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1492597724364},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1492597724368},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1492597724368},{"_id":"themes/hueman/source/libs/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1492597724368},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1492597724368},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1492597724368},{"_id":"public/baidu_verify_RUVpqOn26C.html","hash":"c6f3b77fb3943a5bcaf99f35c5a31220514684e2","modified":1496240568985},{"_id":"public/google8f959bed6376f4d8.html","hash":"3887e14309522a47096262d44199fb3033a47a37","modified":1496240570006},{"_id":"public/baidu_urls.txt","hash":"2405c6f16445a8c8359d7370787d509dc7d4e63d","modified":1496240570025},{"_id":"public/baidusitemap.xml","hash":"96f0c7422e779dc0528546a98ef702df31ee9890","modified":1496240570026},{"_id":"public/content.json","hash":"007a1ee8f930a21f2411efdbe2c8c6b7decc13fa","modified":1496240570026},{"_id":"public/sitemap.xml","hash":"ba1d930851a2868c977ad3862334ca018a5f9afc","modified":1496240570026},{"_id":"public/contact/index.html","hash":"f7c281393974864874a707bd12a50bc7af4c4f2d","modified":1496240570038},{"_id":"public/2017/05/31/path-join-path-resolve/index.html","hash":"b8919ddb72f1e88236b2cdda7c93c12885d6ffd7","modified":1496240570038},{"_id":"public/2017/04/15/browserCore/index.html","hash":"66537b7501e952e0c0dcd0e8077c9e8007c4d41c","modified":1496240570038},{"_id":"public/2017/04/14/HTTPprotocol/index.html","hash":"13d9f91fcbad41cc0f8ffd752ecc0e7ebcb9311a","modified":1496240570038},{"_id":"public/2017/04/13/ubuntuVpn/index.html","hash":"6947700201806d6539b8ba704f2798340cbbddb5","modified":1496240570039},{"_id":"public/2017/04/13/ubuntuTip/index.html","hash":"b38a5ba9fc09b6dd570b599f1ab36beaa82fdf36","modified":1496240570039},{"_id":"public/2017/04/09/EventLoopUp/index.html","hash":"759413fa90f54f897a40e95694f18ed63f880236","modified":1496240570039},{"_id":"public/2017/04/09/EventLoop/index.html","hash":"f36ef89d2612a9810e870c586a9114a780103f3e","modified":1496240570039},{"_id":"public/2017/04/04/hexoCname/index.html","hash":"07c035e1253329a71b1e1c21a5ff9cd90fa708e0","modified":1496240570039},{"_id":"public/2017/04/03/aptRemove/index.html","hash":"56fd8fe297f3890164f316eb0aad303448222914","modified":1496240570039},{"_id":"public/2016/12/26/letncst/index.html","hash":"62bb21b86ae0171c770a09c39013faefefa17fad","modified":1496240570039},{"_id":"public/2016/10/04/tinymce-MySQL/index.html","hash":"fdccb1ef55b235163404a4a44482a4fc1171ea99","modified":1496240570039},{"_id":"public/2016/06/24/EventUtil/index.html","hash":"ad7bdaac8276fe8f317eeac25f84cd34f4dae8a3","modified":1496240570039},{"_id":"public/2016/04/28/asyncJs/index.html","hash":"897982ca469b80cfa98338a7f7ffba201b03e73b","modified":1496240570040},{"_id":"public/2016/04/24/event/index.html","hash":"c33eda7dc7b787efcbfc8d74be6f2dee34cf5141","modified":1496240570040},{"_id":"public/2016/04/22/clearFloat/index.html","hash":"ef557e6f09d57008f2e77f67fd06c889b03f8b75","modified":1496240570040},{"_id":"public/2016/04/20/DOM/index.html","hash":"6029f3e25f12b2fbfd8221ca089f7e54faf20acc","modified":1496240570040},{"_id":"public/2016/04/15/iframe/index.html","hash":"d939dc3ddf726406188c305f598632dfc44a8c42","modified":1496240570040},{"_id":"public/2016/04/02/sortAlgorithm/index.html","hash":"6603e156376f19e0d23c6311534cd3721d1df87c","modified":1496240570040},{"_id":"public/2015/07/18/whatUniversity/index.html","hash":"c3d611d173b6b8837cabfde22cbb2ca105b2aae7","modified":1496240570040},{"_id":"public/2015/04/18/ajax/index.html","hash":"a547c8693e40e5b02955c9eb7abc0ee6ef57949e","modified":1496240570040},{"_id":"public/2015/03/16/json/index.html","hash":"cf22eb9ed982d793afad90ffa560107ec31e6165","modified":1496240570040},{"_id":"public/archives/index.html","hash":"bbd6878e063adc275d32fec52882492aff8d1ed9","modified":1496240570040},{"_id":"public/archives/page/2/index.html","hash":"3e7ee4bdb7a654a87127b602a69c31f1cdca0c90","modified":1496240570040},{"_id":"public/archives/page/3/index.html","hash":"50f5ab9cd793b7e0ab922d024d5730aa378f7ec4","modified":1496240570040},{"_id":"public/archives/2015/index.html","hash":"d1ce6404538aaa9085bb81d399fd1cd56191da09","modified":1496240570040},{"_id":"public/archives/2015/03/index.html","hash":"282ec2a46ddbbae4e7ec5804fa7f37ec1053acf5","modified":1496240570040},{"_id":"public/archives/2015/04/index.html","hash":"0c9eb8ff69a9fdfe2171c4705abb2c931f200747","modified":1496240570040},{"_id":"public/archives/2015/07/index.html","hash":"ad1e9fd254f0ac74d0d917c280888316e72c12a0","modified":1496240570040},{"_id":"public/archives/2016/index.html","hash":"5887f0e32c414b13f9ca6bbb3716284fec97364b","modified":1496240570040},{"_id":"public/archives/2016/page/2/index.html","hash":"a30b2b35099f153e4cde655c132af2986cd06917","modified":1496240570040},{"_id":"public/archives/2016/04/index.html","hash":"6d47c6f453c07f806fa8531aa2fbc5bb21a9a0be","modified":1496240570040},{"_id":"public/archives/2016/06/index.html","hash":"a66678edad0a3c7700574ad257fe9914fe9cb594","modified":1496240570040},{"_id":"public/archives/2016/10/index.html","hash":"e10510e81efb929504ea5f41e2c261639dcb66c9","modified":1496240570040},{"_id":"public/archives/2016/12/index.html","hash":"4d82bf63ec94c17aeaf9611d1655ae93851e4201","modified":1496240570040},{"_id":"public/archives/2017/index.html","hash":"4eeb3748be7e724a6967b59ff7c317d316194d0d","modified":1496240570041},{"_id":"public/archives/2017/page/2/index.html","hash":"d808030cc285c03d76508ae37029bdb50eaca015","modified":1496240570041},{"_id":"public/archives/2017/04/index.html","hash":"25226287396f198b7ef5454baca9c15e766939cb","modified":1496240570041},{"_id":"public/archives/2017/05/index.html","hash":"ebac594c785b96daefd296c85a12cea6e6109b1d","modified":1496240570041},{"_id":"public/categories/技术类-前端/index.html","hash":"7d4eadda3e8ea380400e889f8eab385b963c0ab4","modified":1496240570041},{"_id":"public/categories/技术类-前端/page/2/index.html","hash":"f2f054e864231c6370afb504ca6506f008bb2635","modified":1496240570041},{"_id":"public/categories/技术类-网络协议/index.html","hash":"9fbe596e315e01f2168b8b174d58023b6c2094c3","modified":1496240570041},{"_id":"public/categories/技术类-linux/index.html","hash":"48d6980acb72b03dffed780ac652634037a70d90","modified":1496240570041},{"_id":"public/categories/技术类-奇淫巧技/index.html","hash":"142d41948684eb60bc50284e2979395a79c91ede","modified":1496240570041},{"_id":"public/categories/技术类-算法/index.html","hash":"f75f6972e470dcb2969d11b042d60becd3ebd7a2","modified":1496240570041},{"_id":"public/categories/文学类/index.html","hash":"4644e8e3443880cf6210df6cbc5e57519120ea7a","modified":1496240570041},{"_id":"public/index.html","hash":"a1aa26cf24234d1b17a216f6af0dbf33d14e5ba4","modified":1496240570041},{"_id":"public/page/2/index.html","hash":"b8ab73b399226824f46462e26f8e17438e1f3b6a","modified":1496240570041},{"_id":"public/page/3/index.html","hash":"d5653ee2049e92c5cd81047178705f328c56b853","modified":1496240570041},{"_id":"public/tags/DOM/index.html","hash":"512990e8379f317d897ff6656c04609f468e2693","modified":1496240570041},{"_id":"public/tags/html/index.html","hash":"522e79a49f66b7cdb198425b64d77e8e86785c62","modified":1496240570041},{"_id":"public/tags/JavaScript/index.html","hash":"580fde6f321817b581401f3063f31fe6780b3fe4","modified":1496240570041},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"c77c1d9aab6809f0387213efec5f6aba2cd1996b","modified":1496240570041},{"_id":"public/tags/网络协议/index.html","hash":"c5204cd94369665272dc8ee31183a7d7c54e288d","modified":1496240570041},{"_id":"public/tags/ajax/index.html","hash":"85b2dacef8ca7b571fb01fad9ec190b0d9d0f3a8","modified":1496240570041},{"_id":"public/tags/ubuntu/index.html","hash":"a7ee0aea28ca30571144eeceaf6ab20436c6982c","modified":1496240570042},{"_id":"public/tags/浏览器/index.html","hash":"a1e1e056d02dffa6dbbb91267e34c6b79cfff63e","modified":1496240570042},{"_id":"public/tags/css/index.html","hash":"e9618a710c74dbc251df5f34deb1bd86e88c0676","modified":1496240570042},{"_id":"public/tags/奇淫巧技/index.html","hash":"01ca0667c556144cae333a3aad9b21d8f10dc209","modified":1496240570042},{"_id":"public/tags/es6/index.html","hash":"54a2cc6b9be97eeda8b459bb67fd44dad9b45d57","modified":1496240570042},{"_id":"public/tags/node/index.html","hash":"aea8e794e5ee885ef48f97d24d7d6d1766e97785","modified":1496240570042},{"_id":"public/tags/算法/index.html","hash":"aa3ee0d45f111c04e021081f796b9037caa2cb66","modified":1496240570042},{"_id":"public/tags/插件/index.html","hash":"c22824620dc11c729bb23d53fdf81354815bfa77","modified":1496240570042},{"_id":"public/tags/文学/index.html","hash":"ab8e4c64bb37396a5553a78e1b0cbdbc9151dd7b","modified":1496240570042},{"_id":"public/CNAME","hash":"5cce9c9211aa39a58ead42264f60e4133c7e9ea7","modified":1496240570075},{"_id":"public/favicon.png","hash":"f86233b23383bf6c5e85d1b15a790cf942ba8bc7","modified":1496240570075},{"_id":"public/css/images/favicon.png","hash":"f86233b23383bf6c5e85d1b15a790cf942ba8bc7","modified":1496240570075},{"_id":"public/css/images/header.png","hash":"cde85b44299e614cd636697b8b15799d3dc30823","modified":1496240570075},{"_id":"public/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1496240570075},{"_id":"public/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1496240570075},{"_id":"public/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1496240570075},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1496240570075},{"_id":"public/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1496240570075},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1496240570075},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1496240570075},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1496240570075},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1496240570076},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1496240570076},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1496240570076},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1496240570076},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1496240570076},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1496240570076},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1496240570076},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1496240570076},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1496240570076},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1496240570076},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1496240570076},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1496240570076},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1496240570076},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1496240570076},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1496240570076},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1496240570077},{"_id":"public/2017/04/04/hexoCname/cname.png","hash":"1143852b958ccbc71a865a7232caece4528b42db","modified":1496240570077},{"_id":"public/2017/04/04/hexoCname/cnamefile.png","hash":"a1401f08bd62a00c42b8736f9daa3fa8b153487e","modified":1496240570077},{"_id":"public/2017/04/04/hexoCname/domain.png","hash":"ca1c898e5bb91605463fb15d9f271a5b8447ab35","modified":1496240570077},{"_id":"public/2017/04/13/ubuntuTip/1.png","hash":"06b2d43432296d3870997b70fc40315700baf53c","modified":1496240570077},{"_id":"public/2017/04/13/ubuntuTip/2.png","hash":"6f341c2ff1b19ca378dd72270ea4e6e3165882dd","modified":1496240570077},{"_id":"public/2017/04/13/ubuntuTip/3.png","hash":"4442302b4391dc9817adbe56a83f39527625b810","modified":1496240570077},{"_id":"public/2017/04/13/ubuntuVpn/1.png","hash":"56829cb03b74a77c4291a0beb9e150218a0079ad","modified":1496240570077},{"_id":"public/2017/04/13/ubuntuVpn/2.png","hash":"67114d25f9d670d1238025de925fcec1ee31f97b","modified":1496240570077},{"_id":"public/2017/04/13/ubuntuVpn/4.png","hash":"04922d72560b26765ad7d1d9f90dd57199ec1373","modified":1496240570077},{"_id":"public/2017/04/13/ubuntuVpn/5.png","hash":"3d7def227b604c149eee058b0ce8d6cd1c0f3a1f","modified":1496240570077},{"_id":"public/2017/04/13/ubuntuVpn/6.png","hash":"0fa00f1d23b32311c2bda4a858dc911f368df2d7","modified":1496240570078},{"_id":"public/2017/04/13/ubuntuVpn/7.png","hash":"1d0e948dbe10eb5570501b4ff3fed3ad0429648d","modified":1496240570078},{"_id":"public/2017/04/09/EventLoop/1.png","hash":"991109df2ef5ae00d95568a69200baa1775ed399","modified":1496240570078},{"_id":"public/2017/04/09/EventLoop/2-1.png","hash":"d69c67b55e085236715547eccc756db0497e6a95","modified":1496240570078},{"_id":"public/2017/04/09/EventLoop/2-2.png","hash":"97ee1eba70006611e864bc13050165939e10b33c","modified":1496240570078},{"_id":"public/2017/04/09/EventLoop/2-3.png","hash":"e427e50ac02148dd09696fe5e106473a63a1aa07","modified":1496240570078},{"_id":"public/2017/04/09/EventLoop/2-4.png","hash":"8a7a59b8f9548435a43e6c8fc83106d24aa839d0","modified":1496240570078},{"_id":"public/2017/04/09/EventLoop/2-5.png","hash":"e37515df4057bd6188f7c4f074c823b848597a8d","modified":1496240570078},{"_id":"public/2017/04/09/EventLoop/2-6.png","hash":"2b1f3f61632a2e5b31f15fdbe3b41d8301548634","modified":1496240570078},{"_id":"public/2017/04/09/EventLoop/2-7.png","hash":"d06810423b3171d7455b37c4869178c75dd47206","modified":1496240570078},{"_id":"public/2017/04/09/EventLoop/2-8.png","hash":"c89a783aad242f5c5559b4ba63c043aa8eb32e68","modified":1496240570078},{"_id":"public/2017/04/09/EventLoopUp/1-1.png","hash":"1d7f43fd157791cd41825d75483a4961bdde3496","modified":1496240570078},{"_id":"public/2017/04/09/EventLoopUp/1-2.png","hash":"b473ec8a75b8538a1408a926d4f976e732f271f1","modified":1496240570078},{"_id":"public/2017/04/09/EventLoopUp/1-3.png","hash":"01ed5f0523ac4ceeaedfd94315b56c955c0a2e47","modified":1496240570078},{"_id":"public/2017/04/09/EventLoopUp/1-4-1.png","hash":"2399ce2e72f76f9e7a4b3c31182415192c5e25af","modified":1496240570078},{"_id":"public/2017/04/09/EventLoopUp/1-4-2.png","hash":"66f9e9dc1bc4e6c5640258c732e05f00826f4196","modified":1496240570078},{"_id":"public/2017/04/09/EventLoopUp/1-5.png","hash":"8dd08a9b16abc15c51b071b5d2e72cbed4e289a3","modified":1496240570078},{"_id":"public/2017/04/09/EventLoopUp/1-6.png","hash":"63343f0a2429388484bdf13fbe4410bb3a503a9c","modified":1496240570079},{"_id":"public/2017/04/09/EventLoopUp/1-7-1.png","hash":"2cc03eed13c6bbbf51577f68eeffa7750c42b8a3","modified":1496240570079},{"_id":"public/2017/04/09/EventLoopUp/1-7-2.png","hash":"c310235fbabfcdbb75918154a7119723b3d841a1","modified":1496240570079},{"_id":"public/2017/04/09/EventLoopUp/1-8.png","hash":"c90fdba94198ebc0b3f8068dccb62961d935f60c","modified":1496240570079},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1496240570725},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1496240570735},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1496240570736},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1496240570736},{"_id":"public/2016/04/24/event/1.png","hash":"37f33afc90563ae2628a272b06fbc082b5c6b5b1","modified":1496240570737},{"_id":"public/2017/04/13/ubuntuVpn/3.png","hash":"1bf036fe738983a942d443616d8592f1bc36d714","modified":1496240570737},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1496240570741},{"_id":"public/js/main.js","hash":"a15519ae8a397557cc594e8fb2f34fa9468f70fa","modified":1496240570741},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1496240570741},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1496240570741},{"_id":"public/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1496240570741},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1496240570741},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1496240570741},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1496240570741},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1496240570741},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1496240570741},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1496240570742},{"_id":"public/css/style.css","hash":"7820784cfa5bc6a8466193f2d4a90f0ad9559e90","modified":1496240570742},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1496240570742},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1496240570742},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1496240570742},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1496240570742},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1496240570742},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1496240570742},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1496240570742},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1496240570742},{"_id":"public/libs/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1496240570743},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1496240570743},{"_id":"public/2017/04/14/HTTPprotocol/1-2.png","hash":"7636186e292ccbe381fdbe6c89ee04229b1ff9cf","modified":1496240570743},{"_id":"public/2017/04/14/HTTPprotocol/1-1.png","hash":"0c65687c496088c98840f21e8c67200eadba5cad","modified":1496240570743},{"_id":"public/2017/04/13/ubuntuVpn/8.png","hash":"97d9c63f4b697bb4b7f342928bccfe85d5faac5b","modified":1496240570743},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1496240570749}],"Category":[{"name":"技术类-前端","_id":"cj3d3031z0005imw4j34n3o4g"},{"name":"技术类-网络协议","_id":"cj3d3032l000limw4of0axol7"},{"name":"技术类-linux","_id":"cj3d3032r000timw4f6j2g3j1"},{"name":"技术类-奇淫巧技","_id":"cj3d3032w0012imw4y78loh4n"},{"name":"技术类-算法","_id":"cj3d30339001kimw4gr9z61n4"},{"name":"文学类","_id":"cj3d3033f001yimw4rwaz2atd"}],"Data":[],"Page":[{"layout":"false","_content":"RUVpqOn26C","source":"baidu_verify_RUVpqOn26C.html","raw":"layout: false\n---\nRUVpqOn26C","date":"2017-05-13T16:12:47.167Z","updated":"2017-05-13T16:12:47.167Z","path":"baidu_verify_RUVpqOn26C.html","title":"","comments":1,"_id":"cj3d303050000imw4mdcrtgqs","content":"RUVpqOn26C","excerpt":"","more":"RUVpqOn26C"},{"layout":"false","_content":"google-site-verification: google8f959bed6376f4d8.html","source":"google8f959bed6376f4d8.html","raw":"layout: false\n---\ngoogle-site-verification: google8f959bed6376f4d8.html","date":"2017-05-13T16:12:47.167Z","updated":"2017-05-13T16:12:47.167Z","path":"google8f959bed6376f4d8.html","title":"","comments":1,"_id":"cj3d303070001imw45cod3fk1","content":"google-site-verification: google8f959bed6376f4d8.html","excerpt":"","more":"google-site-verification: google8f959bed6376f4d8.html"},{"_content":"## 我的邮箱：\n+ 网易邮箱：`raywhbxyr@163.com`\n","source":"contact/index.md","raw":"## 我的邮箱：\n+ 网易邮箱：`raywhbxyr@163.com`\n","date":"2017-04-18T09:07:12.104Z","updated":"2017-04-18T09:04:45.431Z","path":"contact/index.html","title":"","comments":1,"layout":"page","_id":"cj3d3031u0003imw46at3k7a2","content":"<h2 id=\"我的邮箱：\"><a href=\"#我的邮箱：\" class=\"headerlink\" title=\"我的邮箱：\"></a>我的邮箱：</h2><ul>\n<li>网易邮箱：<code>raywhbxyr@163.com</code></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"我的邮箱：\"><a href=\"#我的邮箱：\" class=\"headerlink\" title=\"我的邮箱：\"></a>我的邮箱：</h2><ul>\n<li>网易邮箱：<code>raywhbxyr@163.com</code></li>\n</ul>\n"}],"Post":[{"title":"DOM详解","date":"2016-04-20T12:32:42.000Z","_content":"&emsp;&emsp;**文档节点**是每个文档的**根**节点，文档节点只有一个子节点，即`<html>`元素，我们称之为**文档元素**。文档元素是文档的最外层元素，文档中的其他所有元素都包含在文档元素中。每个文档只能有一个文档元素。在HTML页面中，文档元素始终都是`<html>`元素。在XML中，没有预定义的元素，因此任何元素都可能成为文档元素。\n\n&emsp;&emsp;接下来讲讲**Node**类型。DOM1级定义了一个Node接口，该接口将由DOM中的所有节点类型实现。这个Node接口在JavaScript中是作为Node类型实现的；除IE之外，在其他所有浏览器中都可以访问到这个类型。JavaScript中的所有节点类型都继承自Node类型，因此所有节点类型都共享着相同的基本属性和方法。每个节点都有一个nodeType属性，共有12种节点类型，每种类型都由Node类型中定义的一个数值常量来表示，如下：\n```\nNode.ELEMENT_NODE(1)\nNode.ATTRIBUTE_NODE(2)\nNode.TEXT_NODE(3)\nNode.CDATA_SECTION_NODE(4)\nNode.ENTITY_REFERENCE_NODE(5)\nNode.ENTITY_NODE(6)\nNode.PROCESSING_INSTRUCTION_NODE(7)\nNode.COMMENT_NODE(8)\nNode.DOCUMENT_NODE(9)\nNode.DOCUMENT_TYPE_NODE(10)\nNode.DOCUMENT_FRAGMENT_NODE(11)\nNode.NOTATION_NODE(12)\n```","source":"_posts/DOM.md","raw":"---\ntitle: DOM详解\ndate: 2016-04-20 20:32:42\ncategories: [技术类-前端]\ntags: [DOM, html, JavaScript]\n---\n&emsp;&emsp;**文档节点**是每个文档的**根**节点，文档节点只有一个子节点，即`<html>`元素，我们称之为**文档元素**。文档元素是文档的最外层元素，文档中的其他所有元素都包含在文档元素中。每个文档只能有一个文档元素。在HTML页面中，文档元素始终都是`<html>`元素。在XML中，没有预定义的元素，因此任何元素都可能成为文档元素。\n\n&emsp;&emsp;接下来讲讲**Node**类型。DOM1级定义了一个Node接口，该接口将由DOM中的所有节点类型实现。这个Node接口在JavaScript中是作为Node类型实现的；除IE之外，在其他所有浏览器中都可以访问到这个类型。JavaScript中的所有节点类型都继承自Node类型，因此所有节点类型都共享着相同的基本属性和方法。每个节点都有一个nodeType属性，共有12种节点类型，每种类型都由Node类型中定义的一个数值常量来表示，如下：\n```\nNode.ELEMENT_NODE(1)\nNode.ATTRIBUTE_NODE(2)\nNode.TEXT_NODE(3)\nNode.CDATA_SECTION_NODE(4)\nNode.ENTITY_REFERENCE_NODE(5)\nNode.ENTITY_NODE(6)\nNode.PROCESSING_INSTRUCTION_NODE(7)\nNode.COMMENT_NODE(8)\nNode.DOCUMENT_NODE(9)\nNode.DOCUMENT_TYPE_NODE(10)\nNode.DOCUMENT_FRAGMENT_NODE(11)\nNode.NOTATION_NODE(12)\n```","slug":"DOM","published":1,"updated":"2017-04-25T14:32:25.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3031r0002imw437bna19i","content":"<p>&emsp;&emsp;<strong>文档节点</strong>是每个文档的<strong>根</strong>节点，文档节点只有一个子节点，即<code>&lt;html&gt;</code>元素，我们称之为<strong>文档元素</strong>。文档元素是文档的最外层元素，文档中的其他所有元素都包含在文档元素中。每个文档只能有一个文档元素。在HTML页面中，文档元素始终都是<code>&lt;html&gt;</code>元素。在XML中，没有预定义的元素，因此任何元素都可能成为文档元素。</p>\n<p>&emsp;&emsp;接下来讲讲<strong>Node</strong>类型。DOM1级定义了一个Node接口，该接口将由DOM中的所有节点类型实现。这个Node接口在JavaScript中是作为Node类型实现的；除IE之外，在其他所有浏览器中都可以访问到这个类型。JavaScript中的所有节点类型都继承自Node类型，因此所有节点类型都共享着相同的基本属性和方法。每个节点都有一个nodeType属性，共有12种节点类型，每种类型都由Node类型中定义的一个数值常量来表示，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Node.ELEMENT_NODE(1)</div><div class=\"line\">Node.ATTRIBUTE_NODE(2)</div><div class=\"line\">Node.TEXT_NODE(3)</div><div class=\"line\">Node.CDATA_SECTION_NODE(4)</div><div class=\"line\">Node.ENTITY_REFERENCE_NODE(5)</div><div class=\"line\">Node.ENTITY_NODE(6)</div><div class=\"line\">Node.PROCESSING_INSTRUCTION_NODE(7)</div><div class=\"line\">Node.COMMENT_NODE(8)</div><div class=\"line\">Node.DOCUMENT_NODE(9)</div><div class=\"line\">Node.DOCUMENT_TYPE_NODE(10)</div><div class=\"line\">Node.DOCUMENT_FRAGMENT_NODE(11)</div><div class=\"line\">Node.NOTATION_NODE(12)</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>&emsp;&emsp;<strong>文档节点</strong>是每个文档的<strong>根</strong>节点，文档节点只有一个子节点，即<code>&lt;html&gt;</code>元素，我们称之为<strong>文档元素</strong>。文档元素是文档的最外层元素，文档中的其他所有元素都包含在文档元素中。每个文档只能有一个文档元素。在HTML页面中，文档元素始终都是<code>&lt;html&gt;</code>元素。在XML中，没有预定义的元素，因此任何元素都可能成为文档元素。</p>\n<p>&emsp;&emsp;接下来讲讲<strong>Node</strong>类型。DOM1级定义了一个Node接口，该接口将由DOM中的所有节点类型实现。这个Node接口在JavaScript中是作为Node类型实现的；除IE之外，在其他所有浏览器中都可以访问到这个类型。JavaScript中的所有节点类型都继承自Node类型，因此所有节点类型都共享着相同的基本属性和方法。每个节点都有一个nodeType属性，共有12种节点类型，每种类型都由Node类型中定义的一个数值常量来表示，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Node.ELEMENT_NODE(1)</div><div class=\"line\">Node.ATTRIBUTE_NODE(2)</div><div class=\"line\">Node.TEXT_NODE(3)</div><div class=\"line\">Node.CDATA_SECTION_NODE(4)</div><div class=\"line\">Node.ENTITY_REFERENCE_NODE(5)</div><div class=\"line\">Node.ENTITY_NODE(6)</div><div class=\"line\">Node.PROCESSING_INSTRUCTION_NODE(7)</div><div class=\"line\">Node.COMMENT_NODE(8)</div><div class=\"line\">Node.DOCUMENT_NODE(9)</div><div class=\"line\">Node.DOCUMENT_TYPE_NODE(10)</div><div class=\"line\">Node.DOCUMENT_FRAGMENT_NODE(11)</div><div class=\"line\">Node.NOTATION_NODE(12)</div></pre></td></tr></table></figure></p>\n"},{"title":"JavaScript事件循环机制入门篇","date":"2017-04-09T05:20:09.000Z","_content":"## 函数调用栈和任务队列\n&emsp;&emsp;Javascript有一个**函数调用栈（call-stack）**，当在**函数调用栈**中执行某一个task时，其他的task都要等着，直到这个task执行完成并从**函数调用栈**中出栈（**函数调用栈**此时为空）时，下一个task才可以进入**函数调用栈**中执行。\n\n&emsp;&emsp;而JavaScript是**单线程**的，当在执行过程中遇到一些类似于setTimeout等异步操作的时候，会交给浏览器的其他模块(以webkit为例，是webcore模块)进行处理，当到达setTimeout指定的延时执行的时间之后，task(回调函数)会放入到**任务队列**之中。不同的异步任务的回调函数会放入不同的**任务队列**之中，比如宏任务和微任务（如下所示）。两者中，前者为宏任务，后者为微任务，在事件循环中的执行顺序均为从左到右。\n\n1.macro-task包括：script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI rendering\n\n2.micro-task包括：process.nextTick, Promises, Object.observe(已废弃), MutationObserver(html5新特性)\n\n等到函数调用栈中所有task执行完毕之后，接着去执行其它任务队列之中的task。下图展示了大致的执行流程以及结构：\n![事件循环大致流程以及结构](EventLoop/1.png)\n&emsp;&emsp;由上图可知，函数调用栈中遇到DOM操作/ajax请求或者setTimeout等WebAPIs的时候就会交给浏览器内核的其他模块进行处理，webkit内核在Javasctipt执行引擎之外，有一个重要的模块是webcore模块。对于图中WebAPIs提到的三种API，webcore分别提供了DOM Binding、network、timer模块来处理底层实现。等到这些模块处理完这些操作的时候将回调函数放入**任务队列**中，之后等栈中的task执行完之后再去执行以上**任务队列**之中的回调函数。\n## 以setTimeout为例观察事件循环机制（借鉴别人的）\n1.首先main()函数的执行上下文入栈。\n![2-1](EventLoop/2-1.png)\n2.代码接着执行，遇到console.log(‘Hi’),此时log(‘Hi’)入栈，console.log方法只是一个webkit内核支持的普通的方法，所以log(‘Hi’)方法立即被执行。此时输出’Hi’。\n![2-2](EventLoop/2-2.png)\n3.当遇到setTimeout的时候，执行引擎将其添加到栈中。\n![2-3](EventLoop/2-3.png)\n4.调用栈发现setTimeout是之前提到的WebAPIs中的API，因此将其出栈之后将延时执行的函数交给浏览器的timer模块进行处理。\n![2-4](EventLoop/2-4.png)\n5.timer模块去处理延时执行的函数，此时执行引擎接着执行将log(‘SJS’)添加到栈中，此时输出’SJS’。\n![2-5](EventLoop/2-5.png)\n6.当timer模块中延时方法规定的时间到了之后就将其放入到任务队列之中，此时调用栈中的task已经全部执行完毕。\n![2-6](EventLoop/2-6.png)\n7.任务队列中的回调函数调入函数调用栈中执行。\n![2-7](EventLoop/2-7.png)\n8.执行具体的内部程序。\n![2-8](EventLoop/2-8.png)\n## 总结\n&emsp;&emsp;本文简单讲解了JavaScript事件循环机制的原理，主要几点如下：\n\n&emsp;&emsp;1.所有的代码都要通过函数调用栈中调用执行。\n&emsp;&emsp;2.当遇到前文中提到的APIs的时候，会交给浏览器内核的其他模块进行处理。\n&emsp;&emsp;3.任务队列中存放的是回调函数。\n&emsp;&emsp;4.等到调用栈中的task执行完之后再回去执行任务队列之中的task。\n\n&emsp;&emsp;本文只能算是入门，若想深入了解JavaScript的事件循环机制，可见我的下一篇文章[JavaScript事件循环机制高级篇](http://www.whbxyr.cn/2017/04/09/EventLoopUp/)\n## 参考资料\n[深入浅出Javascript事件循环机制(上)](https://zhuanlan.zhihu.com/p/26229293)\n[深入浅出JavaScript事件循环机制(下)](https://zhuanlan.zhihu.com/p/26238030)\n[前端基础进阶（十二）：深入核心，详解事件循环机制](http://www.jianshu.com/p/12b9f73c5a4f)\n[JavaScript：彻底理解同步、异步和事件循环(Event Loop)](https://segmentfault.com/a/1190000004322358)","source":"_posts/EventLoop.md","raw":"---\ntitle: JavaScript事件循环机制入门篇\ndate: 2017-04-09 13:20:09\ncategories: [技术类-前端]\ntags: [JavaScript]\n---\n## 函数调用栈和任务队列\n&emsp;&emsp;Javascript有一个**函数调用栈（call-stack）**，当在**函数调用栈**中执行某一个task时，其他的task都要等着，直到这个task执行完成并从**函数调用栈**中出栈（**函数调用栈**此时为空）时，下一个task才可以进入**函数调用栈**中执行。\n\n&emsp;&emsp;而JavaScript是**单线程**的，当在执行过程中遇到一些类似于setTimeout等异步操作的时候，会交给浏览器的其他模块(以webkit为例，是webcore模块)进行处理，当到达setTimeout指定的延时执行的时间之后，task(回调函数)会放入到**任务队列**之中。不同的异步任务的回调函数会放入不同的**任务队列**之中，比如宏任务和微任务（如下所示）。两者中，前者为宏任务，后者为微任务，在事件循环中的执行顺序均为从左到右。\n\n1.macro-task包括：script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI rendering\n\n2.micro-task包括：process.nextTick, Promises, Object.observe(已废弃), MutationObserver(html5新特性)\n\n等到函数调用栈中所有task执行完毕之后，接着去执行其它任务队列之中的task。下图展示了大致的执行流程以及结构：\n![事件循环大致流程以及结构](EventLoop/1.png)\n&emsp;&emsp;由上图可知，函数调用栈中遇到DOM操作/ajax请求或者setTimeout等WebAPIs的时候就会交给浏览器内核的其他模块进行处理，webkit内核在Javasctipt执行引擎之外，有一个重要的模块是webcore模块。对于图中WebAPIs提到的三种API，webcore分别提供了DOM Binding、network、timer模块来处理底层实现。等到这些模块处理完这些操作的时候将回调函数放入**任务队列**中，之后等栈中的task执行完之后再去执行以上**任务队列**之中的回调函数。\n## 以setTimeout为例观察事件循环机制（借鉴别人的）\n1.首先main()函数的执行上下文入栈。\n![2-1](EventLoop/2-1.png)\n2.代码接着执行，遇到console.log(‘Hi’),此时log(‘Hi’)入栈，console.log方法只是一个webkit内核支持的普通的方法，所以log(‘Hi’)方法立即被执行。此时输出’Hi’。\n![2-2](EventLoop/2-2.png)\n3.当遇到setTimeout的时候，执行引擎将其添加到栈中。\n![2-3](EventLoop/2-3.png)\n4.调用栈发现setTimeout是之前提到的WebAPIs中的API，因此将其出栈之后将延时执行的函数交给浏览器的timer模块进行处理。\n![2-4](EventLoop/2-4.png)\n5.timer模块去处理延时执行的函数，此时执行引擎接着执行将log(‘SJS’)添加到栈中，此时输出’SJS’。\n![2-5](EventLoop/2-5.png)\n6.当timer模块中延时方法规定的时间到了之后就将其放入到任务队列之中，此时调用栈中的task已经全部执行完毕。\n![2-6](EventLoop/2-6.png)\n7.任务队列中的回调函数调入函数调用栈中执行。\n![2-7](EventLoop/2-7.png)\n8.执行具体的内部程序。\n![2-8](EventLoop/2-8.png)\n## 总结\n&emsp;&emsp;本文简单讲解了JavaScript事件循环机制的原理，主要几点如下：\n\n&emsp;&emsp;1.所有的代码都要通过函数调用栈中调用执行。\n&emsp;&emsp;2.当遇到前文中提到的APIs的时候，会交给浏览器内核的其他模块进行处理。\n&emsp;&emsp;3.任务队列中存放的是回调函数。\n&emsp;&emsp;4.等到调用栈中的task执行完之后再回去执行任务队列之中的task。\n\n&emsp;&emsp;本文只能算是入门，若想深入了解JavaScript的事件循环机制，可见我的下一篇文章[JavaScript事件循环机制高级篇](http://www.whbxyr.cn/2017/04/09/EventLoopUp/)\n## 参考资料\n[深入浅出Javascript事件循环机制(上)](https://zhuanlan.zhihu.com/p/26229293)\n[深入浅出JavaScript事件循环机制(下)](https://zhuanlan.zhihu.com/p/26238030)\n[前端基础进阶（十二）：深入核心，详解事件循环机制](http://www.jianshu.com/p/12b9f73c5a4f)\n[JavaScript：彻底理解同步、异步和事件循环(Event Loop)](https://segmentfault.com/a/1190000004322358)","slug":"EventLoop","published":1,"updated":"2017-04-19T14:32:28.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3031w0004imw4hw48t4wi","content":"<h2 id=\"函数调用栈和任务队列\"><a href=\"#函数调用栈和任务队列\" class=\"headerlink\" title=\"函数调用栈和任务队列\"></a>函数调用栈和任务队列</h2><p>&emsp;&emsp;Javascript有一个<strong>函数调用栈（call-stack）</strong>，当在<strong>函数调用栈</strong>中执行某一个task时，其他的task都要等着，直到这个task执行完成并从<strong>函数调用栈</strong>中出栈（<strong>函数调用栈</strong>此时为空）时，下一个task才可以进入<strong>函数调用栈</strong>中执行。</p>\n<p>&emsp;&emsp;而JavaScript是<strong>单线程</strong>的，当在执行过程中遇到一些类似于setTimeout等异步操作的时候，会交给浏览器的其他模块(以webkit为例，是webcore模块)进行处理，当到达setTimeout指定的延时执行的时间之后，task(回调函数)会放入到<strong>任务队列</strong>之中。不同的异步任务的回调函数会放入不同的<strong>任务队列</strong>之中，比如宏任务和微任务（如下所示）。两者中，前者为宏任务，后者为微任务，在事件循环中的执行顺序均为从左到右。</p>\n<p>1.macro-task包括：script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI rendering</p>\n<p>2.micro-task包括：process.nextTick, Promises, Object.observe(已废弃), MutationObserver(html5新特性)</p>\n<p>等到函数调用栈中所有task执行完毕之后，接着去执行其它任务队列之中的task。下图展示了大致的执行流程以及结构：<br><img src=\"/2017/04/09/EventLoop/1.png\" alt=\"事件循环大致流程以及结构\"><br>&emsp;&emsp;由上图可知，函数调用栈中遇到DOM操作/ajax请求或者setTimeout等WebAPIs的时候就会交给浏览器内核的其他模块进行处理，webkit内核在Javasctipt执行引擎之外，有一个重要的模块是webcore模块。对于图中WebAPIs提到的三种API，webcore分别提供了DOM Binding、network、timer模块来处理底层实现。等到这些模块处理完这些操作的时候将回调函数放入<strong>任务队列</strong>中，之后等栈中的task执行完之后再去执行以上<strong>任务队列</strong>之中的回调函数。</p>\n<h2 id=\"以setTimeout为例观察事件循环机制（借鉴别人的）\"><a href=\"#以setTimeout为例观察事件循环机制（借鉴别人的）\" class=\"headerlink\" title=\"以setTimeout为例观察事件循环机制（借鉴别人的）\"></a>以setTimeout为例观察事件循环机制（借鉴别人的）</h2><p>1.首先main()函数的执行上下文入栈。<br><img src=\"/2017/04/09/EventLoop/2-1.png\" alt=\"2-1\"><br>2.代码接着执行，遇到console.log(‘Hi’),此时log(‘Hi’)入栈，console.log方法只是一个webkit内核支持的普通的方法，所以log(‘Hi’)方法立即被执行。此时输出’Hi’。<br><img src=\"/2017/04/09/EventLoop/2-2.png\" alt=\"2-2\"><br>3.当遇到setTimeout的时候，执行引擎将其添加到栈中。<br><img src=\"/2017/04/09/EventLoop/2-3.png\" alt=\"2-3\"><br>4.调用栈发现setTimeout是之前提到的WebAPIs中的API，因此将其出栈之后将延时执行的函数交给浏览器的timer模块进行处理。<br><img src=\"/2017/04/09/EventLoop/2-4.png\" alt=\"2-4\"><br>5.timer模块去处理延时执行的函数，此时执行引擎接着执行将log(‘SJS’)添加到栈中，此时输出’SJS’。<br><img src=\"/2017/04/09/EventLoop/2-5.png\" alt=\"2-5\"><br>6.当timer模块中延时方法规定的时间到了之后就将其放入到任务队列之中，此时调用栈中的task已经全部执行完毕。<br><img src=\"/2017/04/09/EventLoop/2-6.png\" alt=\"2-6\"><br>7.任务队列中的回调函数调入函数调用栈中执行。<br><img src=\"/2017/04/09/EventLoop/2-7.png\" alt=\"2-7\"><br>8.执行具体的内部程序。<br><img src=\"/2017/04/09/EventLoop/2-8.png\" alt=\"2-8\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>&emsp;&emsp;本文简单讲解了JavaScript事件循环机制的原理，主要几点如下：</p>\n<p>&emsp;&emsp;1.所有的代码都要通过函数调用栈中调用执行。<br>&emsp;&emsp;2.当遇到前文中提到的APIs的时候，会交给浏览器内核的其他模块进行处理。<br>&emsp;&emsp;3.任务队列中存放的是回调函数。<br>&emsp;&emsp;4.等到调用栈中的task执行完之后再回去执行任务队列之中的task。</p>\n<p>&emsp;&emsp;本文只能算是入门，若想深入了解JavaScript的事件循环机制，可见我的下一篇文章<a href=\"http://www.whbxyr.cn/2017/04/09/EventLoopUp/\">JavaScript事件循环机制高级篇</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://zhuanlan.zhihu.com/p/26229293\" target=\"_blank\" rel=\"external\">深入浅出Javascript事件循环机制(上)</a><br><a href=\"https://zhuanlan.zhihu.com/p/26238030\" target=\"_blank\" rel=\"external\">深入浅出JavaScript事件循环机制(下)</a><br><a href=\"http://www.jianshu.com/p/12b9f73c5a4f\" target=\"_blank\" rel=\"external\">前端基础进阶（十二）：深入核心，详解事件循环机制</a><br><a href=\"https://segmentfault.com/a/1190000004322358\" target=\"_blank\" rel=\"external\">JavaScript：彻底理解同步、异步和事件循环(Event Loop)</a></p>\n","excerpt":"","more":"<h2 id=\"函数调用栈和任务队列\"><a href=\"#函数调用栈和任务队列\" class=\"headerlink\" title=\"函数调用栈和任务队列\"></a>函数调用栈和任务队列</h2><p>&emsp;&emsp;Javascript有一个<strong>函数调用栈（call-stack）</strong>，当在<strong>函数调用栈</strong>中执行某一个task时，其他的task都要等着，直到这个task执行完成并从<strong>函数调用栈</strong>中出栈（<strong>函数调用栈</strong>此时为空）时，下一个task才可以进入<strong>函数调用栈</strong>中执行。</p>\n<p>&emsp;&emsp;而JavaScript是<strong>单线程</strong>的，当在执行过程中遇到一些类似于setTimeout等异步操作的时候，会交给浏览器的其他模块(以webkit为例，是webcore模块)进行处理，当到达setTimeout指定的延时执行的时间之后，task(回调函数)会放入到<strong>任务队列</strong>之中。不同的异步任务的回调函数会放入不同的<strong>任务队列</strong>之中，比如宏任务和微任务（如下所示）。两者中，前者为宏任务，后者为微任务，在事件循环中的执行顺序均为从左到右。</p>\n<p>1.macro-task包括：script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI rendering</p>\n<p>2.micro-task包括：process.nextTick, Promises, Object.observe(已废弃), MutationObserver(html5新特性)</p>\n<p>等到函数调用栈中所有task执行完毕之后，接着去执行其它任务队列之中的task。下图展示了大致的执行流程以及结构：<br><img src=\"/2017/04/09/EventLoop/1.png\" alt=\"事件循环大致流程以及结构\"><br>&emsp;&emsp;由上图可知，函数调用栈中遇到DOM操作/ajax请求或者setTimeout等WebAPIs的时候就会交给浏览器内核的其他模块进行处理，webkit内核在Javasctipt执行引擎之外，有一个重要的模块是webcore模块。对于图中WebAPIs提到的三种API，webcore分别提供了DOM Binding、network、timer模块来处理底层实现。等到这些模块处理完这些操作的时候将回调函数放入<strong>任务队列</strong>中，之后等栈中的task执行完之后再去执行以上<strong>任务队列</strong>之中的回调函数。</p>\n<h2 id=\"以setTimeout为例观察事件循环机制（借鉴别人的）\"><a href=\"#以setTimeout为例观察事件循环机制（借鉴别人的）\" class=\"headerlink\" title=\"以setTimeout为例观察事件循环机制（借鉴别人的）\"></a>以setTimeout为例观察事件循环机制（借鉴别人的）</h2><p>1.首先main()函数的执行上下文入栈。<br><img src=\"/2017/04/09/EventLoop/2-1.png\" alt=\"2-1\"><br>2.代码接着执行，遇到console.log(‘Hi’),此时log(‘Hi’)入栈，console.log方法只是一个webkit内核支持的普通的方法，所以log(‘Hi’)方法立即被执行。此时输出’Hi’。<br><img src=\"/2017/04/09/EventLoop/2-2.png\" alt=\"2-2\"><br>3.当遇到setTimeout的时候，执行引擎将其添加到栈中。<br><img src=\"/2017/04/09/EventLoop/2-3.png\" alt=\"2-3\"><br>4.调用栈发现setTimeout是之前提到的WebAPIs中的API，因此将其出栈之后将延时执行的函数交给浏览器的timer模块进行处理。<br><img src=\"/2017/04/09/EventLoop/2-4.png\" alt=\"2-4\"><br>5.timer模块去处理延时执行的函数，此时执行引擎接着执行将log(‘SJS’)添加到栈中，此时输出’SJS’。<br><img src=\"/2017/04/09/EventLoop/2-5.png\" alt=\"2-5\"><br>6.当timer模块中延时方法规定的时间到了之后就将其放入到任务队列之中，此时调用栈中的task已经全部执行完毕。<br><img src=\"/2017/04/09/EventLoop/2-6.png\" alt=\"2-6\"><br>7.任务队列中的回调函数调入函数调用栈中执行。<br><img src=\"/2017/04/09/EventLoop/2-7.png\" alt=\"2-7\"><br>8.执行具体的内部程序。<br><img src=\"/2017/04/09/EventLoop/2-8.png\" alt=\"2-8\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>&emsp;&emsp;本文简单讲解了JavaScript事件循环机制的原理，主要几点如下：</p>\n<p>&emsp;&emsp;1.所有的代码都要通过函数调用栈中调用执行。<br>&emsp;&emsp;2.当遇到前文中提到的APIs的时候，会交给浏览器内核的其他模块进行处理。<br>&emsp;&emsp;3.任务队列中存放的是回调函数。<br>&emsp;&emsp;4.等到调用栈中的task执行完之后再回去执行任务队列之中的task。</p>\n<p>&emsp;&emsp;本文只能算是入门，若想深入了解JavaScript的事件循环机制，可见我的下一篇文章<a href=\"http://www.whbxyr.cn/2017/04/09/EventLoopUp/\">JavaScript事件循环机制高级篇</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://zhuanlan.zhihu.com/p/26229293\">深入浅出Javascript事件循环机制(上)</a><br><a href=\"https://zhuanlan.zhihu.com/p/26238030\">深入浅出JavaScript事件循环机制(下)</a><br><a href=\"http://www.jianshu.com/p/12b9f73c5a4f\">前端基础进阶（十二）：深入核心，详解事件循环机制</a><br><a href=\"https://segmentfault.com/a/1190000004322358\">JavaScript：彻底理解同步、异步和事件循环(Event Loop)</a></p>\n"},{"title":"兼容浏览器的事件处理程序 EventUtil","date":"2016-06-24T10:06:56.000Z","_content":"```javascript\nvar EventUtil = {\n    // 获取事件对象，兼容IE\n    getEvent: function (event) {\n        return event ? event : window.event;\n    },\n    // 获取事件目标，兼容IE\n    getTarget: function (event) {\n        return event.target || event.srcElement;\n    },\n    // 阻止默认事件，兼容IE\n    preventDefault: function (event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        }\n        else {\n            event.returnValue = false;\n        }\n    },\n    // 阻止事件冒泡，兼容IE\n    stopPropagation: function (event) {\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        }\n        else {\n            event.cancelBubble = true;\n        }\n    },\n    // 注册事件\n    addHandler: function (element, type, handler) {\n        if (element.addEventListener) {\n            // DOM2级的事件处理程序，最后一个参数为false，设置该事件处理程序在事件流的冒泡阶段触发\n            element.addEventListener(type, handler, false);\n        }\n        else if (element.attachEvent){\n            // IE的事件处理程序\n            element.attachEvent('on' + type, handler);\n        }\n        else {\n            // DOM0级的事件处理程序\n            element['on' + type] = handler;\n        }\n    },\n    // 删除事件\n    removeHandler: function (element, type, handler) {\n        if (element.removeEventListener) {\n            element.removeEventListener(type, handler, false);\n        }\n        else if (element.detachEvent) {\n            element.detachEvent('on' + type, handler);\n        }\n        else {\n            element['on' + type] = null;\n        }\n    },\n    // 获取事件(mouseover, mouseout)相关元素的信息\n    getRelatedTarget: function (event) {\n        if (event.relatedTarget) {\n            return event.relatedTarget;\n        }\n        else if (event.toElement) {\n            return event.toElement;\n        }\n        else if (event.fromElement) {\n            return event.fromElement;\n        }\n        else {\n            return null;\n        }\n    },\n    // 获取鼠标点击事件的鼠标按钮\n    getButton: function (event) {\n        if (document.implementation.hasFeature('MouseEvents', '2.0')) {\n            return event.button;\n        }\n        else {\n            switch (event.button) {\n                case 0:\n                case 1:\n                case 3:\n                case 5:\n                case 7:\n                    // 返回0表示主鼠标按钮\n                    return 0;\n                case 2:\n                case 6:\n                    // 返回2表示次鼠标按钮\n                    return 2;\n                case 4:\n                    // 返回1表示中间的鼠标按钮\n                    return 1;\n            };\n        }\n    },\n    // 获取mousewheel事件的wheelDelta或者detail属性\n    getWheelDelta: function (event) {\n        if (event.wheelDelta) {\n            return (client.engine.opera && client.engine.opera < 9.5\n                ? -event.wheelDelta : event.wheelDelta);\n        }\n        else {\n            return -event.detail * 40;\n        }\n    },\n    // 获取键盘事件的字符编码\n    getCharCode: function (event) {\n        if (typeof event.charCode === 'number') {\n            return event.charCode;\n        }\n        else {\n            return event.keyCode;\n        }\n    }\n};\n```","source":"_posts/EventUtil.md","raw":"---\ntitle: 兼容浏览器的事件处理程序 EventUtil\ndate: 2016-06-24 18:06:56\ncategories: [技术类-前端]\ntags: [DOM, JavaScript]\n---\n```javascript\nvar EventUtil = {\n    // 获取事件对象，兼容IE\n    getEvent: function (event) {\n        return event ? event : window.event;\n    },\n    // 获取事件目标，兼容IE\n    getTarget: function (event) {\n        return event.target || event.srcElement;\n    },\n    // 阻止默认事件，兼容IE\n    preventDefault: function (event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        }\n        else {\n            event.returnValue = false;\n        }\n    },\n    // 阻止事件冒泡，兼容IE\n    stopPropagation: function (event) {\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        }\n        else {\n            event.cancelBubble = true;\n        }\n    },\n    // 注册事件\n    addHandler: function (element, type, handler) {\n        if (element.addEventListener) {\n            // DOM2级的事件处理程序，最后一个参数为false，设置该事件处理程序在事件流的冒泡阶段触发\n            element.addEventListener(type, handler, false);\n        }\n        else if (element.attachEvent){\n            // IE的事件处理程序\n            element.attachEvent('on' + type, handler);\n        }\n        else {\n            // DOM0级的事件处理程序\n            element['on' + type] = handler;\n        }\n    },\n    // 删除事件\n    removeHandler: function (element, type, handler) {\n        if (element.removeEventListener) {\n            element.removeEventListener(type, handler, false);\n        }\n        else if (element.detachEvent) {\n            element.detachEvent('on' + type, handler);\n        }\n        else {\n            element['on' + type] = null;\n        }\n    },\n    // 获取事件(mouseover, mouseout)相关元素的信息\n    getRelatedTarget: function (event) {\n        if (event.relatedTarget) {\n            return event.relatedTarget;\n        }\n        else if (event.toElement) {\n            return event.toElement;\n        }\n        else if (event.fromElement) {\n            return event.fromElement;\n        }\n        else {\n            return null;\n        }\n    },\n    // 获取鼠标点击事件的鼠标按钮\n    getButton: function (event) {\n        if (document.implementation.hasFeature('MouseEvents', '2.0')) {\n            return event.button;\n        }\n        else {\n            switch (event.button) {\n                case 0:\n                case 1:\n                case 3:\n                case 5:\n                case 7:\n                    // 返回0表示主鼠标按钮\n                    return 0;\n                case 2:\n                case 6:\n                    // 返回2表示次鼠标按钮\n                    return 2;\n                case 4:\n                    // 返回1表示中间的鼠标按钮\n                    return 1;\n            };\n        }\n    },\n    // 获取mousewheel事件的wheelDelta或者detail属性\n    getWheelDelta: function (event) {\n        if (event.wheelDelta) {\n            return (client.engine.opera && client.engine.opera < 9.5\n                ? -event.wheelDelta : event.wheelDelta);\n        }\n        else {\n            return -event.detail * 40;\n        }\n    },\n    // 获取键盘事件的字符编码\n    getCharCode: function (event) {\n        if (typeof event.charCode === 'number') {\n            return event.charCode;\n        }\n        else {\n            return event.keyCode;\n        }\n    }\n};\n```","slug":"EventUtil","published":1,"updated":"2017-04-25T14:27:41.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d303210007imw4kbxihf7p","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventUtil = &#123;</div><div class=\"line\">    <span class=\"comment\">// 获取事件对象，兼容IE</span></div><div class=\"line\">    getEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> event ? event : <span class=\"built_in\">window</span>.event;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 获取事件目标，兼容IE</span></div><div class=\"line\">    getTarget: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> event.target || event.srcElement;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 阻止默认事件，兼容IE</span></div><div class=\"line\">    preventDefault: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (event.preventDefault) &#123;</div><div class=\"line\">            event.preventDefault();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            event.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 阻止事件冒泡，兼容IE</span></div><div class=\"line\">    stopPropagation: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (event.stopPropagation) &#123;</div><div class=\"line\">            event.stopPropagation();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            event.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 注册事件</span></div><div class=\"line\">    addHandler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (element.addEventListener) &#123;</div><div class=\"line\">            <span class=\"comment\">// DOM2级的事件处理程序，最后一个参数为false，设置该事件处理程序在事件流的冒泡阶段触发</span></div><div class=\"line\">            element.addEventListener(type, handler, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent)&#123;</div><div class=\"line\">            <span class=\"comment\">// IE的事件处理程序</span></div><div class=\"line\">            element.attachEvent(<span class=\"string\">'on'</span> + type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// DOM0级的事件处理程序</span></div><div class=\"line\">            element[<span class=\"string\">'on'</span> + type] = handler;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 删除事件</span></div><div class=\"line\">    removeHandler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (element.removeEventListener) &#123;</div><div class=\"line\">            element.removeEventListener(type, handler, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.detachEvent) &#123;</div><div class=\"line\">            element.detachEvent(<span class=\"string\">'on'</span> + type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            element[<span class=\"string\">'on'</span> + type] = <span class=\"literal\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 获取事件(mouseover, mouseout)相关元素的信息</span></div><div class=\"line\">    getRelatedTarget: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (event.relatedTarget) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> event.relatedTarget;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event.toElement) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> event.toElement;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event.fromElement) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> event.fromElement;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 获取鼠标点击事件的鼠标按钮</span></div><div class=\"line\">    getButton: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.implementation.hasFeature(<span class=\"string\">'MouseEvents'</span>, <span class=\"string\">'2.0'</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> event.button;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (event.button) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</div><div class=\"line\">                    <span class=\"comment\">// 返回0表示主鼠标按钮</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</div><div class=\"line\">                    <span class=\"comment\">// 返回2表示次鼠标按钮</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">                    <span class=\"comment\">// 返回1表示中间的鼠标按钮</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 获取mousewheel事件的wheelDelta或者detail属性</span></div><div class=\"line\">    getWheelDelta: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (event.wheelDelta) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (client.engine.opera &amp;&amp; client.engine.opera &lt; <span class=\"number\">9.5</span></div><div class=\"line\">                ? -event.wheelDelta : event.wheelDelta);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> -event.detail * <span class=\"number\">40</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 获取键盘事件的字符编码</span></div><div class=\"line\">    getCharCode: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> event.charCode === <span class=\"string\">'number'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> event.charCode;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> event.keyCode;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventUtil = &#123;</div><div class=\"line\">    <span class=\"comment\">// 获取事件对象，兼容IE</span></div><div class=\"line\">    getEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> event ? event : <span class=\"built_in\">window</span>.event;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 获取事件目标，兼容IE</span></div><div class=\"line\">    getTarget: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> event.target || event.srcElement;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 阻止默认事件，兼容IE</span></div><div class=\"line\">    preventDefault: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (event.preventDefault) &#123;</div><div class=\"line\">            event.preventDefault();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            event.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 阻止事件冒泡，兼容IE</span></div><div class=\"line\">    stopPropagation: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (event.stopPropagation) &#123;</div><div class=\"line\">            event.stopPropagation();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            event.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 注册事件</span></div><div class=\"line\">    addHandler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (element.addEventListener) &#123;</div><div class=\"line\">            <span class=\"comment\">// DOM2级的事件处理程序，最后一个参数为false，设置该事件处理程序在事件流的冒泡阶段触发</span></div><div class=\"line\">            element.addEventListener(type, handler, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.attachEvent)&#123;</div><div class=\"line\">            <span class=\"comment\">// IE的事件处理程序</span></div><div class=\"line\">            element.attachEvent(<span class=\"string\">'on'</span> + type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// DOM0级的事件处理程序</span></div><div class=\"line\">            element[<span class=\"string\">'on'</span> + type] = handler;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 删除事件</span></div><div class=\"line\">    removeHandler: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (element.removeEventListener) &#123;</div><div class=\"line\">            element.removeEventListener(type, handler, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.detachEvent) &#123;</div><div class=\"line\">            element.detachEvent(<span class=\"string\">'on'</span> + type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            element[<span class=\"string\">'on'</span> + type] = <span class=\"literal\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 获取事件(mouseover, mouseout)相关元素的信息</span></div><div class=\"line\">    getRelatedTarget: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (event.relatedTarget) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> event.relatedTarget;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event.toElement) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> event.toElement;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event.fromElement) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> event.fromElement;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 获取鼠标点击事件的鼠标按钮</span></div><div class=\"line\">    getButton: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.implementation.hasFeature(<span class=\"string\">'MouseEvents'</span>, <span class=\"string\">'2.0'</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> event.button;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (event.button) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</div><div class=\"line\">                    <span class=\"comment\">// 返回0表示主鼠标按钮</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</div><div class=\"line\">                    <span class=\"comment\">// 返回2表示次鼠标按钮</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">                    <span class=\"comment\">// 返回1表示中间的鼠标按钮</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 获取mousewheel事件的wheelDelta或者detail属性</span></div><div class=\"line\">    getWheelDelta: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (event.wheelDelta) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (client.engine.opera &amp;&amp; client.engine.opera &lt; <span class=\"number\">9.5</span></div><div class=\"line\">                ? -event.wheelDelta : event.wheelDelta);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> -event.detail * <span class=\"number\">40</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 获取键盘事件的字符编码</span></div><div class=\"line\">    getCharCode: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> event.charCode === <span class=\"string\">'number'</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> event.charCode;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> event.keyCode;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"title":"详解应用层协议之 HTTP 协议","date":"2017-04-14T04:17:11.000Z","_content":"&emsp;&emsp;HTTP 协议定义了浏览器（万维网客户端）怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。从层次的角度看，HTTP 协议是面向事务的应用层协议，它是万维网上能够可靠地交换文件（包括文本/声音/图像等各种多媒体文件）的重要基础。\n\n## (一) http协议的特点\n+ http是**面向事务**/**无状态**/**无连接**的协议\n+ http报文分请求报文和响应报文两种\n+ http的发展路线：0.9 ~ 1.0 ～ 1.1 ～ 2.0\n\n## (二) http报文的分类\n#### http报文分两类，包括`请求报文`以及`响应报文`，两种报文的格式都由三部分组成，包括`开始行`/`首部行`/`实体主体` 三部分。\n\n（1）**请求报文** 即浏览器（万维网客户端）向万维网服务器发送的报文。请求报文中的开始行也称作 `请求行`，首部行又叫做请求报文的 `请求头`，实体主体（请求主体）又叫做 `http实体`（包含首部行和实体主体两部分）的实体主体。各部分的详细格式信息如下图：\n![http请求报文格式](HTTPprotocol/1-1.png)\n\n&emsp;&emsp;例子：\n\n&emsp;&emsp;GET /562f25980001b1b106000338.jpg HTTP/1.1\n&emsp;&emsp;Host    img.mukewang.com\n&emsp;&emsp;User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\n&emsp;&emsp;Accept    image/webp,image/*,*/*;q=0.8\n&emsp;&emsp;Referer    http://www.imooc.com/\n&emsp;&emsp;Accept-Encoding    gzip, deflate, sdch\n&emsp;&emsp;Accept-Language    zh-CN,zh;q=0.8\n\n（2）**响应报文** 即万维网服务器向浏览器（万维网客户端）发送的报文。响应报文中的开始行也称作`状态行`，首部行又叫做请求报文的 `响应头`，实体主体（响应主体）又叫做 `http实体`（包含首部行和实体主体两部分）的实体主体。各部分的详细格式信息如下图：\n![http响应报文格式](HTTPprotocol/1-2.png)\n\n&emsp;&emsp;例子：\n\n&emsp;&emsp;HTTP/1.1 200 OK\n&emsp;&emsp;Date: Fri, 22 May 2009 06:07:21 GMT\n&emsp;&emsp;Content-Type: text/html; charset=UTF-8\n&emsp;&emsp;\n&emsp;&emsp;`<html>`\n&emsp;&emsp;`      <head></head>`\n&emsp;&emsp;`      <body>`\n&emsp;&emsp;`            <!--body goes here-->`\n&emsp;&emsp;`      </body>`\n&emsp;&emsp;`</html>`\n\n## (三) http报文的状态码（响应报文产生的）\nhttp响应报文产生的状态码主要分五类，如下：\n（1）1xx，表示通知信息的，如请求收到了或正在进行处理。包括 **100 - 102** 。\n（2）2xx，表示成功，如接受或知道了。包括 **200 - 207** 。\n（3）3xx，表示重定向，如要完成请求还必须采取进一步的行动。包括 **300 - 307** 。\n（4）4xx，表示客户的差错，如请求中有错误的语法或不能完成。包括 **400 - 418** 、**421 - 426**、**449**、**451**。\n（5）5xx，表示服务器的差错，如服务器失效无法完成请求。包括 **500 - 507**、**509 - 510**。\n其中，还有一个比较少见的状态码 **600**，它代表万维网服务器只返回了响应主体而没有返回响应头。\n## (四) http协议中的相关称谓\n+ **请求头**/**响应头**（header），即**首部行**。\n+ **http实体**，即由**首部行**（header）以及**实体主体**（body）两部分组成的，不包括开始行。","source":"_posts/HTTPprotocol.md","raw":"---\ntitle: 详解应用层协议之 HTTP 协议\ndate: 2017-04-14 12:17:11\ncategories: [技术类-网络协议]\ntags: [网络协议]\n---\n&emsp;&emsp;HTTP 协议定义了浏览器（万维网客户端）怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。从层次的角度看，HTTP 协议是面向事务的应用层协议，它是万维网上能够可靠地交换文件（包括文本/声音/图像等各种多媒体文件）的重要基础。\n\n## (一) http协议的特点\n+ http是**面向事务**/**无状态**/**无连接**的协议\n+ http报文分请求报文和响应报文两种\n+ http的发展路线：0.9 ~ 1.0 ～ 1.1 ～ 2.0\n\n## (二) http报文的分类\n#### http报文分两类，包括`请求报文`以及`响应报文`，两种报文的格式都由三部分组成，包括`开始行`/`首部行`/`实体主体` 三部分。\n\n（1）**请求报文** 即浏览器（万维网客户端）向万维网服务器发送的报文。请求报文中的开始行也称作 `请求行`，首部行又叫做请求报文的 `请求头`，实体主体（请求主体）又叫做 `http实体`（包含首部行和实体主体两部分）的实体主体。各部分的详细格式信息如下图：\n![http请求报文格式](HTTPprotocol/1-1.png)\n\n&emsp;&emsp;例子：\n\n&emsp;&emsp;GET /562f25980001b1b106000338.jpg HTTP/1.1\n&emsp;&emsp;Host    img.mukewang.com\n&emsp;&emsp;User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\n&emsp;&emsp;Accept    image/webp,image/*,*/*;q=0.8\n&emsp;&emsp;Referer    http://www.imooc.com/\n&emsp;&emsp;Accept-Encoding    gzip, deflate, sdch\n&emsp;&emsp;Accept-Language    zh-CN,zh;q=0.8\n\n（2）**响应报文** 即万维网服务器向浏览器（万维网客户端）发送的报文。响应报文中的开始行也称作`状态行`，首部行又叫做请求报文的 `响应头`，实体主体（响应主体）又叫做 `http实体`（包含首部行和实体主体两部分）的实体主体。各部分的详细格式信息如下图：\n![http响应报文格式](HTTPprotocol/1-2.png)\n\n&emsp;&emsp;例子：\n\n&emsp;&emsp;HTTP/1.1 200 OK\n&emsp;&emsp;Date: Fri, 22 May 2009 06:07:21 GMT\n&emsp;&emsp;Content-Type: text/html; charset=UTF-8\n&emsp;&emsp;\n&emsp;&emsp;`<html>`\n&emsp;&emsp;`      <head></head>`\n&emsp;&emsp;`      <body>`\n&emsp;&emsp;`            <!--body goes here-->`\n&emsp;&emsp;`      </body>`\n&emsp;&emsp;`</html>`\n\n## (三) http报文的状态码（响应报文产生的）\nhttp响应报文产生的状态码主要分五类，如下：\n（1）1xx，表示通知信息的，如请求收到了或正在进行处理。包括 **100 - 102** 。\n（2）2xx，表示成功，如接受或知道了。包括 **200 - 207** 。\n（3）3xx，表示重定向，如要完成请求还必须采取进一步的行动。包括 **300 - 307** 。\n（4）4xx，表示客户的差错，如请求中有错误的语法或不能完成。包括 **400 - 418** 、**421 - 426**、**449**、**451**。\n（5）5xx，表示服务器的差错，如服务器失效无法完成请求。包括 **500 - 507**、**509 - 510**。\n其中，还有一个比较少见的状态码 **600**，它代表万维网服务器只返回了响应主体而没有返回响应头。\n## (四) http协议中的相关称谓\n+ **请求头**/**响应头**（header），即**首部行**。\n+ **http实体**，即由**首部行**（header）以及**实体主体**（body）两部分组成的，不包括开始行。","slug":"HTTPprotocol","published":1,"updated":"2017-04-19T14:31:19.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d303260008imw4eyxu03tj","content":"<p>&emsp;&emsp;HTTP 协议定义了浏览器（万维网客户端）怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。从层次的角度看，HTTP 协议是面向事务的应用层协议，它是万维网上能够可靠地交换文件（包括文本/声音/图像等各种多媒体文件）的重要基础。</p>\n<h2 id=\"一-http协议的特点\"><a href=\"#一-http协议的特点\" class=\"headerlink\" title=\"(一) http协议的特点\"></a>(一) http协议的特点</h2><ul>\n<li>http是<strong>面向事务</strong>/<strong>无状态</strong>/<strong>无连接</strong>的协议</li>\n<li>http报文分请求报文和响应报文两种</li>\n<li>http的发展路线：0.9 ~ 1.0 ～ 1.1 ～ 2.0</li>\n</ul>\n<h2 id=\"二-http报文的分类\"><a href=\"#二-http报文的分类\" class=\"headerlink\" title=\"(二) http报文的分类\"></a>(二) http报文的分类</h2><h4 id=\"http报文分两类，包括请求报文以及响应报文，两种报文的格式都由三部分组成，包括开始行-首部行-实体主体-三部分。\"><a href=\"#http报文分两类，包括请求报文以及响应报文，两种报文的格式都由三部分组成，包括开始行-首部行-实体主体-三部分。\" class=\"headerlink\" title=\"http报文分两类，包括请求报文以及响应报文，两种报文的格式都由三部分组成，包括开始行/首部行/实体主体 三部分。\"></a>http报文分两类，包括<code>请求报文</code>以及<code>响应报文</code>，两种报文的格式都由三部分组成，包括<code>开始行</code>/<code>首部行</code>/<code>实体主体</code> 三部分。</h4><p>（1）<strong>请求报文</strong> 即浏览器（万维网客户端）向万维网服务器发送的报文。请求报文中的开始行也称作 <code>请求行</code>，首部行又叫做请求报文的 <code>请求头</code>，实体主体（请求主体）又叫做 <code>http实体</code>（包含首部行和实体主体两部分）的实体主体。各部分的详细格式信息如下图：<br><img src=\"/2017/04/14/HTTPprotocol/1-1.png\" alt=\"http请求报文格式\"></p>\n<p>&emsp;&emsp;例子：</p>\n<p>&emsp;&emsp;GET /562f25980001b1b106000338.jpg HTTP/1.1<br>&emsp;&emsp;Host    img.mukewang.com<br>&emsp;&emsp;User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36<br>&emsp;&emsp;Accept    image/webp,image/<em>,</em>/*;q=0.8<br>&emsp;&emsp;Referer    <a href=\"http://www.imooc.com/\" target=\"_blank\" rel=\"external\">http://www.imooc.com/</a><br>&emsp;&emsp;Accept-Encoding    gzip, deflate, sdch<br>&emsp;&emsp;Accept-Language    zh-CN,zh;q=0.8</p>\n<p>（2）<strong>响应报文</strong> 即万维网服务器向浏览器（万维网客户端）发送的报文。响应报文中的开始行也称作<code>状态行</code>，首部行又叫做请求报文的 <code>响应头</code>，实体主体（响应主体）又叫做 <code>http实体</code>（包含首部行和实体主体两部分）的实体主体。各部分的详细格式信息如下图：<br><img src=\"/2017/04/14/HTTPprotocol/1-2.png\" alt=\"http响应报文格式\"></p>\n<p>&emsp;&emsp;例子：</p>\n<p>&emsp;&emsp;HTTP/1.1 200 OK<br>&emsp;&emsp;Date: Fri, 22 May 2009 06:07:21 GMT<br>&emsp;&emsp;Content-Type: text/html; charset=UTF-8<br>&emsp;&emsp;<br>&emsp;&emsp;<code>&lt;html&gt;</code><br>&emsp;&emsp;<code>&lt;head&gt;&lt;/head&gt;</code><br>&emsp;&emsp;<code>&lt;body&gt;</code><br>&emsp;&emsp;<code>&lt;!--body goes here--&gt;</code><br>&emsp;&emsp;<code>&lt;/body&gt;</code><br>&emsp;&emsp;<code>&lt;/html&gt;</code></p>\n<h2 id=\"三-http报文的状态码（响应报文产生的）\"><a href=\"#三-http报文的状态码（响应报文产生的）\" class=\"headerlink\" title=\"(三) http报文的状态码（响应报文产生的）\"></a>(三) http报文的状态码（响应报文产生的）</h2><p>http响应报文产生的状态码主要分五类，如下：<br>（1）1xx，表示通知信息的，如请求收到了或正在进行处理。包括 <strong>100 - 102</strong> 。<br>（2）2xx，表示成功，如接受或知道了。包括 <strong>200 - 207</strong> 。<br>（3）3xx，表示重定向，如要完成请求还必须采取进一步的行动。包括 <strong>300 - 307</strong> 。<br>（4）4xx，表示客户的差错，如请求中有错误的语法或不能完成。包括 <strong>400 - 418</strong> 、<strong>421 - 426</strong>、<strong>449</strong>、<strong>451</strong>。<br>（5）5xx，表示服务器的差错，如服务器失效无法完成请求。包括 <strong>500 - 507</strong>、<strong>509 - 510</strong>。<br>其中，还有一个比较少见的状态码 <strong>600</strong>，它代表万维网服务器只返回了响应主体而没有返回响应头。</p>\n<h2 id=\"四-http协议中的相关称谓\"><a href=\"#四-http协议中的相关称谓\" class=\"headerlink\" title=\"(四) http协议中的相关称谓\"></a>(四) http协议中的相关称谓</h2><ul>\n<li><strong>请求头</strong>/<strong>响应头</strong>（header），即<strong>首部行</strong>。</li>\n<li><strong>http实体</strong>，即由<strong>首部行</strong>（header）以及<strong>实体主体</strong>（body）两部分组成的，不包括开始行。</li>\n</ul>\n","excerpt":"","more":"<p>&emsp;&emsp;HTTP 协议定义了浏览器（万维网客户端）怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器。从层次的角度看，HTTP 协议是面向事务的应用层协议，它是万维网上能够可靠地交换文件（包括文本/声音/图像等各种多媒体文件）的重要基础。</p>\n<h2 id=\"一-http协议的特点\"><a href=\"#一-http协议的特点\" class=\"headerlink\" title=\"(一) http协议的特点\"></a>(一) http协议的特点</h2><ul>\n<li>http是<strong>面向事务</strong>/<strong>无状态</strong>/<strong>无连接</strong>的协议</li>\n<li>http报文分请求报文和响应报文两种</li>\n<li>http的发展路线：0.9 ~ 1.0 ～ 1.1 ～ 2.0</li>\n</ul>\n<h2 id=\"二-http报文的分类\"><a href=\"#二-http报文的分类\" class=\"headerlink\" title=\"(二) http报文的分类\"></a>(二) http报文的分类</h2><h4 id=\"http报文分两类，包括请求报文以及响应报文，两种报文的格式都由三部分组成，包括开始行-首部行-实体主体-三部分。\"><a href=\"#http报文分两类，包括请求报文以及响应报文，两种报文的格式都由三部分组成，包括开始行-首部行-实体主体-三部分。\" class=\"headerlink\" title=\"http报文分两类，包括请求报文以及响应报文，两种报文的格式都由三部分组成，包括开始行/首部行/实体主体 三部分。\"></a>http报文分两类，包括<code>请求报文</code>以及<code>响应报文</code>，两种报文的格式都由三部分组成，包括<code>开始行</code>/<code>首部行</code>/<code>实体主体</code> 三部分。</h4><p>（1）<strong>请求报文</strong> 即浏览器（万维网客户端）向万维网服务器发送的报文。请求报文中的开始行也称作 <code>请求行</code>，首部行又叫做请求报文的 <code>请求头</code>，实体主体（请求主体）又叫做 <code>http实体</code>（包含首部行和实体主体两部分）的实体主体。各部分的详细格式信息如下图：<br><img src=\"/2017/04/14/HTTPprotocol/1-1.png\" alt=\"http请求报文格式\"></p>\n<p>&emsp;&emsp;例子：</p>\n<p>&emsp;&emsp;GET /562f25980001b1b106000338.jpg HTTP/1.1<br>&emsp;&emsp;Host    img.mukewang.com<br>&emsp;&emsp;User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36<br>&emsp;&emsp;Accept    image/webp,image/<em>,</em>/*;q=0.8<br>&emsp;&emsp;Referer    <a href=\"http://www.imooc.com/\">http://www.imooc.com/</a><br>&emsp;&emsp;Accept-Encoding    gzip, deflate, sdch<br>&emsp;&emsp;Accept-Language    zh-CN,zh;q=0.8</p>\n<p>（2）<strong>响应报文</strong> 即万维网服务器向浏览器（万维网客户端）发送的报文。响应报文中的开始行也称作<code>状态行</code>，首部行又叫做请求报文的 <code>响应头</code>，实体主体（响应主体）又叫做 <code>http实体</code>（包含首部行和实体主体两部分）的实体主体。各部分的详细格式信息如下图：<br><img src=\"/2017/04/14/HTTPprotocol/1-2.png\" alt=\"http响应报文格式\"></p>\n<p>&emsp;&emsp;例子：</p>\n<p>&emsp;&emsp;HTTP/1.1 200 OK<br>&emsp;&emsp;Date: Fri, 22 May 2009 06:07:21 GMT<br>&emsp;&emsp;Content-Type: text/html; charset=UTF-8<br>&emsp;&emsp;<br>&emsp;&emsp;<code>&lt;html&gt;</code><br>&emsp;&emsp;<code>&lt;head&gt;&lt;/head&gt;</code><br>&emsp;&emsp;<code>&lt;body&gt;</code><br>&emsp;&emsp;<code>&lt;!--body goes here--&gt;</code><br>&emsp;&emsp;<code>&lt;/body&gt;</code><br>&emsp;&emsp;<code>&lt;/html&gt;</code></p>\n<h2 id=\"三-http报文的状态码（响应报文产生的）\"><a href=\"#三-http报文的状态码（响应报文产生的）\" class=\"headerlink\" title=\"(三) http报文的状态码（响应报文产生的）\"></a>(三) http报文的状态码（响应报文产生的）</h2><p>http响应报文产生的状态码主要分五类，如下：<br>（1）1xx，表示通知信息的，如请求收到了或正在进行处理。包括 <strong>100 - 102</strong> 。<br>（2）2xx，表示成功，如接受或知道了。包括 <strong>200 - 207</strong> 。<br>（3）3xx，表示重定向，如要完成请求还必须采取进一步的行动。包括 <strong>300 - 307</strong> 。<br>（4）4xx，表示客户的差错，如请求中有错误的语法或不能完成。包括 <strong>400 - 418</strong> 、<strong>421 - 426</strong>、<strong>449</strong>、<strong>451</strong>。<br>（5）5xx，表示服务器的差错，如服务器失效无法完成请求。包括 <strong>500 - 507</strong>、<strong>509 - 510</strong>。<br>其中，还有一个比较少见的状态码 <strong>600</strong>，它代表万维网服务器只返回了响应主体而没有返回响应头。</p>\n<h2 id=\"四-http协议中的相关称谓\"><a href=\"#四-http协议中的相关称谓\" class=\"headerlink\" title=\"(四) http协议中的相关称谓\"></a>(四) http协议中的相关称谓</h2><ul>\n<li><strong>请求头</strong>/<strong>响应头</strong>（header），即<strong>首部行</strong>。</li>\n<li><strong>http实体</strong>，即由<strong>首部行</strong>（header）以及<strong>实体主体</strong>（body）两部分组成的，不包括开始行。</li>\n</ul>\n"},{"title":"JavaScript事件循环机制高级篇","date":"2017-04-09T11:33:07.000Z","_content":"&emsp;&emsp;在上一篇文章[JavaScript事件循环机制入门篇](http://www.whbxyr.cn/2017/04/09/EventLoop/)当中，我们对JavaScript的事件循环机制进行了初步的了解，熟悉了JavaScript的函数调用栈以及任务队列的定义和作用，并指出JavaScript的任务队列分为**宏任务(macro-task)**和**微任务(micro-task)**两种，如下：\n\n1.**macro-task**包括：script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI rendering\n\n2.**micro-task**包括：process.nextTick, Promises, Object.observe(已废弃), MutationObserver(html5新特性)\n\n&emsp;&emsp;这篇文章里，我们就以一段测试代码来感受一下JavaScript事件循环机制的“复杂过程”。测试代码如下：（依然是借鉴的别人的例子）\n```js\n(function test() {\n    setTimeout(function () {console.log(4)}, 0);\n    new Promise(function executor(resolve) {\n        console.log(1);\n        for (var i = 0; i < 10000; i++) {\n            i == 9999 && resolve();\n        }\n        console.log(2);\n    }).then(function () {\n        console.log(5);\n    });\n    console.log(3);\n})();\n```\n1.首先，script任务源先执行，全局上下文入栈。\n![1-1](EventLoopUp/1-1.png)\n2.script任务源的代码在执行时遇到setTimeout,作为一个macro-task，将其回调函数放入自己的队列之中。\n![1-2](EventLoopUp/1-2.png)\n3.script任务源的代码在执行时遇到Promise实例。Promise构造函数中的第一个参数是在当前任务直接执行不会被放入队列之中，因此此时输出 1 。\n![1-3](EventLoopUp/1-3.png)\n4.在for循环里面遇到resolve函数，函数入栈执行之后出栈，此时Promise的状态变成Fulfilled。代码接着执行遇到console.log(2),输出2。\n![1-4-1](EventLoopUp/1-4-1.png)\n![1-4-2](EventLoopUp/1-4-2.png)\n5.接着执行，代码遇到then方法，其回调函数作为micro-task入栈，进入Promise的任务队列之中。\n![1-5](EventLoopUp/1-5.png)\n6.代码接着执行，此时遇到console.log(3),输出3。\n![1-6](EventLoopUp/1-6.png)\n7.输出3之后第一个宏任务script的代码执行完毕，这时候开始开始执行所有在队列之中的micro-task。then的回调函数入栈执行完毕之后出栈，这时候输出5\n![1-7-1](EventLoopUp/1-7-1.png)\n![1-7-2](EventLoopUp/1-7-2.png)\n8.这时候所有的micro-task执行完毕，第一轮循环结束。第二轮循环从setTimeout的任务队列开始，setTimeout的回调函数入栈执行完毕之后出栈，此时输出4。\n![1-8](EventLoopUp/1-8.png)\n## 总结\n+ 任务分**宏任务**和**微任务**两种，它们（回调函数）被放入不同的任务队列中。\n\n+ 对一段代码，先执行**宏任务**中的一个任务队列，等到这个任务队列中的函数从函数调用栈中**清空**时，再执行**微任务**。\n\n+ 等到所有的**微任务**执行完毕后，再从**宏任务**中的一个任务队列开始执行。\n\n+ JavaScript事件循环机制就是按照以上3步循环执行的。\n## 提问？\n&emsp;&emsp;如果在**宏任务**或者**微任务**里面再嵌套进去一个或者多个**宏任务**或者**微任务**，事件循环机制又是怎么处理的呢？比如以下测试代码的输出情况就有三种：\n```js\nconsole.log('glob1');\nsetImmediate(function () {\n    console.log('immediate1');\n    process.nextTick(function () {\n        console.log('immediate1_nextTick');\n    });\n    new Promise(function (resolve) {\n        console.log('immediate1_promise');\n        resolve();\n    }).then(function () {\n        console.log('immediate1_then');\n    });\n    setTimeout(function () {\n    \tconsole.log('immediate1_timeout1');\n    });\n    setImmediate(function () {\n    \tconsole.log('immediate1_immediate1');\n    });\n});\nsetTimeout(function () {\n    console.log('timeout1');\n    process.nextTick(function () {\n        console.log('timeout1_nextTick');\n    });\n    new Promise(function (resolve) {\n        console.log('timeout1_promise');\n        resolve();\n    }).then(function () {\n        console.log('timeout1_then');\n    });\n    setTimeout(function () {\n    \tconsole.log('timeout1_timeout1');\n\t    process.nextTick(function () {\n\t        console.log('timeout1_timeout1_nextTick');\n\t    });\n\t    setImmediate(function () {\n\t    \tconsole.log('timeout1_setImmediate1');\n\t    });\n    });\n});\nnew Promise(function (resolve) {\n    console.log('glob1_promise');\n    resolve();\n}).then(function () {\n    console.log('glob1_then');\n});\nprocess.nextTick(function () {\n    console.log('glob1_nextTick');\n});\n```\n#### 第一种输出情况：\n```\nglob1\nglob1_promise\nglob1_nextTick\nglob1_then\ntimeout1\ntimeout1_promise\ntimeout1_nextTick\ntimeout1_then\nimmediate1\nimmediate1_promise\nimmediate1_nextTick\nimmediate1_then\ntimeout1_timeout1\ntimeout1_timeout1_nextTick\nimmediate1_immediate1\ntimeout1_setImmediate1\nimmediate1_timeout1\n```\n#### 第二种输出情况：\n```\nglob1\nglob1_promise\nglob1_nextTick\nglob1_then\ntimeout1\ntimeout1_promise\ntimeout1_nextTick\ntimeout1_then\nimmediate1\nimmediate1_promise\nimmediate1_nextTick\nimmediate1_then\nimmediate1_immediate1\ntimeout1_timeout1\nimmediate1_timeout1\ntimeout1_timeout1_nextTick\ntimeout1_setImmediate1\n```\n#### 第三种输出情况：\n```\nglob1\nglob1_promise\nglob1_nextTick\nglob1_then\ntimeout1\ntimeout1_promise\ntimeout1_nextTick\ntimeout1_then\nimmediate1\nimmediate1_promise\nimmediate1_nextTick\nimmediate1_then\ntimeout1_timeout1\nimmediate1_timeout1\ntimeout1_timeout1_nextTick\nimmediate1_immediate1\ntimeout1_setImmediate1\n```\n本人还不是特别理解这些情况，如果您了解的话，请不吝赐教！我的工作邮箱：**raywhbxyr@163.com**\n## 参考资料\n[深入浅出Javascript事件循环机制(上)](https://zhuanlan.zhihu.com/p/26229293)\n[深入浅出JavaScript事件循环机制(下)](https://zhuanlan.zhihu.com/p/26238030)\n[前端基础进阶（十二）：深入核心，详解事件循环机制](http://www.jianshu.com/p/12b9f73c5a4f)\n[JavaScript：彻底理解同步、异步和事件循环(Event Loop)](https://segmentfault.com/a/1190000004322358)","source":"_posts/EventLoopUp.md","raw":"---\ntitle: JavaScript事件循环机制高级篇\ndate: 2017-04-09 19:33:07\ncategories: [技术类-前端]\ntags: [JavaScript]\n---\n&emsp;&emsp;在上一篇文章[JavaScript事件循环机制入门篇](http://www.whbxyr.cn/2017/04/09/EventLoop/)当中，我们对JavaScript的事件循环机制进行了初步的了解，熟悉了JavaScript的函数调用栈以及任务队列的定义和作用，并指出JavaScript的任务队列分为**宏任务(macro-task)**和**微任务(micro-task)**两种，如下：\n\n1.**macro-task**包括：script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI rendering\n\n2.**micro-task**包括：process.nextTick, Promises, Object.observe(已废弃), MutationObserver(html5新特性)\n\n&emsp;&emsp;这篇文章里，我们就以一段测试代码来感受一下JavaScript事件循环机制的“复杂过程”。测试代码如下：（依然是借鉴的别人的例子）\n```js\n(function test() {\n    setTimeout(function () {console.log(4)}, 0);\n    new Promise(function executor(resolve) {\n        console.log(1);\n        for (var i = 0; i < 10000; i++) {\n            i == 9999 && resolve();\n        }\n        console.log(2);\n    }).then(function () {\n        console.log(5);\n    });\n    console.log(3);\n})();\n```\n1.首先，script任务源先执行，全局上下文入栈。\n![1-1](EventLoopUp/1-1.png)\n2.script任务源的代码在执行时遇到setTimeout,作为一个macro-task，将其回调函数放入自己的队列之中。\n![1-2](EventLoopUp/1-2.png)\n3.script任务源的代码在执行时遇到Promise实例。Promise构造函数中的第一个参数是在当前任务直接执行不会被放入队列之中，因此此时输出 1 。\n![1-3](EventLoopUp/1-3.png)\n4.在for循环里面遇到resolve函数，函数入栈执行之后出栈，此时Promise的状态变成Fulfilled。代码接着执行遇到console.log(2),输出2。\n![1-4-1](EventLoopUp/1-4-1.png)\n![1-4-2](EventLoopUp/1-4-2.png)\n5.接着执行，代码遇到then方法，其回调函数作为micro-task入栈，进入Promise的任务队列之中。\n![1-5](EventLoopUp/1-5.png)\n6.代码接着执行，此时遇到console.log(3),输出3。\n![1-6](EventLoopUp/1-6.png)\n7.输出3之后第一个宏任务script的代码执行完毕，这时候开始开始执行所有在队列之中的micro-task。then的回调函数入栈执行完毕之后出栈，这时候输出5\n![1-7-1](EventLoopUp/1-7-1.png)\n![1-7-2](EventLoopUp/1-7-2.png)\n8.这时候所有的micro-task执行完毕，第一轮循环结束。第二轮循环从setTimeout的任务队列开始，setTimeout的回调函数入栈执行完毕之后出栈，此时输出4。\n![1-8](EventLoopUp/1-8.png)\n## 总结\n+ 任务分**宏任务**和**微任务**两种，它们（回调函数）被放入不同的任务队列中。\n\n+ 对一段代码，先执行**宏任务**中的一个任务队列，等到这个任务队列中的函数从函数调用栈中**清空**时，再执行**微任务**。\n\n+ 等到所有的**微任务**执行完毕后，再从**宏任务**中的一个任务队列开始执行。\n\n+ JavaScript事件循环机制就是按照以上3步循环执行的。\n## 提问？\n&emsp;&emsp;如果在**宏任务**或者**微任务**里面再嵌套进去一个或者多个**宏任务**或者**微任务**，事件循环机制又是怎么处理的呢？比如以下测试代码的输出情况就有三种：\n```js\nconsole.log('glob1');\nsetImmediate(function () {\n    console.log('immediate1');\n    process.nextTick(function () {\n        console.log('immediate1_nextTick');\n    });\n    new Promise(function (resolve) {\n        console.log('immediate1_promise');\n        resolve();\n    }).then(function () {\n        console.log('immediate1_then');\n    });\n    setTimeout(function () {\n    \tconsole.log('immediate1_timeout1');\n    });\n    setImmediate(function () {\n    \tconsole.log('immediate1_immediate1');\n    });\n});\nsetTimeout(function () {\n    console.log('timeout1');\n    process.nextTick(function () {\n        console.log('timeout1_nextTick');\n    });\n    new Promise(function (resolve) {\n        console.log('timeout1_promise');\n        resolve();\n    }).then(function () {\n        console.log('timeout1_then');\n    });\n    setTimeout(function () {\n    \tconsole.log('timeout1_timeout1');\n\t    process.nextTick(function () {\n\t        console.log('timeout1_timeout1_nextTick');\n\t    });\n\t    setImmediate(function () {\n\t    \tconsole.log('timeout1_setImmediate1');\n\t    });\n    });\n});\nnew Promise(function (resolve) {\n    console.log('glob1_promise');\n    resolve();\n}).then(function () {\n    console.log('glob1_then');\n});\nprocess.nextTick(function () {\n    console.log('glob1_nextTick');\n});\n```\n#### 第一种输出情况：\n```\nglob1\nglob1_promise\nglob1_nextTick\nglob1_then\ntimeout1\ntimeout1_promise\ntimeout1_nextTick\ntimeout1_then\nimmediate1\nimmediate1_promise\nimmediate1_nextTick\nimmediate1_then\ntimeout1_timeout1\ntimeout1_timeout1_nextTick\nimmediate1_immediate1\ntimeout1_setImmediate1\nimmediate1_timeout1\n```\n#### 第二种输出情况：\n```\nglob1\nglob1_promise\nglob1_nextTick\nglob1_then\ntimeout1\ntimeout1_promise\ntimeout1_nextTick\ntimeout1_then\nimmediate1\nimmediate1_promise\nimmediate1_nextTick\nimmediate1_then\nimmediate1_immediate1\ntimeout1_timeout1\nimmediate1_timeout1\ntimeout1_timeout1_nextTick\ntimeout1_setImmediate1\n```\n#### 第三种输出情况：\n```\nglob1\nglob1_promise\nglob1_nextTick\nglob1_then\ntimeout1\ntimeout1_promise\ntimeout1_nextTick\ntimeout1_then\nimmediate1\nimmediate1_promise\nimmediate1_nextTick\nimmediate1_then\ntimeout1_timeout1\nimmediate1_timeout1\ntimeout1_timeout1_nextTick\nimmediate1_immediate1\ntimeout1_setImmediate1\n```\n本人还不是特别理解这些情况，如果您了解的话，请不吝赐教！我的工作邮箱：**raywhbxyr@163.com**\n## 参考资料\n[深入浅出Javascript事件循环机制(上)](https://zhuanlan.zhihu.com/p/26229293)\n[深入浅出JavaScript事件循环机制(下)](https://zhuanlan.zhihu.com/p/26238030)\n[前端基础进阶（十二）：深入核心，详解事件循环机制](http://www.jianshu.com/p/12b9f73c5a4f)\n[JavaScript：彻底理解同步、异步和事件循环(Event Loop)](https://segmentfault.com/a/1190000004322358)","slug":"EventLoopUp","published":1,"updated":"2017-04-19T14:32:40.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d303290009imw47ea3is83","content":"<p>&emsp;&emsp;在上一篇文章<a href=\"http://www.whbxyr.cn/2017/04/09/EventLoop/\">JavaScript事件循环机制入门篇</a>当中，我们对JavaScript的事件循环机制进行了初步的了解，熟悉了JavaScript的函数调用栈以及任务队列的定义和作用，并指出JavaScript的任务队列分为<strong>宏任务(macro-task)</strong>和<strong>微任务(micro-task)</strong>两种，如下：</p>\n<p>1.<strong>macro-task</strong>包括：script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI rendering</p>\n<p>2.<strong>micro-task</strong>包括：process.nextTick, Promises, Object.observe(已废弃), MutationObserver(html5新特性)</p>\n<p>&emsp;&emsp;这篇文章里，我们就以一段测试代码来感受一下JavaScript事件循环机制的“复杂过程”。测试代码如下：（依然是借鉴的别人的例子）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)&#125;, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</div><div class=\"line\">            i == <span class=\"number\">9999</span> &amp;&amp; resolve();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>1.首先，script任务源先执行，全局上下文入栈。<br><img src=\"/2017/04/09/EventLoopUp/1-1.png\" alt=\"1-1\"><br>2.script任务源的代码在执行时遇到setTimeout,作为一个macro-task，将其回调函数放入自己的队列之中。<br><img src=\"/2017/04/09/EventLoopUp/1-2.png\" alt=\"1-2\"><br>3.script任务源的代码在执行时遇到Promise实例。Promise构造函数中的第一个参数是在当前任务直接执行不会被放入队列之中，因此此时输出 1 。<br><img src=\"/2017/04/09/EventLoopUp/1-3.png\" alt=\"1-3\"><br>4.在for循环里面遇到resolve函数，函数入栈执行之后出栈，此时Promise的状态变成Fulfilled。代码接着执行遇到console.log(2),输出2。<br><img src=\"/2017/04/09/EventLoopUp/1-4-1.png\" alt=\"1-4-1\"><br><img src=\"/2017/04/09/EventLoopUp/1-4-2.png\" alt=\"1-4-2\"><br>5.接着执行，代码遇到then方法，其回调函数作为micro-task入栈，进入Promise的任务队列之中。<br><img src=\"/2017/04/09/EventLoopUp/1-5.png\" alt=\"1-5\"><br>6.代码接着执行，此时遇到console.log(3),输出3。<br><img src=\"/2017/04/09/EventLoopUp/1-6.png\" alt=\"1-6\"><br>7.输出3之后第一个宏任务script的代码执行完毕，这时候开始开始执行所有在队列之中的micro-task。then的回调函数入栈执行完毕之后出栈，这时候输出5<br><img src=\"/2017/04/09/EventLoopUp/1-7-1.png\" alt=\"1-7-1\"><br><img src=\"/2017/04/09/EventLoopUp/1-7-2.png\" alt=\"1-7-2\"><br>8.这时候所有的micro-task执行完毕，第一轮循环结束。第二轮循环从setTimeout的任务队列开始，setTimeout的回调函数入栈执行完毕之后出栈，此时输出4。<br><img src=\"/2017/04/09/EventLoopUp/1-8.png\" alt=\"1-8\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>任务分<strong>宏任务</strong>和<strong>微任务</strong>两种，它们（回调函数）被放入不同的任务队列中。</p>\n</li>\n<li><p>对一段代码，先执行<strong>宏任务</strong>中的一个任务队列，等到这个任务队列中的函数从函数调用栈中<strong>清空</strong>时，再执行<strong>微任务</strong>。</p>\n</li>\n<li><p>等到所有的<strong>微任务</strong>执行完毕后，再从<strong>宏任务</strong>中的一个任务队列开始执行。</p>\n</li>\n<li><p>JavaScript事件循环机制就是按照以上3步循环执行的。</p>\n<h2 id=\"提问？\"><a href=\"#提问？\" class=\"headerlink\" title=\"提问？\"></a>提问？</h2><p>&emsp;&emsp;如果在<strong>宏任务</strong>或者<strong>微任务</strong>里面再嵌套进去一个或者多个<strong>宏任务</strong>或者<strong>微任务</strong>，事件循环机制又是怎么处理的呢？比如以下测试代码的输出情况就有三种：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'glob1'</span>);</div><div class=\"line\">setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate1'</span>);</div><div class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate1_nextTick'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate1_promise'</span>);</div><div class=\"line\">        resolve();</div><div class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate1_then'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate1_timeout1'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate1_immediate1'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1'</span>);</div><div class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1_nextTick'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1_promise'</span>);</div><div class=\"line\">        resolve();</div><div class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1_then'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1_timeout1'</span>);</div><div class=\"line\">\t    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t        <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1_timeout1_nextTick'</span>);</div><div class=\"line\">\t    &#125;);</div><div class=\"line\">\t    setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1_setImmediate1'</span>);</div><div class=\"line\">\t    &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'glob1_promise'</span>);</div><div class=\"line\">    resolve();</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'glob1_then'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'glob1_nextTick'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"第一种输出情况：\"><a href=\"#第一种输出情况：\" class=\"headerlink\" title=\"第一种输出情况：\"></a>第一种输出情况：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">glob1</div><div class=\"line\">glob1_promise</div><div class=\"line\">glob1_nextTick</div><div class=\"line\">glob1_then</div><div class=\"line\">timeout1</div><div class=\"line\">timeout1_promise</div><div class=\"line\">timeout1_nextTick</div><div class=\"line\">timeout1_then</div><div class=\"line\">immediate1</div><div class=\"line\">immediate1_promise</div><div class=\"line\">immediate1_nextTick</div><div class=\"line\">immediate1_then</div><div class=\"line\">timeout1_timeout1</div><div class=\"line\">timeout1_timeout1_nextTick</div><div class=\"line\">immediate1_immediate1</div><div class=\"line\">timeout1_setImmediate1</div><div class=\"line\">immediate1_timeout1</div></pre></td></tr></table></figure>\n<h4 id=\"第二种输出情况：\"><a href=\"#第二种输出情况：\" class=\"headerlink\" title=\"第二种输出情况：\"></a>第二种输出情况：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">glob1</div><div class=\"line\">glob1_promise</div><div class=\"line\">glob1_nextTick</div><div class=\"line\">glob1_then</div><div class=\"line\">timeout1</div><div class=\"line\">timeout1_promise</div><div class=\"line\">timeout1_nextTick</div><div class=\"line\">timeout1_then</div><div class=\"line\">immediate1</div><div class=\"line\">immediate1_promise</div><div class=\"line\">immediate1_nextTick</div><div class=\"line\">immediate1_then</div><div class=\"line\">immediate1_immediate1</div><div class=\"line\">timeout1_timeout1</div><div class=\"line\">immediate1_timeout1</div><div class=\"line\">timeout1_timeout1_nextTick</div><div class=\"line\">timeout1_setImmediate1</div></pre></td></tr></table></figure>\n<h4 id=\"第三种输出情况：\"><a href=\"#第三种输出情况：\" class=\"headerlink\" title=\"第三种输出情况：\"></a>第三种输出情况：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">glob1</div><div class=\"line\">glob1_promise</div><div class=\"line\">glob1_nextTick</div><div class=\"line\">glob1_then</div><div class=\"line\">timeout1</div><div class=\"line\">timeout1_promise</div><div class=\"line\">timeout1_nextTick</div><div class=\"line\">timeout1_then</div><div class=\"line\">immediate1</div><div class=\"line\">immediate1_promise</div><div class=\"line\">immediate1_nextTick</div><div class=\"line\">immediate1_then</div><div class=\"line\">timeout1_timeout1</div><div class=\"line\">immediate1_timeout1</div><div class=\"line\">timeout1_timeout1_nextTick</div><div class=\"line\">immediate1_immediate1</div><div class=\"line\">timeout1_setImmediate1</div></pre></td></tr></table></figure>\n<p>本人还不是特别理解这些情况，如果您了解的话，请不吝赐教！我的工作邮箱：<strong>raywhbxyr@163.com</strong></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://zhuanlan.zhihu.com/p/26229293\" target=\"_blank\" rel=\"external\">深入浅出Javascript事件循环机制(上)</a><br><a href=\"https://zhuanlan.zhihu.com/p/26238030\" target=\"_blank\" rel=\"external\">深入浅出JavaScript事件循环机制(下)</a><br><a href=\"http://www.jianshu.com/p/12b9f73c5a4f\" target=\"_blank\" rel=\"external\">前端基础进阶（十二）：深入核心，详解事件循环机制</a><br><a href=\"https://segmentfault.com/a/1190000004322358\" target=\"_blank\" rel=\"external\">JavaScript：彻底理解同步、异步和事件循环(Event Loop)</a></p>\n","excerpt":"","more":"<p>&emsp;&emsp;在上一篇文章<a href=\"http://www.whbxyr.cn/2017/04/09/EventLoop/\">JavaScript事件循环机制入门篇</a>当中，我们对JavaScript的事件循环机制进行了初步的了解，熟悉了JavaScript的函数调用栈以及任务队列的定义和作用，并指出JavaScript的任务队列分为<strong>宏任务(macro-task)</strong>和<strong>微任务(micro-task)</strong>两种，如下：</p>\n<p>1.<strong>macro-task</strong>包括：script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI rendering</p>\n<p>2.<strong>micro-task</strong>包括：process.nextTick, Promises, Object.observe(已废弃), MutationObserver(html5新特性)</p>\n<p>&emsp;&emsp;这篇文章里，我们就以一段测试代码来感受一下JavaScript事件循环机制的“复杂过程”。测试代码如下：（依然是借鉴的别人的例子）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)&#125;, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</div><div class=\"line\">            i == <span class=\"number\">9999</span> &amp;&amp; resolve();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>1.首先，script任务源先执行，全局上下文入栈。<br><img src=\"/2017/04/09/EventLoopUp/1-1.png\" alt=\"1-1\"><br>2.script任务源的代码在执行时遇到setTimeout,作为一个macro-task，将其回调函数放入自己的队列之中。<br><img src=\"/2017/04/09/EventLoopUp/1-2.png\" alt=\"1-2\"><br>3.script任务源的代码在执行时遇到Promise实例。Promise构造函数中的第一个参数是在当前任务直接执行不会被放入队列之中，因此此时输出 1 。<br><img src=\"/2017/04/09/EventLoopUp/1-3.png\" alt=\"1-3\"><br>4.在for循环里面遇到resolve函数，函数入栈执行之后出栈，此时Promise的状态变成Fulfilled。代码接着执行遇到console.log(2),输出2。<br><img src=\"/2017/04/09/EventLoopUp/1-4-1.png\" alt=\"1-4-1\"><br><img src=\"/2017/04/09/EventLoopUp/1-4-2.png\" alt=\"1-4-2\"><br>5.接着执行，代码遇到then方法，其回调函数作为micro-task入栈，进入Promise的任务队列之中。<br><img src=\"/2017/04/09/EventLoopUp/1-5.png\" alt=\"1-5\"><br>6.代码接着执行，此时遇到console.log(3),输出3。<br><img src=\"/2017/04/09/EventLoopUp/1-6.png\" alt=\"1-6\"><br>7.输出3之后第一个宏任务script的代码执行完毕，这时候开始开始执行所有在队列之中的micro-task。then的回调函数入栈执行完毕之后出栈，这时候输出5<br><img src=\"/2017/04/09/EventLoopUp/1-7-1.png\" alt=\"1-7-1\"><br><img src=\"/2017/04/09/EventLoopUp/1-7-2.png\" alt=\"1-7-2\"><br>8.这时候所有的micro-task执行完毕，第一轮循环结束。第二轮循环从setTimeout的任务队列开始，setTimeout的回调函数入栈执行完毕之后出栈，此时输出4。<br><img src=\"/2017/04/09/EventLoopUp/1-8.png\" alt=\"1-8\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>任务分<strong>宏任务</strong>和<strong>微任务</strong>两种，它们（回调函数）被放入不同的任务队列中。</p>\n</li>\n<li><p>对一段代码，先执行<strong>宏任务</strong>中的一个任务队列，等到这个任务队列中的函数从函数调用栈中<strong>清空</strong>时，再执行<strong>微任务</strong>。</p>\n</li>\n<li><p>等到所有的<strong>微任务</strong>执行完毕后，再从<strong>宏任务</strong>中的一个任务队列开始执行。</p>\n</li>\n<li><p>JavaScript事件循环机制就是按照以上3步循环执行的。</p>\n<h2 id=\"提问？\"><a href=\"#提问？\" class=\"headerlink\" title=\"提问？\"></a>提问？</h2><p>&emsp;&emsp;如果在<strong>宏任务</strong>或者<strong>微任务</strong>里面再嵌套进去一个或者多个<strong>宏任务</strong>或者<strong>微任务</strong>，事件循环机制又是怎么处理的呢？比如以下测试代码的输出情况就有三种：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'glob1'</span>);</div><div class=\"line\">setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate1'</span>);</div><div class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate1_nextTick'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate1_promise'</span>);</div><div class=\"line\">        resolve();</div><div class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate1_then'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate1_timeout1'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate1_immediate1'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1'</span>);</div><div class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1_nextTick'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1_promise'</span>);</div><div class=\"line\">        resolve();</div><div class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1_then'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1_timeout1'</span>);</div><div class=\"line\">\t    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t        <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1_timeout1_nextTick'</span>);</div><div class=\"line\">\t    &#125;);</div><div class=\"line\">\t    setImmediate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout1_setImmediate1'</span>);</div><div class=\"line\">\t    &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'glob1_promise'</span>);</div><div class=\"line\">    resolve();</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'glob1_then'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'glob1_nextTick'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"第一种输出情况：\"><a href=\"#第一种输出情况：\" class=\"headerlink\" title=\"第一种输出情况：\"></a>第一种输出情况：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">glob1</div><div class=\"line\">glob1_promise</div><div class=\"line\">glob1_nextTick</div><div class=\"line\">glob1_then</div><div class=\"line\">timeout1</div><div class=\"line\">timeout1_promise</div><div class=\"line\">timeout1_nextTick</div><div class=\"line\">timeout1_then</div><div class=\"line\">immediate1</div><div class=\"line\">immediate1_promise</div><div class=\"line\">immediate1_nextTick</div><div class=\"line\">immediate1_then</div><div class=\"line\">timeout1_timeout1</div><div class=\"line\">timeout1_timeout1_nextTick</div><div class=\"line\">immediate1_immediate1</div><div class=\"line\">timeout1_setImmediate1</div><div class=\"line\">immediate1_timeout1</div></pre></td></tr></table></figure>\n<h4 id=\"第二种输出情况：\"><a href=\"#第二种输出情况：\" class=\"headerlink\" title=\"第二种输出情况：\"></a>第二种输出情况：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">glob1</div><div class=\"line\">glob1_promise</div><div class=\"line\">glob1_nextTick</div><div class=\"line\">glob1_then</div><div class=\"line\">timeout1</div><div class=\"line\">timeout1_promise</div><div class=\"line\">timeout1_nextTick</div><div class=\"line\">timeout1_then</div><div class=\"line\">immediate1</div><div class=\"line\">immediate1_promise</div><div class=\"line\">immediate1_nextTick</div><div class=\"line\">immediate1_then</div><div class=\"line\">immediate1_immediate1</div><div class=\"line\">timeout1_timeout1</div><div class=\"line\">immediate1_timeout1</div><div class=\"line\">timeout1_timeout1_nextTick</div><div class=\"line\">timeout1_setImmediate1</div></pre></td></tr></table></figure>\n<h4 id=\"第三种输出情况：\"><a href=\"#第三种输出情况：\" class=\"headerlink\" title=\"第三种输出情况：\"></a>第三种输出情况：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">glob1</div><div class=\"line\">glob1_promise</div><div class=\"line\">glob1_nextTick</div><div class=\"line\">glob1_then</div><div class=\"line\">timeout1</div><div class=\"line\">timeout1_promise</div><div class=\"line\">timeout1_nextTick</div><div class=\"line\">timeout1_then</div><div class=\"line\">immediate1</div><div class=\"line\">immediate1_promise</div><div class=\"line\">immediate1_nextTick</div><div class=\"line\">immediate1_then</div><div class=\"line\">timeout1_timeout1</div><div class=\"line\">immediate1_timeout1</div><div class=\"line\">timeout1_timeout1_nextTick</div><div class=\"line\">immediate1_immediate1</div><div class=\"line\">timeout1_setImmediate1</div></pre></td></tr></table></figure>\n<p>本人还不是特别理解这些情况，如果您了解的话，请不吝赐教！我的工作邮箱：<strong>raywhbxyr@163.com</strong></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://zhuanlan.zhihu.com/p/26229293\">深入浅出Javascript事件循环机制(上)</a><br><a href=\"https://zhuanlan.zhihu.com/p/26238030\">深入浅出JavaScript事件循环机制(下)</a><br><a href=\"http://www.jianshu.com/p/12b9f73c5a4f\">前端基础进阶（十二）：深入核心，详解事件循环机制</a><br><a href=\"https://segmentfault.com/a/1190000004322358\">JavaScript：彻底理解同步、异步和事件循环(Event Loop)</a></p>\n"},{"title":"ajax 的兼容使用方法","date":"2015-04-18T05:45:07.000Z","_content":"## <font color=\"#f00\">简介</font>\n&emsp;&emsp;Ajax技术的核心是XMLHttpRequest对象（简称XHR对象），这是由微软首先引入的一个特性。Ajax是对`Asynchronous JavaScript + XML`的简写，但Ajax通信与数据格式无关，这种技术是无须刷新页面即可从服务器取得数据，但不一定是XML数据。\n\n&emsp;&emsp;IE5是第一款引入`XHR`对象的浏览器。在IE5中，`XHR`对象是通过MSXML库中的一个ActiveX对象实现的。因此，在IE中可能会遇到三种不同版本的XHR对象，即`MSXML2.XMLHttp`、`MSXML2.XMLHttp.3.0`、`MSXML2.XMLHttp.6.0`。因此，为了兼容浏览器**IE 6-**，必须写一个函数去根据IE中可用的MSXML库的情况创建最新版本的XHR对象。\n\n&emsp;&emsp;而 IE 7+、Firefox、Opera、Chrome 和 Safari 都支持原生的XHR对象，在这些浏览器中创建XHR对象要像下面这样使用`XMLHttpRequest`构造函数。\n```javascript\nvar xhr = new XMLHttpRequest();\n```\n## <font color=\"#f00\">兼容函数`createXHR`</font>\n```javascript\nfunction createXHR() {\n    if (typeof XMLHttpRequest !== 'undefined') {\n        return new XMLHttpRequst();\n    }\n    else if (typeof ActiveXObject !== 'undefined') {\n        if (typeof arguments.callee.activeXString !== 'string'){\n            var versions = ['MSXML2.XMLHttp', 'MSXML2.XMLHttp.3.0', 'MSXML2.XMLHttp.6.0'];\n            var i, len;\n            for (var i = 0, len = versions.length; i < len; i++) {\n                try {\n                    new ActiveXObject(versions[i]);\n                    arguments.callee.activeXString = versions[i];\n                    break;\n                }\n                catch (ex) {\n                    // 跳过\n                }\n            }\n        }\n        return new ActiveXObject(arguments.callee.activeXObject);\n    }\n    else {\n        throw new Error('No XHR object available');\n    }\n}\n```\n&emsp;&emsp;这个函数首先检测原生XHR对象是否存在，如果它存在则返回它的新实例，否则检测ActiveXObject对象。如果这两种对象都不存在，就抛出一个错误。然后，就可以使用下面的代码在所有的浏览器中创建`XHR`对象了。\n```javascript\nvar xhr = createXHR();\n```\n## <font color=\"#f00\">XHR的具体使用方法</font>\n&emsp;&emsp;XHR对象的通用使用方法如下：\n```javascript\nvar xhr = createXHR();\n// 异步的ajax请求可以检测XHR对象的readyState属性，该属性表示请求/响应过程的当前活动阶段\n// 0：未初始化。刚创建XHR对象，尚未调用open()方法\n// 1：启动。已经调用open()方法，但尚未调用send()方法\n// 2：发送。已经调用send()方法，但尚未接收到响应\n// 3：接收。已经接收到部分响应数据\n// 4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了\nxhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n        if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304) {\n            // 服务器响应的数据会自动填充XHR对象的属性，相关的属性如下：\n            // responseText：作为响应主体被返回的文本\n            // responseXMl：如果响应的内容类型是“text/xml”或“application/xml”，这个属性中将保存包含着响应数据的 XML DOM 文档\n            // status：响应的 HTTP 状态\n            // statusText：HTTP 状态的说明\n            alert(xhr.responseText);\n            // 调用getResponseHeader()或者getAllResponseHeaders()可以取得相应的响应头部信息\n            var myHeader = xhr.getResponseHeader('MyHeader');\n            var allHeaders = xhr.getAllResponseHeaders();\n        }\n        else {\n            alert('Request was unsuccessful: ' + xhr.status);\n        }\n    }\n};\n// 查询字符串中每个参数的键和值都必须使用encodeURIComponent()进行编码才追加到URL末尾\nfunction addURLParam(url, name, value) {\n    url += (url.indexOf('?') === -1 ? '?' : '&');\n    url += encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    return url;\n}\nvar url = 'example.php';\n// 添加参数\nurl = addURLParam(url, 'name', 'Ray');\nurl = addURLParam(url, 'book', 'Green Story');\n// 第一个参数可为“get”、“post”等\n// 第三个参数为true表示ajax请求为异步的，否则为同步的\nxhr.open('get', url, true);\n// 若要调用setRequestHeader()方法，必须在open()之后，send()之前\nxhr.setRequestHeader('MyHeader', 'MyValue');\nxhr.send(null);\n// 在接收到响应之前还可以调用abort()方法取消异步请求\n// xhr.abort();\n\n// 以上使用的是get的提交方式，以下以一个post提交方式的ajax请求来模拟表单提交\nxhr.open('post', 'postexample.php', true);\n// 使用post提交方式必须声明这个头部，表示表单提交时的内容类型\nxhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\nvar form = document.getElementById('user-info');\n// 序列化页面中的“表单数据”并发送\nxhr.send(serialize(form));\n```\n## 总结\n+ 负责Ajax运作的核心对象是XMLHttpRequest（XHR）对象。\n+ XHR对象由微软最早在IE5中引入，用于通过JavaScript从服务器取得XML数据。\n+ 在此之后，Firefox、Safari、Chrome 和 Opera都是实现了相同的特性，使XHR成为了Web的一个事实标准。\n+ 虽然实现之间存在差异，但XHR对象的基本使用方法在不同浏览器间还是相对规范的，因此可以放心地用在Web开发当中。","source":"_posts/ajax.md","raw":"---\ntitle: ajax 的兼容使用方法\ndate: 2015-04-18 13:45:07\ncategories: [技术类-前端]\ntags: [ajax, JavaScript]\n---\n## <font color=\"#f00\">简介</font>\n&emsp;&emsp;Ajax技术的核心是XMLHttpRequest对象（简称XHR对象），这是由微软首先引入的一个特性。Ajax是对`Asynchronous JavaScript + XML`的简写，但Ajax通信与数据格式无关，这种技术是无须刷新页面即可从服务器取得数据，但不一定是XML数据。\n\n&emsp;&emsp;IE5是第一款引入`XHR`对象的浏览器。在IE5中，`XHR`对象是通过MSXML库中的一个ActiveX对象实现的。因此，在IE中可能会遇到三种不同版本的XHR对象，即`MSXML2.XMLHttp`、`MSXML2.XMLHttp.3.0`、`MSXML2.XMLHttp.6.0`。因此，为了兼容浏览器**IE 6-**，必须写一个函数去根据IE中可用的MSXML库的情况创建最新版本的XHR对象。\n\n&emsp;&emsp;而 IE 7+、Firefox、Opera、Chrome 和 Safari 都支持原生的XHR对象，在这些浏览器中创建XHR对象要像下面这样使用`XMLHttpRequest`构造函数。\n```javascript\nvar xhr = new XMLHttpRequest();\n```\n## <font color=\"#f00\">兼容函数`createXHR`</font>\n```javascript\nfunction createXHR() {\n    if (typeof XMLHttpRequest !== 'undefined') {\n        return new XMLHttpRequst();\n    }\n    else if (typeof ActiveXObject !== 'undefined') {\n        if (typeof arguments.callee.activeXString !== 'string'){\n            var versions = ['MSXML2.XMLHttp', 'MSXML2.XMLHttp.3.0', 'MSXML2.XMLHttp.6.0'];\n            var i, len;\n            for (var i = 0, len = versions.length; i < len; i++) {\n                try {\n                    new ActiveXObject(versions[i]);\n                    arguments.callee.activeXString = versions[i];\n                    break;\n                }\n                catch (ex) {\n                    // 跳过\n                }\n            }\n        }\n        return new ActiveXObject(arguments.callee.activeXObject);\n    }\n    else {\n        throw new Error('No XHR object available');\n    }\n}\n```\n&emsp;&emsp;这个函数首先检测原生XHR对象是否存在，如果它存在则返回它的新实例，否则检测ActiveXObject对象。如果这两种对象都不存在，就抛出一个错误。然后，就可以使用下面的代码在所有的浏览器中创建`XHR`对象了。\n```javascript\nvar xhr = createXHR();\n```\n## <font color=\"#f00\">XHR的具体使用方法</font>\n&emsp;&emsp;XHR对象的通用使用方法如下：\n```javascript\nvar xhr = createXHR();\n// 异步的ajax请求可以检测XHR对象的readyState属性，该属性表示请求/响应过程的当前活动阶段\n// 0：未初始化。刚创建XHR对象，尚未调用open()方法\n// 1：启动。已经调用open()方法，但尚未调用send()方法\n// 2：发送。已经调用send()方法，但尚未接收到响应\n// 3：接收。已经接收到部分响应数据\n// 4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了\nxhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n        if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304) {\n            // 服务器响应的数据会自动填充XHR对象的属性，相关的属性如下：\n            // responseText：作为响应主体被返回的文本\n            // responseXMl：如果响应的内容类型是“text/xml”或“application/xml”，这个属性中将保存包含着响应数据的 XML DOM 文档\n            // status：响应的 HTTP 状态\n            // statusText：HTTP 状态的说明\n            alert(xhr.responseText);\n            // 调用getResponseHeader()或者getAllResponseHeaders()可以取得相应的响应头部信息\n            var myHeader = xhr.getResponseHeader('MyHeader');\n            var allHeaders = xhr.getAllResponseHeaders();\n        }\n        else {\n            alert('Request was unsuccessful: ' + xhr.status);\n        }\n    }\n};\n// 查询字符串中每个参数的键和值都必须使用encodeURIComponent()进行编码才追加到URL末尾\nfunction addURLParam(url, name, value) {\n    url += (url.indexOf('?') === -1 ? '?' : '&');\n    url += encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    return url;\n}\nvar url = 'example.php';\n// 添加参数\nurl = addURLParam(url, 'name', 'Ray');\nurl = addURLParam(url, 'book', 'Green Story');\n// 第一个参数可为“get”、“post”等\n// 第三个参数为true表示ajax请求为异步的，否则为同步的\nxhr.open('get', url, true);\n// 若要调用setRequestHeader()方法，必须在open()之后，send()之前\nxhr.setRequestHeader('MyHeader', 'MyValue');\nxhr.send(null);\n// 在接收到响应之前还可以调用abort()方法取消异步请求\n// xhr.abort();\n\n// 以上使用的是get的提交方式，以下以一个post提交方式的ajax请求来模拟表单提交\nxhr.open('post', 'postexample.php', true);\n// 使用post提交方式必须声明这个头部，表示表单提交时的内容类型\nxhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\nvar form = document.getElementById('user-info');\n// 序列化页面中的“表单数据”并发送\nxhr.send(serialize(form));\n```\n## 总结\n+ 负责Ajax运作的核心对象是XMLHttpRequest（XHR）对象。\n+ XHR对象由微软最早在IE5中引入，用于通过JavaScript从服务器取得XML数据。\n+ 在此之后，Firefox、Safari、Chrome 和 Opera都是实现了相同的特性，使XHR成为了Web的一个事实标准。\n+ 虽然实现之间存在差异，但XHR对象的基本使用方法在不同浏览器间还是相对规范的，因此可以放心地用在Web开发当中。","slug":"ajax","published":1,"updated":"2017-04-25T14:47:43.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3032f000cimw4krfra8bw","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a><font color=\"#f00\">简介</font></h2><p>&emsp;&emsp;Ajax技术的核心是XMLHttpRequest对象（简称XHR对象），这是由微软首先引入的一个特性。Ajax是对<code>Asynchronous JavaScript + XML</code>的简写，但Ajax通信与数据格式无关，这种技术是无须刷新页面即可从服务器取得数据，但不一定是XML数据。</p>\n<p>&emsp;&emsp;IE5是第一款引入<code>XHR</code>对象的浏览器。在IE5中，<code>XHR</code>对象是通过MSXML库中的一个ActiveX对象实现的。因此，在IE中可能会遇到三种不同版本的XHR对象，即<code>MSXML2.XMLHttp</code>、<code>MSXML2.XMLHttp.3.0</code>、<code>MSXML2.XMLHttp.6.0</code>。因此，为了兼容浏览器<strong>IE 6-</strong>，必须写一个函数去根据IE中可用的MSXML库的情况创建最新版本的XHR对象。</p>\n<p>&emsp;&emsp;而 IE 7+、Firefox、Opera、Chrome 和 Safari 都支持原生的XHR对象，在这些浏览器中创建XHR对象要像下面这样使用<code>XMLHttpRequest</code>构造函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div></pre></td></tr></table></figure></p>\n<h2 id=\"兼容函数createXHR\"><a href=\"#兼容函数createXHR\" class=\"headerlink\" title=\"兼容函数createXHR\"></a><font color=\"#f00\">兼容函数<code>createXHR</code></font></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createXHR</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> XMLHttpRequest !== <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> XMLHttpRequst();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> ActiveXObject !== <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">arguments</span>.callee.activeXString !== <span class=\"string\">'string'</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> versions = [<span class=\"string\">'MSXML2.XMLHttp'</span>, <span class=\"string\">'MSXML2.XMLHttp.3.0'</span>, <span class=\"string\">'MSXML2.XMLHttp.6.0'</span>];</div><div class=\"line\">            <span class=\"keyword\">var</span> i, len;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = versions.length; i &lt; len; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">new</span> ActiveXObject(versions[i]);</div><div class=\"line\">                    <span class=\"built_in\">arguments</span>.callee.activeXString = versions[i];</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">catch</span> (ex) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 跳过</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActiveXObject(<span class=\"built_in\">arguments</span>.callee.activeXObject);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'No XHR object available'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个函数首先检测原生XHR对象是否存在，如果它存在则返回它的新实例，否则检测ActiveXObject对象。如果这两种对象都不存在，就抛出一个错误。然后，就可以使用下面的代码在所有的浏览器中创建<code>XHR</code>对象了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = createXHR();</div></pre></td></tr></table></figure></p>\n<h2 id=\"XHR的具体使用方法\"><a href=\"#XHR的具体使用方法\" class=\"headerlink\" title=\"XHR的具体使用方法\"></a><font color=\"#f00\">XHR的具体使用方法</font></h2><p>&emsp;&emsp;XHR对象的通用使用方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = createXHR();</div><div class=\"line\"><span class=\"comment\">// 异步的ajax请求可以检测XHR对象的readyState属性，该属性表示请求/响应过程的当前活动阶段</span></div><div class=\"line\"><span class=\"comment\">// 0：未初始化。刚创建XHR对象，尚未调用open()方法</span></div><div class=\"line\"><span class=\"comment\">// 1：启动。已经调用open()方法，但尚未调用send()方法</span></div><div class=\"line\"><span class=\"comment\">// 2：发送。已经调用send()方法，但尚未接收到响应</span></div><div class=\"line\"><span class=\"comment\">// 3：接收。已经接收到部分响应数据</span></div><div class=\"line\"><span class=\"comment\">// 4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了</span></div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>) || xhr.status === <span class=\"number\">304</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 服务器响应的数据会自动填充XHR对象的属性，相关的属性如下：</span></div><div class=\"line\">            <span class=\"comment\">// responseText：作为响应主体被返回的文本</span></div><div class=\"line\">            <span class=\"comment\">// responseXMl：如果响应的内容类型是“text/xml”或“application/xml”，这个属性中将保存包含着响应数据的 XML DOM 文档</span></div><div class=\"line\">            <span class=\"comment\">// status：响应的 HTTP 状态</span></div><div class=\"line\">            <span class=\"comment\">// statusText：HTTP 状态的说明</span></div><div class=\"line\">            alert(xhr.responseText);</div><div class=\"line\">            <span class=\"comment\">// 调用getResponseHeader()或者getAllResponseHeaders()可以取得相应的响应头部信息</span></div><div class=\"line\">            <span class=\"keyword\">var</span> myHeader = xhr.getResponseHeader(<span class=\"string\">'MyHeader'</span>);</div><div class=\"line\">            <span class=\"keyword\">var</span> allHeaders = xhr.getAllResponseHeaders();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            alert(<span class=\"string\">'Request was unsuccessful: '</span> + xhr.status);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 查询字符串中每个参数的键和值都必须使用encodeURIComponent()进行编码才追加到URL末尾</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addURLParam</span>(<span class=\"params\">url, name, value</span>) </span>&#123;</div><div class=\"line\">    url += (url.indexOf(<span class=\"string\">'?'</span>) === <span class=\"number\">-1</span> ? <span class=\"string\">'?'</span> : <span class=\"string\">'&amp;'</span>);</div><div class=\"line\">    url += <span class=\"built_in\">encodeURIComponent</span>(name) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(value);</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'example.php'</span>;</div><div class=\"line\"><span class=\"comment\">// 添加参数</span></div><div class=\"line\">url = addURLParam(url, <span class=\"string\">'name'</span>, <span class=\"string\">'Ray'</span>);</div><div class=\"line\">url = addURLParam(url, <span class=\"string\">'book'</span>, <span class=\"string\">'Green Story'</span>);</div><div class=\"line\"><span class=\"comment\">// 第一个参数可为“get”、“post”等</span></div><div class=\"line\"><span class=\"comment\">// 第三个参数为true表示ajax请求为异步的，否则为同步的</span></div><div class=\"line\">xhr.open(<span class=\"string\">'get'</span>, url, <span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"comment\">// 若要调用setRequestHeader()方法，必须在open()之后，send()之前</span></div><div class=\"line\">xhr.setRequestHeader(<span class=\"string\">'MyHeader'</span>, <span class=\"string\">'MyValue'</span>);</div><div class=\"line\">xhr.send(<span class=\"literal\">null</span>);</div><div class=\"line\"><span class=\"comment\">// 在接收到响应之前还可以调用abort()方法取消异步请求</span></div><div class=\"line\"><span class=\"comment\">// xhr.abort();</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 以上使用的是get的提交方式，以下以一个post提交方式的ajax请求来模拟表单提交</span></div><div class=\"line\">xhr.open(<span class=\"string\">'post'</span>, <span class=\"string\">'postexample.php'</span>, <span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"comment\">// 使用post提交方式必须声明这个头部，表示表单提交时的内容类型</span></div><div class=\"line\">xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'user-info'</span>);</div><div class=\"line\"><span class=\"comment\">// 序列化页面中的“表单数据”并发送</span></div><div class=\"line\">xhr.send(serialize(form));</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>负责Ajax运作的核心对象是XMLHttpRequest（XHR）对象。</li>\n<li>XHR对象由微软最早在IE5中引入，用于通过JavaScript从服务器取得XML数据。</li>\n<li>在此之后，Firefox、Safari、Chrome 和 Opera都是实现了相同的特性，使XHR成为了Web的一个事实标准。</li>\n<li>虽然实现之间存在差异，但XHR对象的基本使用方法在不同浏览器间还是相对规范的，因此可以放心地用在Web开发当中。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a><font color=\"#f00\">简介</font></h2><p>&emsp;&emsp;Ajax技术的核心是XMLHttpRequest对象（简称XHR对象），这是由微软首先引入的一个特性。Ajax是对<code>Asynchronous JavaScript + XML</code>的简写，但Ajax通信与数据格式无关，这种技术是无须刷新页面即可从服务器取得数据，但不一定是XML数据。</p>\n<p>&emsp;&emsp;IE5是第一款引入<code>XHR</code>对象的浏览器。在IE5中，<code>XHR</code>对象是通过MSXML库中的一个ActiveX对象实现的。因此，在IE中可能会遇到三种不同版本的XHR对象，即<code>MSXML2.XMLHttp</code>、<code>MSXML2.XMLHttp.3.0</code>、<code>MSXML2.XMLHttp.6.0</code>。因此，为了兼容浏览器<strong>IE 6-</strong>，必须写一个函数去根据IE中可用的MSXML库的情况创建最新版本的XHR对象。</p>\n<p>&emsp;&emsp;而 IE 7+、Firefox、Opera、Chrome 和 Safari 都支持原生的XHR对象，在这些浏览器中创建XHR对象要像下面这样使用<code>XMLHttpRequest</code>构造函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div></pre></td></tr></table></figure></p>\n<h2 id=\"兼容函数createXHR\"><a href=\"#兼容函数createXHR\" class=\"headerlink\" title=\"兼容函数createXHR\"></a><font color=\"#f00\">兼容函数<code>createXHR</code></font></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createXHR</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> XMLHttpRequest !== <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> XMLHttpRequst();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> ActiveXObject !== <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">arguments</span>.callee.activeXString !== <span class=\"string\">'string'</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> versions = [<span class=\"string\">'MSXML2.XMLHttp'</span>, <span class=\"string\">'MSXML2.XMLHttp.3.0'</span>, <span class=\"string\">'MSXML2.XMLHttp.6.0'</span>];</div><div class=\"line\">            <span class=\"keyword\">var</span> i, len;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = versions.length; i &lt; len; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">new</span> ActiveXObject(versions[i]);</div><div class=\"line\">                    <span class=\"built_in\">arguments</span>.callee.activeXString = versions[i];</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">catch</span> (ex) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 跳过</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActiveXObject(<span class=\"built_in\">arguments</span>.callee.activeXObject);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'No XHR object available'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这个函数首先检测原生XHR对象是否存在，如果它存在则返回它的新实例，否则检测ActiveXObject对象。如果这两种对象都不存在，就抛出一个错误。然后，就可以使用下面的代码在所有的浏览器中创建<code>XHR</code>对象了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = createXHR();</div></pre></td></tr></table></figure></p>\n<h2 id=\"XHR的具体使用方法\"><a href=\"#XHR的具体使用方法\" class=\"headerlink\" title=\"XHR的具体使用方法\"></a><font color=\"#f00\">XHR的具体使用方法</font></h2><p>&emsp;&emsp;XHR对象的通用使用方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = createXHR();</div><div class=\"line\"><span class=\"comment\">// 异步的ajax请求可以检测XHR对象的readyState属性，该属性表示请求/响应过程的当前活动阶段</span></div><div class=\"line\"><span class=\"comment\">// 0：未初始化。刚创建XHR对象，尚未调用open()方法</span></div><div class=\"line\"><span class=\"comment\">// 1：启动。已经调用open()方法，但尚未调用send()方法</span></div><div class=\"line\"><span class=\"comment\">// 2：发送。已经调用send()方法，但尚未接收到响应</span></div><div class=\"line\"><span class=\"comment\">// 3：接收。已经接收到部分响应数据</span></div><div class=\"line\"><span class=\"comment\">// 4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了</span></div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>) || xhr.status === <span class=\"number\">304</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 服务器响应的数据会自动填充XHR对象的属性，相关的属性如下：</span></div><div class=\"line\">            <span class=\"comment\">// responseText：作为响应主体被返回的文本</span></div><div class=\"line\">            <span class=\"comment\">// responseXMl：如果响应的内容类型是“text/xml”或“application/xml”，这个属性中将保存包含着响应数据的 XML DOM 文档</span></div><div class=\"line\">            <span class=\"comment\">// status：响应的 HTTP 状态</span></div><div class=\"line\">            <span class=\"comment\">// statusText：HTTP 状态的说明</span></div><div class=\"line\">            alert(xhr.responseText);</div><div class=\"line\">            <span class=\"comment\">// 调用getResponseHeader()或者getAllResponseHeaders()可以取得相应的响应头部信息</span></div><div class=\"line\">            <span class=\"keyword\">var</span> myHeader = xhr.getResponseHeader(<span class=\"string\">'MyHeader'</span>);</div><div class=\"line\">            <span class=\"keyword\">var</span> allHeaders = xhr.getAllResponseHeaders();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            alert(<span class=\"string\">'Request was unsuccessful: '</span> + xhr.status);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 查询字符串中每个参数的键和值都必须使用encodeURIComponent()进行编码才追加到URL末尾</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addURLParam</span>(<span class=\"params\">url, name, value</span>) </span>&#123;</div><div class=\"line\">    url += (url.indexOf(<span class=\"string\">'?'</span>) === <span class=\"number\">-1</span> ? <span class=\"string\">'?'</span> : <span class=\"string\">'&amp;'</span>);</div><div class=\"line\">    url += <span class=\"built_in\">encodeURIComponent</span>(name) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(value);</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'example.php'</span>;</div><div class=\"line\"><span class=\"comment\">// 添加参数</span></div><div class=\"line\">url = addURLParam(url, <span class=\"string\">'name'</span>, <span class=\"string\">'Ray'</span>);</div><div class=\"line\">url = addURLParam(url, <span class=\"string\">'book'</span>, <span class=\"string\">'Green Story'</span>);</div><div class=\"line\"><span class=\"comment\">// 第一个参数可为“get”、“post”等</span></div><div class=\"line\"><span class=\"comment\">// 第三个参数为true表示ajax请求为异步的，否则为同步的</span></div><div class=\"line\">xhr.open(<span class=\"string\">'get'</span>, url, <span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"comment\">// 若要调用setRequestHeader()方法，必须在open()之后，send()之前</span></div><div class=\"line\">xhr.setRequestHeader(<span class=\"string\">'MyHeader'</span>, <span class=\"string\">'MyValue'</span>);</div><div class=\"line\">xhr.send(<span class=\"literal\">null</span>);</div><div class=\"line\"><span class=\"comment\">// 在接收到响应之前还可以调用abort()方法取消异步请求</span></div><div class=\"line\"><span class=\"comment\">// xhr.abort();</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 以上使用的是get的提交方式，以下以一个post提交方式的ajax请求来模拟表单提交</span></div><div class=\"line\">xhr.open(<span class=\"string\">'post'</span>, <span class=\"string\">'postexample.php'</span>, <span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"comment\">// 使用post提交方式必须声明这个头部，表示表单提交时的内容类型</span></div><div class=\"line\">xhr.setRequestHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'user-info'</span>);</div><div class=\"line\"><span class=\"comment\">// 序列化页面中的“表单数据”并发送</span></div><div class=\"line\">xhr.send(serialize(form));</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>负责Ajax运作的核心对象是XMLHttpRequest（XHR）对象。</li>\n<li>XHR对象由微软最早在IE5中引入，用于通过JavaScript从服务器取得XML数据。</li>\n<li>在此之后，Firefox、Safari、Chrome 和 Opera都是实现了相同的特性，使XHR成为了Web的一个事实标准。</li>\n<li>虽然实现之间存在差异，但XHR对象的基本使用方法在不同浏览器间还是相对规范的，因此可以放心地用在Web开发当中。</li>\n</ul>\n"},{"title":"Ubuntu下彻底卸载软件的方法","date":"2017-04-03T10:14:15.000Z","_content":"### 在介绍一般的彻底卸载软件的命令前，先介绍一些卸载命令的作用  \n\n##### 1.删除软件包（保留配置文件），但不删除该软件依赖的包\n```\n$ sudo apt-get remove <package>\n```\n##### 2.删除软件包（不保留配置文件），但不删除该软件依赖的包\n```\n$ sudo apt-get --purge remove <package>\n```\n##### 3.删除软件后再删除依赖包（保留配置文件）\n```\n$ sudo apt-get autoremove <package>\n```\n##### 4.删除 /var/cache/apt/archives/ 已经过期的deb\n```\n$ sudo apt-get autoclean <package>\n```\n##### 5.删除 /var/cache/apt/archives/ 中所有的deb\n```\n$ sudo apt-get clean\n```\n### 一般彻底卸载软件的命令及使用顺序如下  \n\n```cmd\n// 删除软件及其配置文件\n$ sudo apt-get --purge remove <package>\n// 删除已经不再依赖的软件依赖包\n$ sudo apt-get autoremove <package>\n// 删除此时dpkg列表中有“rc”状态的软件包\n$ sudo dpkg -l | grep ^rc | awk '{print $2}' | sudo xargs dpkg -P\n```\n","source":"_posts/aptRemove.md","raw":"---\ntitle: Ubuntu下彻底卸载软件的方法\ndate: 2017-04-03 18:14:15\ncategories: [技术类-linux]\ntags: [ubuntu]\n---\n### 在介绍一般的彻底卸载软件的命令前，先介绍一些卸载命令的作用  \n\n##### 1.删除软件包（保留配置文件），但不删除该软件依赖的包\n```\n$ sudo apt-get remove <package>\n```\n##### 2.删除软件包（不保留配置文件），但不删除该软件依赖的包\n```\n$ sudo apt-get --purge remove <package>\n```\n##### 3.删除软件后再删除依赖包（保留配置文件）\n```\n$ sudo apt-get autoremove <package>\n```\n##### 4.删除 /var/cache/apt/archives/ 已经过期的deb\n```\n$ sudo apt-get autoclean <package>\n```\n##### 5.删除 /var/cache/apt/archives/ 中所有的deb\n```\n$ sudo apt-get clean\n```\n### 一般彻底卸载软件的命令及使用顺序如下  \n\n```cmd\n// 删除软件及其配置文件\n$ sudo apt-get --purge remove <package>\n// 删除已经不再依赖的软件依赖包\n$ sudo apt-get autoremove <package>\n// 删除此时dpkg列表中有“rc”状态的软件包\n$ sudo dpkg -l | grep ^rc | awk '{print $2}' | sudo xargs dpkg -P\n```\n","slug":"aptRemove","published":1,"updated":"2017-04-19T14:29:28.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3032h000eimw43gpuhxep","content":"<h3 id=\"在介绍一般的彻底卸载软件的命令前，先介绍一些卸载命令的作用\"><a href=\"#在介绍一般的彻底卸载软件的命令前，先介绍一些卸载命令的作用\" class=\"headerlink\" title=\"在介绍一般的彻底卸载软件的命令前，先介绍一些卸载命令的作用\"></a>在介绍一般的彻底卸载软件的命令前，先介绍一些卸载命令的作用</h3><h5 id=\"1-删除软件包（保留配置文件），但不删除该软件依赖的包\"><a href=\"#1-删除软件包（保留配置文件），但不删除该软件依赖的包\" class=\"headerlink\" title=\"1.删除软件包（保留配置文件），但不删除该软件依赖的包\"></a>1.删除软件包（保留配置文件），但不删除该软件依赖的包</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get remove &lt;package&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"2-删除软件包（不保留配置文件），但不删除该软件依赖的包\"><a href=\"#2-删除软件包（不保留配置文件），但不删除该软件依赖的包\" class=\"headerlink\" title=\"2.删除软件包（不保留配置文件），但不删除该软件依赖的包\"></a>2.删除软件包（不保留配置文件），但不删除该软件依赖的包</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get --purge remove &lt;package&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"3-删除软件后再删除依赖包（保留配置文件）\"><a href=\"#3-删除软件后再删除依赖包（保留配置文件）\" class=\"headerlink\" title=\"3.删除软件后再删除依赖包（保留配置文件）\"></a>3.删除软件后再删除依赖包（保留配置文件）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get autoremove &lt;package&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"4-删除-var-cache-apt-archives-已经过期的deb\"><a href=\"#4-删除-var-cache-apt-archives-已经过期的deb\" class=\"headerlink\" title=\"4.删除 /var/cache/apt/archives/ 已经过期的deb\"></a>4.删除 /var/cache/apt/archives/ 已经过期的deb</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get autoclean &lt;package&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"5-删除-var-cache-apt-archives-中所有的deb\"><a href=\"#5-删除-var-cache-apt-archives-中所有的deb\" class=\"headerlink\" title=\"5.删除 /var/cache/apt/archives/ 中所有的deb\"></a>5.删除 /var/cache/apt/archives/ 中所有的deb</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get clean</div></pre></td></tr></table></figure>\n<h3 id=\"一般彻底卸载软件的命令及使用顺序如下\"><a href=\"#一般彻底卸载软件的命令及使用顺序如下\" class=\"headerlink\" title=\"一般彻底卸载软件的命令及使用顺序如下\"></a>一般彻底卸载软件的命令及使用顺序如下</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 删除软件及其配置文件</div><div class=\"line\">$ sudo apt-get --purge remove &lt;package&gt;</div><div class=\"line\">// 删除已经不再依赖的软件依赖包</div><div class=\"line\">$ sudo apt-get autoremove &lt;package&gt;</div><div class=\"line\">// 删除此时dpkg列表中有“rc”状态的软件包</div><div class=\"line\">$ sudo dpkg -l | grep ^rc | awk '&#123;<span class=\"built_in\">print</span> $<span class=\"number\">2</span>&#125;' | sudo xargs dpkg -P</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"在介绍一般的彻底卸载软件的命令前，先介绍一些卸载命令的作用\"><a href=\"#在介绍一般的彻底卸载软件的命令前，先介绍一些卸载命令的作用\" class=\"headerlink\" title=\"在介绍一般的彻底卸载软件的命令前，先介绍一些卸载命令的作用\"></a>在介绍一般的彻底卸载软件的命令前，先介绍一些卸载命令的作用</h3><h5 id=\"1-删除软件包（保留配置文件），但不删除该软件依赖的包\"><a href=\"#1-删除软件包（保留配置文件），但不删除该软件依赖的包\" class=\"headerlink\" title=\"1.删除软件包（保留配置文件），但不删除该软件依赖的包\"></a>1.删除软件包（保留配置文件），但不删除该软件依赖的包</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get remove &lt;package&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"2-删除软件包（不保留配置文件），但不删除该软件依赖的包\"><a href=\"#2-删除软件包（不保留配置文件），但不删除该软件依赖的包\" class=\"headerlink\" title=\"2.删除软件包（不保留配置文件），但不删除该软件依赖的包\"></a>2.删除软件包（不保留配置文件），但不删除该软件依赖的包</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get --purge remove &lt;package&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"3-删除软件后再删除依赖包（保留配置文件）\"><a href=\"#3-删除软件后再删除依赖包（保留配置文件）\" class=\"headerlink\" title=\"3.删除软件后再删除依赖包（保留配置文件）\"></a>3.删除软件后再删除依赖包（保留配置文件）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get autoremove &lt;package&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"4-删除-var-cache-apt-archives-已经过期的deb\"><a href=\"#4-删除-var-cache-apt-archives-已经过期的deb\" class=\"headerlink\" title=\"4.删除 /var/cache/apt/archives/ 已经过期的deb\"></a>4.删除 /var/cache/apt/archives/ 已经过期的deb</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get autoclean &lt;package&gt;</div></pre></td></tr></table></figure>\n<h5 id=\"5-删除-var-cache-apt-archives-中所有的deb\"><a href=\"#5-删除-var-cache-apt-archives-中所有的deb\" class=\"headerlink\" title=\"5.删除 /var/cache/apt/archives/ 中所有的deb\"></a>5.删除 /var/cache/apt/archives/ 中所有的deb</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get clean</div></pre></td></tr></table></figure>\n<h3 id=\"一般彻底卸载软件的命令及使用顺序如下\"><a href=\"#一般彻底卸载软件的命令及使用顺序如下\" class=\"headerlink\" title=\"一般彻底卸载软件的命令及使用顺序如下\"></a>一般彻底卸载软件的命令及使用顺序如下</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 删除软件及其配置文件</div><div class=\"line\">$ sudo apt-get --purge remove &lt;package&gt;</div><div class=\"line\">// 删除已经不再依赖的软件依赖包</div><div class=\"line\">$ sudo apt-get autoremove &lt;package&gt;</div><div class=\"line\">// 删除此时dpkg列表中有“rc”状态的软件包</div><div class=\"line\">$ sudo dpkg -l | grep ^rc | awk '&#123;<span class=\"built_in\">print</span> $<span class=\"number\">2</span>&#125;' | sudo xargs dpkg -P</div></pre></td></tr></table></figure>\n"},{"title":"异步加载 javascript 文件的方法总结","date":"2016-04-28T14:36:51.000Z","_content":"### 异步加载 javascript 文件的方法\n","source":"_posts/asyncJs.md","raw":"---\ntitle: 异步加载 javascript 文件的方法总结\ndate: 2016-04-28 22:36:51\ncategories: [技术类-前端]\ntags: [JavaScript]\n---\n### 异步加载 javascript 文件的方法\n","slug":"asyncJs","published":1,"updated":"2017-04-25T15:17:40.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3032j000iimw4oxvznwjw","content":"<h3 id=\"异步加载-javascript-文件的方法\"><a href=\"#异步加载-javascript-文件的方法\" class=\"headerlink\" title=\"异步加载 javascript 文件的方法\"></a>异步加载 javascript 文件的方法</h3>","excerpt":"","more":"<h3 id=\"异步加载-javascript-文件的方法\"><a href=\"#异步加载-javascript-文件的方法\" class=\"headerlink\" title=\"异步加载 javascript 文件的方法\"></a>异步加载 javascript 文件的方法</h3>"},{"title":"各大浏览器内核(渲染引擎/JS引擎)","date":"2017-04-15T07:17:16.000Z","_content":"## 简介\n&emsp;&emsp;在介绍各个主流的浏览器内核之前，首先介绍浏览器内核的**组成**及其**工作原理**/**作用**。\n\n&emsp;&emsp;**渲染引擎**(又叫**排版引擎**)以及**JS引擎**是浏览器内核的两个组成部分。\n\n&emsp;&emsp;**渲染引擎**负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。它也可以借助插件（一种浏览器扩展）显示其他类型数据，例如使用PDF阅读器插件（所以想做浏览器插件的同学必须知道浏览器的工作原理），可以显示PDF格式。\n\n&emsp;&emsp;**JS引擎**负责对JavaScript进行解释、编译和执行，以使网页达到一些动态的效果。\n\n## 渲染引擎\n一. **Trident**/**EdgeHTML** -> (IE浏览器/Edge浏览器)\n\n&emsp;&emsp;**Trident**是微软的IE浏览器使用的渲染引擎，它是从从早期一款商业性的专利网页浏览器Spyglass Mosaic派生出来的。Window 10发布之后，微软将其内置的浏览器命名为Edge，而Edge浏览器的渲染引擎便是**EdgeHTML**。\n\n二. **WebKit**（WebCore） -> (Safari浏览器)\n\n&emsp;&emsp;**WebKit**是苹果公司的Safari浏览器使用的渲染引擎，是KDE（Linux桌面系统）小组的KHTML引擎的一个开源的分支。\n\n三. **Chromium**/**Blink** -> (Chrome浏览器)\n\n&emsp;&emsp;**Chromium**是谷歌公司的Chrome浏览器使用的渲染引擎，它是以苹果公司的WebKit作为原型的，是WebKit的一个分支。Chromium引擎把WebKit引擎的代码梳理得更加可读。后来，在2013年的时候，Chrome放弃了Chromium引擎转而使用了基于**WebKit2**的**Blink**引擎，其中**WebKit2**是苹果公司于2010年推出的新的WebKit引擎。\n\n四. **Presto** -> (Opera浏览器)\n\n&emsp;&emsp;**Presto**是挪威Opera Software ASA公司的Opera浏览器使用的渲染引擎，后来该公司为了减少研发成本，跟随Chrome浏览器先后将渲染引擎改为**Chromium** 和 **Blink**。\n\n五. **Gecko** -> (FireFox浏览器)\n\n&emsp;&emsp;**Gecko**是Mozilla公司的FireFox浏览器使用的渲染引擎，它是一款开源的跨平台渲染引擎，可以在Windows、 BSD、Linux 和 Mac OS X 中使用。\n\n## JS引擎\n#### 一. 微软的JS引擎\n|JScript|Chakra|\n|:---:|:---:|\n|IE3.0-IE8.0|IE9+|\n\n#### 二. 苹果的JS引擎\n|Nitro|\n|:---:|\n|为Safari 4编写|\n\n#### 三. Google的JS引擎\n|V8|\n|:---:|\n|开放源代码，由Google丹麦开发，是Chrome浏览器的一部分|\n\n#### 四. Opera的JS引擎\n|Linear A|Linear B|Futhark|Carakan|\n|:---:|:---:|:---:|:---:|\n|Opera 4.0～6.1|Opera 7.0～9.2|Opera 9.5～10.2|Opera10.50+|\n\n#### 五. Mozilla的JS引擎\n|SpiderMonkey|Rhino|TraceMonkey|JaegerMonkey|JavaScriptCore、WebKit|IonMonkey|OdinMonkey|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|第一款JavaScript引擎|完全以Java编写|基于实时编译的引擎|结合追踪和组合码技术大幅提高性能|用于Mozilla Firefox 4.0以上版本|可以对JavaScript编译后的结果进行优化|可以对asm.js进行优化，用于Mozilla Firefox 22.0以上版本|","source":"_posts/browserCore.md","raw":"---\ntitle: 各大浏览器内核(渲染引擎/JS引擎)\ndate: 2017-04-15 15:17:16\ncategories: [技术类-前端]\ntags: [浏览器]\n---\n## 简介\n&emsp;&emsp;在介绍各个主流的浏览器内核之前，首先介绍浏览器内核的**组成**及其**工作原理**/**作用**。\n\n&emsp;&emsp;**渲染引擎**(又叫**排版引擎**)以及**JS引擎**是浏览器内核的两个组成部分。\n\n&emsp;&emsp;**渲染引擎**负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。它也可以借助插件（一种浏览器扩展）显示其他类型数据，例如使用PDF阅读器插件（所以想做浏览器插件的同学必须知道浏览器的工作原理），可以显示PDF格式。\n\n&emsp;&emsp;**JS引擎**负责对JavaScript进行解释、编译和执行，以使网页达到一些动态的效果。\n\n## 渲染引擎\n一. **Trident**/**EdgeHTML** -> (IE浏览器/Edge浏览器)\n\n&emsp;&emsp;**Trident**是微软的IE浏览器使用的渲染引擎，它是从从早期一款商业性的专利网页浏览器Spyglass Mosaic派生出来的。Window 10发布之后，微软将其内置的浏览器命名为Edge，而Edge浏览器的渲染引擎便是**EdgeHTML**。\n\n二. **WebKit**（WebCore） -> (Safari浏览器)\n\n&emsp;&emsp;**WebKit**是苹果公司的Safari浏览器使用的渲染引擎，是KDE（Linux桌面系统）小组的KHTML引擎的一个开源的分支。\n\n三. **Chromium**/**Blink** -> (Chrome浏览器)\n\n&emsp;&emsp;**Chromium**是谷歌公司的Chrome浏览器使用的渲染引擎，它是以苹果公司的WebKit作为原型的，是WebKit的一个分支。Chromium引擎把WebKit引擎的代码梳理得更加可读。后来，在2013年的时候，Chrome放弃了Chromium引擎转而使用了基于**WebKit2**的**Blink**引擎，其中**WebKit2**是苹果公司于2010年推出的新的WebKit引擎。\n\n四. **Presto** -> (Opera浏览器)\n\n&emsp;&emsp;**Presto**是挪威Opera Software ASA公司的Opera浏览器使用的渲染引擎，后来该公司为了减少研发成本，跟随Chrome浏览器先后将渲染引擎改为**Chromium** 和 **Blink**。\n\n五. **Gecko** -> (FireFox浏览器)\n\n&emsp;&emsp;**Gecko**是Mozilla公司的FireFox浏览器使用的渲染引擎，它是一款开源的跨平台渲染引擎，可以在Windows、 BSD、Linux 和 Mac OS X 中使用。\n\n## JS引擎\n#### 一. 微软的JS引擎\n|JScript|Chakra|\n|:---:|:---:|\n|IE3.0-IE8.0|IE9+|\n\n#### 二. 苹果的JS引擎\n|Nitro|\n|:---:|\n|为Safari 4编写|\n\n#### 三. Google的JS引擎\n|V8|\n|:---:|\n|开放源代码，由Google丹麦开发，是Chrome浏览器的一部分|\n\n#### 四. Opera的JS引擎\n|Linear A|Linear B|Futhark|Carakan|\n|:---:|:---:|:---:|:---:|\n|Opera 4.0～6.1|Opera 7.0～9.2|Opera 9.5～10.2|Opera10.50+|\n\n#### 五. Mozilla的JS引擎\n|SpiderMonkey|Rhino|TraceMonkey|JaegerMonkey|JavaScriptCore、WebKit|IonMonkey|OdinMonkey|\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|第一款JavaScript引擎|完全以Java编写|基于实时编译的引擎|结合追踪和组合码技术大幅提高性能|用于Mozilla Firefox 4.0以上版本|可以对JavaScript编译后的结果进行优化|可以对asm.js进行优化，用于Mozilla Firefox 22.0以上版本|","slug":"browserCore","published":1,"updated":"2017-04-19T14:32:53.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3032k000kimw4w89vt3w7","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>&emsp;&emsp;在介绍各个主流的浏览器内核之前，首先介绍浏览器内核的<strong>组成</strong>及其<strong>工作原理</strong>/<strong>作用</strong>。</p>\n<p>&emsp;&emsp;<strong>渲染引擎</strong>(又叫<strong>排版引擎</strong>)以及<strong>JS引擎</strong>是浏览器内核的两个组成部分。</p>\n<p>&emsp;&emsp;<strong>渲染引擎</strong>负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。它也可以借助插件（一种浏览器扩展）显示其他类型数据，例如使用PDF阅读器插件（所以想做浏览器插件的同学必须知道浏览器的工作原理），可以显示PDF格式。</p>\n<p>&emsp;&emsp;<strong>JS引擎</strong>负责对JavaScript进行解释、编译和执行，以使网页达到一些动态的效果。</p>\n<h2 id=\"渲染引擎\"><a href=\"#渲染引擎\" class=\"headerlink\" title=\"渲染引擎\"></a>渲染引擎</h2><p>一. <strong>Trident</strong>/<strong>EdgeHTML</strong> -&gt; (IE浏览器/Edge浏览器)</p>\n<p>&emsp;&emsp;<strong>Trident</strong>是微软的IE浏览器使用的渲染引擎，它是从从早期一款商业性的专利网页浏览器Spyglass Mosaic派生出来的。Window 10发布之后，微软将其内置的浏览器命名为Edge，而Edge浏览器的渲染引擎便是<strong>EdgeHTML</strong>。</p>\n<p>二. <strong>WebKit</strong>（WebCore） -&gt; (Safari浏览器)</p>\n<p>&emsp;&emsp;<strong>WebKit</strong>是苹果公司的Safari浏览器使用的渲染引擎，是KDE（Linux桌面系统）小组的KHTML引擎的一个开源的分支。</p>\n<p>三. <strong>Chromium</strong>/<strong>Blink</strong> -&gt; (Chrome浏览器)</p>\n<p>&emsp;&emsp;<strong>Chromium</strong>是谷歌公司的Chrome浏览器使用的渲染引擎，它是以苹果公司的WebKit作为原型的，是WebKit的一个分支。Chromium引擎把WebKit引擎的代码梳理得更加可读。后来，在2013年的时候，Chrome放弃了Chromium引擎转而使用了基于<strong>WebKit2</strong>的<strong>Blink</strong>引擎，其中<strong>WebKit2</strong>是苹果公司于2010年推出的新的WebKit引擎。</p>\n<p>四. <strong>Presto</strong> -&gt; (Opera浏览器)</p>\n<p>&emsp;&emsp;<strong>Presto</strong>是挪威Opera Software ASA公司的Opera浏览器使用的渲染引擎，后来该公司为了减少研发成本，跟随Chrome浏览器先后将渲染引擎改为<strong>Chromium</strong> 和 <strong>Blink</strong>。</p>\n<p>五. <strong>Gecko</strong> -&gt; (FireFox浏览器)</p>\n<p>&emsp;&emsp;<strong>Gecko</strong>是Mozilla公司的FireFox浏览器使用的渲染引擎，它是一款开源的跨平台渲染引擎，可以在Windows、 BSD、Linux 和 Mac OS X 中使用。</p>\n<h2 id=\"JS引擎\"><a href=\"#JS引擎\" class=\"headerlink\" title=\"JS引擎\"></a>JS引擎</h2><h4 id=\"一-微软的JS引擎\"><a href=\"#一-微软的JS引擎\" class=\"headerlink\" title=\"一. 微软的JS引擎\"></a>一. 微软的JS引擎</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">JScript</th>\n<th style=\"text-align:center\">Chakra</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IE3.0-IE8.0</td>\n<td style=\"text-align:center\">IE9+</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"二-苹果的JS引擎\"><a href=\"#二-苹果的JS引擎\" class=\"headerlink\" title=\"二. 苹果的JS引擎\"></a>二. 苹果的JS引擎</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Nitro</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">为Safari 4编写</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"三-Google的JS引擎\"><a href=\"#三-Google的JS引擎\" class=\"headerlink\" title=\"三. Google的JS引擎\"></a>三. Google的JS引擎</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">V8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">开放源代码，由Google丹麦开发，是Chrome浏览器的一部分</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"四-Opera的JS引擎\"><a href=\"#四-Opera的JS引擎\" class=\"headerlink\" title=\"四. Opera的JS引擎\"></a>四. Opera的JS引擎</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Linear A</th>\n<th style=\"text-align:center\">Linear B</th>\n<th style=\"text-align:center\">Futhark</th>\n<th style=\"text-align:center\">Carakan</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Opera 4.0～6.1</td>\n<td style=\"text-align:center\">Opera 7.0～9.2</td>\n<td style=\"text-align:center\">Opera 9.5～10.2</td>\n<td style=\"text-align:center\">Opera10.50+</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"五-Mozilla的JS引擎\"><a href=\"#五-Mozilla的JS引擎\" class=\"headerlink\" title=\"五. Mozilla的JS引擎\"></a>五. Mozilla的JS引擎</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">SpiderMonkey</th>\n<th style=\"text-align:center\">Rhino</th>\n<th style=\"text-align:center\">TraceMonkey</th>\n<th style=\"text-align:center\">JaegerMonkey</th>\n<th style=\"text-align:center\">JavaScriptCore、WebKit</th>\n<th style=\"text-align:center\">IonMonkey</th>\n<th style=\"text-align:center\">OdinMonkey</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第一款JavaScript引擎</td>\n<td style=\"text-align:center\">完全以Java编写</td>\n<td style=\"text-align:center\">基于实时编译的引擎</td>\n<td style=\"text-align:center\">结合追踪和组合码技术大幅提高性能</td>\n<td style=\"text-align:center\">用于Mozilla Firefox 4.0以上版本</td>\n<td style=\"text-align:center\">可以对JavaScript编译后的结果进行优化</td>\n<td style=\"text-align:center\">可以对asm.js进行优化，用于Mozilla Firefox 22.0以上版本</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>&emsp;&emsp;在介绍各个主流的浏览器内核之前，首先介绍浏览器内核的<strong>组成</strong>及其<strong>工作原理</strong>/<strong>作用</strong>。</p>\n<p>&emsp;&emsp;<strong>渲染引擎</strong>(又叫<strong>排版引擎</strong>)以及<strong>JS引擎</strong>是浏览器内核的两个组成部分。</p>\n<p>&emsp;&emsp;<strong>渲染引擎</strong>负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。它也可以借助插件（一种浏览器扩展）显示其他类型数据，例如使用PDF阅读器插件（所以想做浏览器插件的同学必须知道浏览器的工作原理），可以显示PDF格式。</p>\n<p>&emsp;&emsp;<strong>JS引擎</strong>负责对JavaScript进行解释、编译和执行，以使网页达到一些动态的效果。</p>\n<h2 id=\"渲染引擎\"><a href=\"#渲染引擎\" class=\"headerlink\" title=\"渲染引擎\"></a>渲染引擎</h2><p>一. <strong>Trident</strong>/<strong>EdgeHTML</strong> -&gt; (IE浏览器/Edge浏览器)</p>\n<p>&emsp;&emsp;<strong>Trident</strong>是微软的IE浏览器使用的渲染引擎，它是从从早期一款商业性的专利网页浏览器Spyglass Mosaic派生出来的。Window 10发布之后，微软将其内置的浏览器命名为Edge，而Edge浏览器的渲染引擎便是<strong>EdgeHTML</strong>。</p>\n<p>二. <strong>WebKit</strong>（WebCore） -&gt; (Safari浏览器)</p>\n<p>&emsp;&emsp;<strong>WebKit</strong>是苹果公司的Safari浏览器使用的渲染引擎，是KDE（Linux桌面系统）小组的KHTML引擎的一个开源的分支。</p>\n<p>三. <strong>Chromium</strong>/<strong>Blink</strong> -&gt; (Chrome浏览器)</p>\n<p>&emsp;&emsp;<strong>Chromium</strong>是谷歌公司的Chrome浏览器使用的渲染引擎，它是以苹果公司的WebKit作为原型的，是WebKit的一个分支。Chromium引擎把WebKit引擎的代码梳理得更加可读。后来，在2013年的时候，Chrome放弃了Chromium引擎转而使用了基于<strong>WebKit2</strong>的<strong>Blink</strong>引擎，其中<strong>WebKit2</strong>是苹果公司于2010年推出的新的WebKit引擎。</p>\n<p>四. <strong>Presto</strong> -&gt; (Opera浏览器)</p>\n<p>&emsp;&emsp;<strong>Presto</strong>是挪威Opera Software ASA公司的Opera浏览器使用的渲染引擎，后来该公司为了减少研发成本，跟随Chrome浏览器先后将渲染引擎改为<strong>Chromium</strong> 和 <strong>Blink</strong>。</p>\n<p>五. <strong>Gecko</strong> -&gt; (FireFox浏览器)</p>\n<p>&emsp;&emsp;<strong>Gecko</strong>是Mozilla公司的FireFox浏览器使用的渲染引擎，它是一款开源的跨平台渲染引擎，可以在Windows、 BSD、Linux 和 Mac OS X 中使用。</p>\n<h2 id=\"JS引擎\"><a href=\"#JS引擎\" class=\"headerlink\" title=\"JS引擎\"></a>JS引擎</h2><h4 id=\"一-微软的JS引擎\"><a href=\"#一-微软的JS引擎\" class=\"headerlink\" title=\"一. 微软的JS引擎\"></a>一. 微软的JS引擎</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">JScript</th>\n<th style=\"text-align:center\">Chakra</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IE3.0-IE8.0</td>\n<td style=\"text-align:center\">IE9+</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"二-苹果的JS引擎\"><a href=\"#二-苹果的JS引擎\" class=\"headerlink\" title=\"二. 苹果的JS引擎\"></a>二. 苹果的JS引擎</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Nitro</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">为Safari 4编写</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"三-Google的JS引擎\"><a href=\"#三-Google的JS引擎\" class=\"headerlink\" title=\"三. Google的JS引擎\"></a>三. Google的JS引擎</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">V8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">开放源代码，由Google丹麦开发，是Chrome浏览器的一部分</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"四-Opera的JS引擎\"><a href=\"#四-Opera的JS引擎\" class=\"headerlink\" title=\"四. Opera的JS引擎\"></a>四. Opera的JS引擎</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Linear A</th>\n<th style=\"text-align:center\">Linear B</th>\n<th style=\"text-align:center\">Futhark</th>\n<th style=\"text-align:center\">Carakan</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Opera 4.0～6.1</td>\n<td style=\"text-align:center\">Opera 7.0～9.2</td>\n<td style=\"text-align:center\">Opera 9.5～10.2</td>\n<td style=\"text-align:center\">Opera10.50+</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"五-Mozilla的JS引擎\"><a href=\"#五-Mozilla的JS引擎\" class=\"headerlink\" title=\"五. Mozilla的JS引擎\"></a>五. Mozilla的JS引擎</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">SpiderMonkey</th>\n<th style=\"text-align:center\">Rhino</th>\n<th style=\"text-align:center\">TraceMonkey</th>\n<th style=\"text-align:center\">JaegerMonkey</th>\n<th style=\"text-align:center\">JavaScriptCore、WebKit</th>\n<th style=\"text-align:center\">IonMonkey</th>\n<th style=\"text-align:center\">OdinMonkey</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第一款JavaScript引擎</td>\n<td style=\"text-align:center\">完全以Java编写</td>\n<td style=\"text-align:center\">基于实时编译的引擎</td>\n<td style=\"text-align:center\">结合追踪和组合码技术大幅提高性能</td>\n<td style=\"text-align:center\">用于Mozilla Firefox 4.0以上版本</td>\n<td style=\"text-align:center\">可以对JavaScript编译后的结果进行优化</td>\n<td style=\"text-align:center\">可以对asm.js进行优化，用于Mozilla Firefox 22.0以上版本</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"清除子元素浮动造成的影响","date":"2016-04-22T02:21:34.000Z","_content":"#### <font color=\"#f00\">第一种：</font>父级div设置高度\n```html\n<style>\n.father {\n    height: 200px;\n}\n.son {\n    float: left;\n    width: 20%;\n    height: 200px;\n}\n</style>\n<div class=\"father\">\n    <div class=\"son\">浮动元素</div>\n</div>\n```\n#### <font color=\"#f00\">第二种：</font>父级内部结尾处添加空的`clear: both`的div标签\n```html\n<style>\n.son {\n    float: left;\n    width: 20%;\n    height: 200px;\n}\n.clearfloat {\n    clear: both;\n}\n</style>\n<div class=\"father\">\n    <div class=\"son\">浮动元素</div>\n    <div class=\"clearfloat\"></div>\n</div>\n```\n#### <font color=\"#f00\">第三种：</font>父级使用伪类，类似第二种方法\n```html\n<style>\n.father {\n    *zoom: 1;\n}\n.father:after {\n    content: '';\n    display: block;\n    clear: both;\n    height: 0;\n    overflow: hidden;\n}\n.son {\n    float: left;\n    width: 20%;\n    height: 200px;\n}\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n或者使用下面的方法，也是使用了伪类\n```html\n<style>\n.father {\n    *zoom: 1;\n}\n.father:after {\n    content: '';\n    display: table;\n    clear: both;\n}\n.son {\n    float: left;\n    width: 20%;\n    height: 200px;\n}\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n#### <font color=\"#f00\">第四种：</font>给父级添加`overflow: hidden/auto/scroll;`、`float: left/right;`、`position: absolute;`、`display: inline-block;`、`zoom: 1;`五个CSS属性其中之一\n```html\n<style>\n.father {\n    overflow: hidden/auto/scroll;\n    /*float: left/right;*/\n    /*position: absolute;*/\n    /*display: inline-block;*/\n    /*zoom: 1;*/\n}\n.son {\n    float: left;\n    width: 20%;\n    height: 200px;\n}\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```","source":"_posts/clearFloat.md","raw":"---\ntitle: 清除子元素浮动造成的影响\ndate: 2016-04-22 10:21:34\ncategories: [技术类-前端]\ntags: [html, css]\n---\n#### <font color=\"#f00\">第一种：</font>父级div设置高度\n```html\n<style>\n.father {\n    height: 200px;\n}\n.son {\n    float: left;\n    width: 20%;\n    height: 200px;\n}\n</style>\n<div class=\"father\">\n    <div class=\"son\">浮动元素</div>\n</div>\n```\n#### <font color=\"#f00\">第二种：</font>父级内部结尾处添加空的`clear: both`的div标签\n```html\n<style>\n.son {\n    float: left;\n    width: 20%;\n    height: 200px;\n}\n.clearfloat {\n    clear: both;\n}\n</style>\n<div class=\"father\">\n    <div class=\"son\">浮动元素</div>\n    <div class=\"clearfloat\"></div>\n</div>\n```\n#### <font color=\"#f00\">第三种：</font>父级使用伪类，类似第二种方法\n```html\n<style>\n.father {\n    *zoom: 1;\n}\n.father:after {\n    content: '';\n    display: block;\n    clear: both;\n    height: 0;\n    overflow: hidden;\n}\n.son {\n    float: left;\n    width: 20%;\n    height: 200px;\n}\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n或者使用下面的方法，也是使用了伪类\n```html\n<style>\n.father {\n    *zoom: 1;\n}\n.father:after {\n    content: '';\n    display: table;\n    clear: both;\n}\n.son {\n    float: left;\n    width: 20%;\n    height: 200px;\n}\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n#### <font color=\"#f00\">第四种：</font>给父级添加`overflow: hidden/auto/scroll;`、`float: left/right;`、`position: absolute;`、`display: inline-block;`、`zoom: 1;`五个CSS属性其中之一\n```html\n<style>\n.father {\n    overflow: hidden/auto/scroll;\n    /*float: left/right;*/\n    /*position: absolute;*/\n    /*display: inline-block;*/\n    /*zoom: 1;*/\n}\n.son {\n    float: left;\n    width: 20%;\n    height: 200px;\n}\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```","slug":"clearFloat","published":1,"updated":"2017-04-22T04:13:24.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3032n000pimw43p1effjf","content":"<h4 id=\"第一种：父级div设置高度\"><a href=\"#第一种：父级div设置高度\" class=\"headerlink\" title=\"第一种：父级div设置高度\"></a><font color=\"#f00\">第一种：</font>父级div设置高度</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">.father &#123;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\">.son &#123;</div><div class=\"line\">    float: left;</div><div class=\"line\">    width: 20%;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"son\"</span>&gt;</span>浮动元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"第二种：父级内部结尾处添加空的clear-both的div标签\"><a href=\"#第二种：父级内部结尾处添加空的clear-both的div标签\" class=\"headerlink\" title=\"第二种：父级内部结尾处添加空的clear: both的div标签\"></a><font color=\"#f00\">第二种：</font>父级内部结尾处添加空的<code>clear: both</code>的div标签</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">.son &#123;</div><div class=\"line\">    float: left;</div><div class=\"line\">    width: 20%;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\">.clearfloat &#123;</div><div class=\"line\">    clear: both;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"son\"</span>&gt;</span>浮动元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"clearfloat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"第三种：父级使用伪类，类似第二种方法\"><a href=\"#第三种：父级使用伪类，类似第二种方法\" class=\"headerlink\" title=\"第三种：父级使用伪类，类似第二种方法\"></a><font color=\"#f00\">第三种：</font>父级使用伪类，类似第二种方法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">.father &#123;</div><div class=\"line\">    *zoom: 1;</div><div class=\"line\">&#125;</div><div class=\"line\">.father:after &#123;</div><div class=\"line\">    content: '';</div><div class=\"line\">    display: block;</div><div class=\"line\">    clear: both;</div><div class=\"line\">    height: 0;</div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\">.son &#123;</div><div class=\"line\">    float: left;</div><div class=\"line\">    width: 20%;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"son\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>或者使用下面的方法，也是使用了伪类<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">.father &#123;</div><div class=\"line\">    *zoom: 1;</div><div class=\"line\">&#125;</div><div class=\"line\">.father:after &#123;</div><div class=\"line\">    content: '';</div><div class=\"line\">    display: table;</div><div class=\"line\">    clear: both;</div><div class=\"line\">&#125;</div><div class=\"line\">.son &#123;</div><div class=\"line\">    float: left;</div><div class=\"line\">    width: 20%;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"son\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"第四种：给父级添加overflow-hidden-auto-scroll-、float-left-right-、position-absolute-、display-inline-block-、zoom-1-五个CSS属性其中之一\"><a href=\"#第四种：给父级添加overflow-hidden-auto-scroll-、float-left-right-、position-absolute-、display-inline-block-、zoom-1-五个CSS属性其中之一\" class=\"headerlink\" title=\"第四种：给父级添加overflow: hidden/auto/scroll;、float: left/right;、position: absolute;、display: inline-block;、zoom: 1;五个CSS属性其中之一\"></a><font color=\"#f00\">第四种：</font>给父级添加<code>overflow: hidden/auto/scroll;</code>、<code>float: left/right;</code>、<code>position: absolute;</code>、<code>display: inline-block;</code>、<code>zoom: 1;</code>五个CSS属性其中之一</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">.father &#123;</div><div class=\"line\">    overflow: hidden/auto/scroll;</div><div class=\"line\">    /*float: left/right;*/</div><div class=\"line\">    /*position: absolute;*/</div><div class=\"line\">    /*display: inline-block;*/</div><div class=\"line\">    /*zoom: 1;*/</div><div class=\"line\">&#125;</div><div class=\"line\">.son &#123;</div><div class=\"line\">    float: left;</div><div class=\"line\">    width: 20%;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"son\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<h4 id=\"第一种：父级div设置高度\"><a href=\"#第一种：父级div设置高度\" class=\"headerlink\" title=\"第一种：父级div设置高度\"></a><font color=\"#f00\">第一种：</font>父级div设置高度</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">.father &#123;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\">.son &#123;</div><div class=\"line\">    float: left;</div><div class=\"line\">    width: 20%;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"son\"</span>&gt;</span>浮动元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"第二种：父级内部结尾处添加空的clear-both的div标签\"><a href=\"#第二种：父级内部结尾处添加空的clear-both的div标签\" class=\"headerlink\" title=\"第二种：父级内部结尾处添加空的clear: both的div标签\"></a><font color=\"#f00\">第二种：</font>父级内部结尾处添加空的<code>clear: both</code>的div标签</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">.son &#123;</div><div class=\"line\">    float: left;</div><div class=\"line\">    width: 20%;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\">.clearfloat &#123;</div><div class=\"line\">    clear: both;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"son\"</span>&gt;</span>浮动元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"clearfloat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"第三种：父级使用伪类，类似第二种方法\"><a href=\"#第三种：父级使用伪类，类似第二种方法\" class=\"headerlink\" title=\"第三种：父级使用伪类，类似第二种方法\"></a><font color=\"#f00\">第三种：</font>父级使用伪类，类似第二种方法</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">.father &#123;</div><div class=\"line\">    *zoom: 1;</div><div class=\"line\">&#125;</div><div class=\"line\">.father:after &#123;</div><div class=\"line\">    content: '';</div><div class=\"line\">    display: block;</div><div class=\"line\">    clear: both;</div><div class=\"line\">    height: 0;</div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\">.son &#123;</div><div class=\"line\">    float: left;</div><div class=\"line\">    width: 20%;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"son\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>或者使用下面的方法，也是使用了伪类<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">.father &#123;</div><div class=\"line\">    *zoom: 1;</div><div class=\"line\">&#125;</div><div class=\"line\">.father:after &#123;</div><div class=\"line\">    content: '';</div><div class=\"line\">    display: table;</div><div class=\"line\">    clear: both;</div><div class=\"line\">&#125;</div><div class=\"line\">.son &#123;</div><div class=\"line\">    float: left;</div><div class=\"line\">    width: 20%;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"son\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"第四种：给父级添加overflow-hidden-auto-scroll-、float-left-right-、position-absolute-、display-inline-block-、zoom-1-五个CSS属性其中之一\"><a href=\"#第四种：给父级添加overflow-hidden-auto-scroll-、float-left-right-、position-absolute-、display-inline-block-、zoom-1-五个CSS属性其中之一\" class=\"headerlink\" title=\"第四种：给父级添加overflow: hidden/auto/scroll;、float: left/right;、position: absolute;、display: inline-block;、zoom: 1;五个CSS属性其中之一\"></a><font color=\"#f00\">第四种：</font>给父级添加<code>overflow: hidden/auto/scroll;</code>、<code>float: left/right;</code>、<code>position: absolute;</code>、<code>display: inline-block;</code>、<code>zoom: 1;</code>五个CSS属性其中之一</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">.father &#123;</div><div class=\"line\">    overflow: hidden/auto/scroll;</div><div class=\"line\">    /*float: left/right;*/</div><div class=\"line\">    /*position: absolute;*/</div><div class=\"line\">    /*display: inline-block;*/</div><div class=\"line\">    /*zoom: 1;*/</div><div class=\"line\">&#125;</div><div class=\"line\">.son &#123;</div><div class=\"line\">    float: left;</div><div class=\"line\">    width: 20%;</div><div class=\"line\">    height: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"father\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"son\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"事件流概述","date":"2016-04-24T09:38:56.000Z","_content":"&emsp;&emsp;`事件流`描述的是从页面中接收事件的顺序，而 IE 和 Netscape 提出了差不多是完全相反的事件流的概念。IE 的事件流是`事件冒泡`，而 Netscape Communicator 的事件流是`事件捕获`。\n### <font style=\"color: #0ff;\">IE的事件冒泡</font>\n&emsp;&emsp;事件冒泡，即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。以下面的页面为例：\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Event Bubbling Example</title>\n</head>\n<body>\n    <div id=\"myDiv\">Click Me</div>\n</body>\n</html>\n```\n&emsp;&emsp;如果你单击了页面中的`<div>`元素，那么这个click事件会按照如下顺序传播：\n(1) `<div>`\n(2) `<body>`\n(3) `<html>`\n(4) `document`\n&emsp;&emsp;IE5.5 及更早的版本中的事件冒泡会跳过`<html>`元素（从`<body>`直接跳到document）。IE9、Firefox、Chrome 和 Safari 则将事件一直冒泡到 window 对象。\n\n### <font style=\"color: #0ff;\">事件捕获</font>\n&emsp;&emsp;事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。事件捕获的用意在于在事件达到预定目标之前捕获它。如果仍以前面的HTML页面作为例子，那么单击`<div>`元素就会以下列顺序触发 click 事件：\n(1) `document`\n(2) `<html>`\n(3) `<body>`\n(4) `<div>`\n&emsp;&emsp;虽然事件捕获是 Netscape Communicator 唯一支持的事件流模型，但 IE9、Safari、Chrome、Opera 和 Firefox 目前也都支持这种事件流模型。尽管“DOM2级事件”规范要求事件应该从 document 对象开始传播，但这些浏览器都是从 window 对象开始捕获事件的。\n\n## 由于老版本的浏览器不支持，因此很少有人使用事件捕获，建议使用事件冒泡，在有特殊需要的时候再使用事件捕获。\n\n### <font style=\"color: #0ff;;\">DOM 事件流</font>\n&emsp;&emsp;“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。它们的发生顺序如下：\n(1) 事件捕获，为截获事件提供了机会，这一过程不会传播到实际的事件目标\n(2) 实际的目标接收到事件，于是事件在此目标上发生，并在事件处理中被看成冒泡阶段的一部分\n(3) 冒泡阶段，可以在这个阶段对事件做出响应，然后事件又传播回文档。\n&emsp;&emsp;仍以前面的HTML页面作为例子，DOM2级事件流如下图：\n![DOM 事件流](event/1.png)\n\n### <font style=\"color: #f00;\">事件处理程序：</font>\n\n&emsp;&emsp;事件处理程序分**HTML事件处理程序**、**DOM0级事件处理程序**、**DOM2级事件处理程序**、**IE事件处理程序**四种。为了兼容各种浏览器，也催生出了**跨浏览器的事件处理程序**。\n#### <font style=\"color: #f0f;\">HTML事件处理程序</font> \n&emsp;&emsp;示例如下：\n```html\n<script>\nfunction showMsg() {\n    alert('Hello world!');\n}\n</script>\n<input type=\"button\" value=\"Click Me\" onclick=\"showMsg()\">\n```\n\n#### <font style=\"color: #f0f;\">DOM0级事件处理程序</font> \n&emsp;&emsp;示例如下：\n```javascript\nvar btn = document.getElementById('myBtn');\nbtn.onclick = function () {\n    // 弹出“myBtn”\n    alert(this.id);\n}\n```\n\n#### <font style=\"color: #f0f;\">DOM2级事件处理程序</font> \n&emsp;&emsp;示例如下：\n```javascript\nvar btn = document.getElementById('myBtn');\nvar handler = function () {\n    alert(this.id);\n};\nbtn.addEventListener('click', handler, false);\n// 指定事件处理程序的名称才能实现移除事件处理程序\nbtn.removeEventListener('click', handler, false);\n```\n\n#### <font style=\"color: #f0f;\">IE事件处理程序</font> \n&emsp;&emsp;示例如下：\n```javascript\nvar btn = document.getElementById('myBtn');\nvar handler = function () {\n    alert(‘Clicked’);\n};\nbtn.attachEvent('onclick', handler);\n// 指定事件处理程序的名称才能实现移除事件处理程序\nbtn.detachEvent('onclick', handler);\n```\n\n#### <font style=\"color: #f0f;\">跨浏览器的事件处理程序</font> \n&emsp;&emsp;既然事件处理程序在不同浏览器上的实现方式不一样，那么能够跨浏览器的事件处理程序的存在就十分重要。关于跨浏览器的事件处理程序，可以观看我的另一篇文章——[兼容浏览器的事件处理程序 EventUtil](http://www.whbxyr.cn/2016/06/24/EventUtil/)！\n\n### <font style=\"color: #f00;\">总结</font>\n在使用事件时，需要考虑如下一些内存与性能方面的问题。\n1.有必要限制一个页面中事件处理程序的数量，数量太多会导致占用大量内存，而且也会让用户感觉页面反应不够灵敏。\n2.建立在事件冒泡机制之上的事件委托技术，可以有效地减少事件处理程序的数量。\n3.建议在浏览器卸载页面之前移除页面中的所有事件处理程序。","source":"_posts/event.md","raw":"---\ntitle: 事件流概述\ndate: 2016-04-24 17:38:56\ncategories: [技术类-前端]\ntags: [JavaScript, DOM]\n---\n&emsp;&emsp;`事件流`描述的是从页面中接收事件的顺序，而 IE 和 Netscape 提出了差不多是完全相反的事件流的概念。IE 的事件流是`事件冒泡`，而 Netscape Communicator 的事件流是`事件捕获`。\n### <font style=\"color: #0ff;\">IE的事件冒泡</font>\n&emsp;&emsp;事件冒泡，即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。以下面的页面为例：\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Event Bubbling Example</title>\n</head>\n<body>\n    <div id=\"myDiv\">Click Me</div>\n</body>\n</html>\n```\n&emsp;&emsp;如果你单击了页面中的`<div>`元素，那么这个click事件会按照如下顺序传播：\n(1) `<div>`\n(2) `<body>`\n(3) `<html>`\n(4) `document`\n&emsp;&emsp;IE5.5 及更早的版本中的事件冒泡会跳过`<html>`元素（从`<body>`直接跳到document）。IE9、Firefox、Chrome 和 Safari 则将事件一直冒泡到 window 对象。\n\n### <font style=\"color: #0ff;\">事件捕获</font>\n&emsp;&emsp;事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。事件捕获的用意在于在事件达到预定目标之前捕获它。如果仍以前面的HTML页面作为例子，那么单击`<div>`元素就会以下列顺序触发 click 事件：\n(1) `document`\n(2) `<html>`\n(3) `<body>`\n(4) `<div>`\n&emsp;&emsp;虽然事件捕获是 Netscape Communicator 唯一支持的事件流模型，但 IE9、Safari、Chrome、Opera 和 Firefox 目前也都支持这种事件流模型。尽管“DOM2级事件”规范要求事件应该从 document 对象开始传播，但这些浏览器都是从 window 对象开始捕获事件的。\n\n## 由于老版本的浏览器不支持，因此很少有人使用事件捕获，建议使用事件冒泡，在有特殊需要的时候再使用事件捕获。\n\n### <font style=\"color: #0ff;;\">DOM 事件流</font>\n&emsp;&emsp;“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。它们的发生顺序如下：\n(1) 事件捕获，为截获事件提供了机会，这一过程不会传播到实际的事件目标\n(2) 实际的目标接收到事件，于是事件在此目标上发生，并在事件处理中被看成冒泡阶段的一部分\n(3) 冒泡阶段，可以在这个阶段对事件做出响应，然后事件又传播回文档。\n&emsp;&emsp;仍以前面的HTML页面作为例子，DOM2级事件流如下图：\n![DOM 事件流](event/1.png)\n\n### <font style=\"color: #f00;\">事件处理程序：</font>\n\n&emsp;&emsp;事件处理程序分**HTML事件处理程序**、**DOM0级事件处理程序**、**DOM2级事件处理程序**、**IE事件处理程序**四种。为了兼容各种浏览器，也催生出了**跨浏览器的事件处理程序**。\n#### <font style=\"color: #f0f;\">HTML事件处理程序</font> \n&emsp;&emsp;示例如下：\n```html\n<script>\nfunction showMsg() {\n    alert('Hello world!');\n}\n</script>\n<input type=\"button\" value=\"Click Me\" onclick=\"showMsg()\">\n```\n\n#### <font style=\"color: #f0f;\">DOM0级事件处理程序</font> \n&emsp;&emsp;示例如下：\n```javascript\nvar btn = document.getElementById('myBtn');\nbtn.onclick = function () {\n    // 弹出“myBtn”\n    alert(this.id);\n}\n```\n\n#### <font style=\"color: #f0f;\">DOM2级事件处理程序</font> \n&emsp;&emsp;示例如下：\n```javascript\nvar btn = document.getElementById('myBtn');\nvar handler = function () {\n    alert(this.id);\n};\nbtn.addEventListener('click', handler, false);\n// 指定事件处理程序的名称才能实现移除事件处理程序\nbtn.removeEventListener('click', handler, false);\n```\n\n#### <font style=\"color: #f0f;\">IE事件处理程序</font> \n&emsp;&emsp;示例如下：\n```javascript\nvar btn = document.getElementById('myBtn');\nvar handler = function () {\n    alert(‘Clicked’);\n};\nbtn.attachEvent('onclick', handler);\n// 指定事件处理程序的名称才能实现移除事件处理程序\nbtn.detachEvent('onclick', handler);\n```\n\n#### <font style=\"color: #f0f;\">跨浏览器的事件处理程序</font> \n&emsp;&emsp;既然事件处理程序在不同浏览器上的实现方式不一样，那么能够跨浏览器的事件处理程序的存在就十分重要。关于跨浏览器的事件处理程序，可以观看我的另一篇文章——[兼容浏览器的事件处理程序 EventUtil](http://www.whbxyr.cn/2016/06/24/EventUtil/)！\n\n### <font style=\"color: #f00;\">总结</font>\n在使用事件时，需要考虑如下一些内存与性能方面的问题。\n1.有必要限制一个页面中事件处理程序的数量，数量太多会导致占用大量内存，而且也会让用户感觉页面反应不够灵敏。\n2.建立在事件冒泡机制之上的事件委托技术，可以有效地减少事件处理程序的数量。\n3.建议在浏览器卸载页面之前移除页面中的所有事件处理程序。","slug":"event","published":1,"updated":"2017-04-25T14:02:10.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3032q000simw4ba91cjue","content":"<p>&emsp;&emsp;<code>事件流</code>描述的是从页面中接收事件的顺序，而 IE 和 Netscape 提出了差不多是完全相反的事件流的概念。IE 的事件流是<code>事件冒泡</code>，而 Netscape Communicator 的事件流是<code>事件捕获</code>。</p>\n<h3 id=\"IE的事件冒泡\"><a href=\"#IE的事件冒泡\" class=\"headerlink\" title=\"IE的事件冒泡\"></a><font style=\"color: #0ff;\">IE的事件冒泡</font></h3><p>&emsp;&emsp;事件冒泡，即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。以下面的页面为例：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Event Bubbling Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDiv\"</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;如果你单击了页面中的<code>&lt;div&gt;</code>元素，那么这个click事件会按照如下顺序传播：<br>(1) <code>&lt;div&gt;</code><br>(2) <code>&lt;body&gt;</code><br>(3) <code>&lt;html&gt;</code><br>(4) <code>document</code><br>&emsp;&emsp;IE5.5 及更早的版本中的事件冒泡会跳过<code>&lt;html&gt;</code>元素（从<code>&lt;body&gt;</code>直接跳到document）。IE9、Firefox、Chrome 和 Safari 则将事件一直冒泡到 window 对象。</p>\n<h3 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a><font style=\"color: #0ff;\">事件捕获</font></h3><p>&emsp;&emsp;事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。事件捕获的用意在于在事件达到预定目标之前捕获它。如果仍以前面的HTML页面作为例子，那么单击<code>&lt;div&gt;</code>元素就会以下列顺序触发 click 事件：<br>(1) <code>document</code><br>(2) <code>&lt;html&gt;</code><br>(3) <code>&lt;body&gt;</code><br>(4) <code>&lt;div&gt;</code><br>&emsp;&emsp;虽然事件捕获是 Netscape Communicator 唯一支持的事件流模型，但 IE9、Safari、Chrome、Opera 和 Firefox 目前也都支持这种事件流模型。尽管“DOM2级事件”规范要求事件应该从 document 对象开始传播，但这些浏览器都是从 window 对象开始捕获事件的。</p>\n<h2 id=\"由于老版本的浏览器不支持，因此很少有人使用事件捕获，建议使用事件冒泡，在有特殊需要的时候再使用事件捕获。\"><a href=\"#由于老版本的浏览器不支持，因此很少有人使用事件捕获，建议使用事件冒泡，在有特殊需要的时候再使用事件捕获。\" class=\"headerlink\" title=\"由于老版本的浏览器不支持，因此很少有人使用事件捕获，建议使用事件冒泡，在有特殊需要的时候再使用事件捕获。\"></a>由于老版本的浏览器不支持，因此很少有人使用事件捕获，建议使用事件冒泡，在有特殊需要的时候再使用事件捕获。</h2><h3 id=\"DOM-事件流\"><a href=\"#DOM-事件流\" class=\"headerlink\" title=\"DOM 事件流\"></a><font style=\"color: #0ff;;\">DOM 事件流</font></h3><p>&emsp;&emsp;“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。它们的发生顺序如下：<br>(1) 事件捕获，为截获事件提供了机会，这一过程不会传播到实际的事件目标<br>(2) 实际的目标接收到事件，于是事件在此目标上发生，并在事件处理中被看成冒泡阶段的一部分<br>(3) 冒泡阶段，可以在这个阶段对事件做出响应，然后事件又传播回文档。<br>&emsp;&emsp;仍以前面的HTML页面作为例子，DOM2级事件流如下图：<br><img src=\"/2016/04/24/event/1.png\" alt=\"DOM 事件流\"></p>\n<h3 id=\"事件处理程序：\"><a href=\"#事件处理程序：\" class=\"headerlink\" title=\"事件处理程序：\"></a><font style=\"color: #f00;\">事件处理程序：</font></h3><p>&emsp;&emsp;事件处理程序分<strong>HTML事件处理程序</strong>、<strong>DOM0级事件处理程序</strong>、<strong>DOM2级事件处理程序</strong>、<strong>IE事件处理程序</strong>四种。为了兼容各种浏览器，也催生出了<strong>跨浏览器的事件处理程序</strong>。</p>\n<h4 id=\"HTML事件处理程序\"><a href=\"#HTML事件处理程序\" class=\"headerlink\" title=\"HTML事件处理程序\"></a><font style=\"color: #f0f;\">HTML事件处理程序</font></h4><p>&emsp;&emsp;示例如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showMsg</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Hello world!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Click Me\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"showMsg()\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"DOM0级事件处理程序\"><a href=\"#DOM0级事件处理程序\" class=\"headerlink\" title=\"DOM0级事件处理程序\"></a><font style=\"color: #f0f;\">DOM0级事件处理程序</font></h4><p>&emsp;&emsp;示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myBtn'</span>);</div><div class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 弹出“myBtn”</span></div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"DOM2级事件处理程序\"><a href=\"#DOM2级事件处理程序\" class=\"headerlink\" title=\"DOM2级事件处理程序\"></a><font style=\"color: #f0f;\">DOM2级事件处理程序</font></h4><p>&emsp;&emsp;示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myBtn'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> handler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.id);</div><div class=\"line\">&#125;;</div><div class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>, handler, <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">// 指定事件处理程序的名称才能实现移除事件处理程序</span></div><div class=\"line\">btn.removeEventListener(<span class=\"string\">'click'</span>, handler, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"IE事件处理程序\"><a href=\"#IE事件处理程序\" class=\"headerlink\" title=\"IE事件处理程序\"></a><font style=\"color: #f0f;\">IE事件处理程序</font></h4><p>&emsp;&emsp;示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myBtn'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> handler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(‘Clicked’);</div><div class=\"line\">&#125;;</div><div class=\"line\">btn.attachEvent(<span class=\"string\">'onclick'</span>, handler);</div><div class=\"line\"><span class=\"comment\">// 指定事件处理程序的名称才能实现移除事件处理程序</span></div><div class=\"line\">btn.detachEvent(<span class=\"string\">'onclick'</span>, handler);</div></pre></td></tr></table></figure></p>\n<h4 id=\"跨浏览器的事件处理程序\"><a href=\"#跨浏览器的事件处理程序\" class=\"headerlink\" title=\"跨浏览器的事件处理程序\"></a><font style=\"color: #f0f;\">跨浏览器的事件处理程序</font></h4><p>&emsp;&emsp;既然事件处理程序在不同浏览器上的实现方式不一样，那么能够跨浏览器的事件处理程序的存在就十分重要。关于跨浏览器的事件处理程序，可以观看我的另一篇文章——<a href=\"http://www.whbxyr.cn/2016/06/24/EventUtil/\">兼容浏览器的事件处理程序 EventUtil</a>！</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><font style=\"color: #f00;\">总结</font></h3><p>在使用事件时，需要考虑如下一些内存与性能方面的问题。<br>1.有必要限制一个页面中事件处理程序的数量，数量太多会导致占用大量内存，而且也会让用户感觉页面反应不够灵敏。<br>2.建立在事件冒泡机制之上的事件委托技术，可以有效地减少事件处理程序的数量。<br>3.建议在浏览器卸载页面之前移除页面中的所有事件处理程序。</p>\n","excerpt":"","more":"<p>&emsp;&emsp;<code>事件流</code>描述的是从页面中接收事件的顺序，而 IE 和 Netscape 提出了差不多是完全相反的事件流的概念。IE 的事件流是<code>事件冒泡</code>，而 Netscape Communicator 的事件流是<code>事件捕获</code>。</p>\n<h3 id=\"IE的事件冒泡\"><a href=\"#IE的事件冒泡\" class=\"headerlink\" title=\"IE的事件冒泡\"></a><font style=\"color: #0ff;\">IE的事件冒泡</font></h3><p>&emsp;&emsp;事件冒泡，即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。以下面的页面为例：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Event Bubbling Example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDiv\"</span>&gt;</span>Click Me<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;如果你单击了页面中的<code>&lt;div&gt;</code>元素，那么这个click事件会按照如下顺序传播：<br>(1) <code>&lt;div&gt;</code><br>(2) <code>&lt;body&gt;</code><br>(3) <code>&lt;html&gt;</code><br>(4) <code>document</code><br>&emsp;&emsp;IE5.5 及更早的版本中的事件冒泡会跳过<code>&lt;html&gt;</code>元素（从<code>&lt;body&gt;</code>直接跳到document）。IE9、Firefox、Chrome 和 Safari 则将事件一直冒泡到 window 对象。</p>\n<h3 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a><font style=\"color: #0ff;\">事件捕获</font></h3><p>&emsp;&emsp;事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。事件捕获的用意在于在事件达到预定目标之前捕获它。如果仍以前面的HTML页面作为例子，那么单击<code>&lt;div&gt;</code>元素就会以下列顺序触发 click 事件：<br>(1) <code>document</code><br>(2) <code>&lt;html&gt;</code><br>(3) <code>&lt;body&gt;</code><br>(4) <code>&lt;div&gt;</code><br>&emsp;&emsp;虽然事件捕获是 Netscape Communicator 唯一支持的事件流模型，但 IE9、Safari、Chrome、Opera 和 Firefox 目前也都支持这种事件流模型。尽管“DOM2级事件”规范要求事件应该从 document 对象开始传播，但这些浏览器都是从 window 对象开始捕获事件的。</p>\n<h2 id=\"由于老版本的浏览器不支持，因此很少有人使用事件捕获，建议使用事件冒泡，在有特殊需要的时候再使用事件捕获。\"><a href=\"#由于老版本的浏览器不支持，因此很少有人使用事件捕获，建议使用事件冒泡，在有特殊需要的时候再使用事件捕获。\" class=\"headerlink\" title=\"由于老版本的浏览器不支持，因此很少有人使用事件捕获，建议使用事件冒泡，在有特殊需要的时候再使用事件捕获。\"></a>由于老版本的浏览器不支持，因此很少有人使用事件捕获，建议使用事件冒泡，在有特殊需要的时候再使用事件捕获。</h2><h3 id=\"DOM-事件流\"><a href=\"#DOM-事件流\" class=\"headerlink\" title=\"DOM 事件流\"></a><font style=\"color: #0ff;;\">DOM 事件流</font></h3><p>&emsp;&emsp;“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。它们的发生顺序如下：<br>(1) 事件捕获，为截获事件提供了机会，这一过程不会传播到实际的事件目标<br>(2) 实际的目标接收到事件，于是事件在此目标上发生，并在事件处理中被看成冒泡阶段的一部分<br>(3) 冒泡阶段，可以在这个阶段对事件做出响应，然后事件又传播回文档。<br>&emsp;&emsp;仍以前面的HTML页面作为例子，DOM2级事件流如下图：<br><img src=\"/2016/04/24/event/1.png\" alt=\"DOM 事件流\"></p>\n<h3 id=\"事件处理程序：\"><a href=\"#事件处理程序：\" class=\"headerlink\" title=\"事件处理程序：\"></a><font style=\"color: #f00;\">事件处理程序：</font></h3><p>&emsp;&emsp;事件处理程序分<strong>HTML事件处理程序</strong>、<strong>DOM0级事件处理程序</strong>、<strong>DOM2级事件处理程序</strong>、<strong>IE事件处理程序</strong>四种。为了兼容各种浏览器，也催生出了<strong>跨浏览器的事件处理程序</strong>。</p>\n<h4 id=\"HTML事件处理程序\"><a href=\"#HTML事件处理程序\" class=\"headerlink\" title=\"HTML事件处理程序\"></a><font style=\"color: #f0f;\">HTML事件处理程序</font></h4><p>&emsp;&emsp;示例如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showMsg</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'Hello world!'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Click Me\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"showMsg()\"</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"DOM0级事件处理程序\"><a href=\"#DOM0级事件处理程序\" class=\"headerlink\" title=\"DOM0级事件处理程序\"></a><font style=\"color: #f0f;\">DOM0级事件处理程序</font></h4><p>&emsp;&emsp;示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myBtn'</span>);</div><div class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 弹出“myBtn”</span></div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"DOM2级事件处理程序\"><a href=\"#DOM2级事件处理程序\" class=\"headerlink\" title=\"DOM2级事件处理程序\"></a><font style=\"color: #f0f;\">DOM2级事件处理程序</font></h4><p>&emsp;&emsp;示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myBtn'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> handler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.id);</div><div class=\"line\">&#125;;</div><div class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>, handler, <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">// 指定事件处理程序的名称才能实现移除事件处理程序</span></div><div class=\"line\">btn.removeEventListener(<span class=\"string\">'click'</span>, handler, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"IE事件处理程序\"><a href=\"#IE事件处理程序\" class=\"headerlink\" title=\"IE事件处理程序\"></a><font style=\"color: #f0f;\">IE事件处理程序</font></h4><p>&emsp;&emsp;示例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myBtn'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> handler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(‘Clicked’);</div><div class=\"line\">&#125;;</div><div class=\"line\">btn.attachEvent(<span class=\"string\">'onclick'</span>, handler);</div><div class=\"line\"><span class=\"comment\">// 指定事件处理程序的名称才能实现移除事件处理程序</span></div><div class=\"line\">btn.detachEvent(<span class=\"string\">'onclick'</span>, handler);</div></pre></td></tr></table></figure></p>\n<h4 id=\"跨浏览器的事件处理程序\"><a href=\"#跨浏览器的事件处理程序\" class=\"headerlink\" title=\"跨浏览器的事件处理程序\"></a><font style=\"color: #f0f;\">跨浏览器的事件处理程序</font></h4><p>&emsp;&emsp;既然事件处理程序在不同浏览器上的实现方式不一样，那么能够跨浏览器的事件处理程序的存在就十分重要。关于跨浏览器的事件处理程序，可以观看我的另一篇文章——<a href=\"http://www.whbxyr.cn/2016/06/24/EventUtil/\">兼容浏览器的事件处理程序 EventUtil</a>！</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><font style=\"color: #f00;\">总结</font></h3><p>在使用事件时，需要考虑如下一些内存与性能方面的问题。<br>1.有必要限制一个页面中事件处理程序的数量，数量太多会导致占用大量内存，而且也会让用户感觉页面反应不够灵敏。<br>2.建立在事件冒泡机制之上的事件委托技术，可以有效地减少事件处理程序的数量。<br>3.建议在浏览器卸载页面之前移除页面中的所有事件处理程序。</p>\n"},{"title":"为hexo博客添加独立域名","date":"2017-04-04T05:07:04.000Z","_content":"#### 一共需要两个步骤：\n1.添加一条CNAME记录，主机记录随便写（根据个人需要，比如www，url便为www.域名.根域名），记录值为你的github page的地址，比如我的就是[whbxyr.github.io](https://whbxyr.github.io/)。如下图：\n![添加CNAME记录](hexoCname/cname.png)\n2.在你放置hexo博客的github仓库的Settings里设置Custom domain，设置为你要的url，比如我的就是[www.whbxyr.cn](http://www.whbxyr.cn/)，如下图：\n![设置Custom domain](hexoCname/domain.png)\n  或者在你的本地hexo博客目录下的source文件夹里添加一个文件，文件名为CNAME，在其中输入你的域名，比如我的就是[www.whbxyr.cn](http://www.whbxyr.cn/)，如下图：\n![添加CNAME文件](hexoCname/cnamefile.png)\n","source":"_posts/hexoCname.md","raw":"---\ntitle: 为hexo博客添加独立域名\ndate: 2017-04-04 13:07:04\ncategories: [技术类-奇淫巧技]\ntags: [奇淫巧技]\n---\n#### 一共需要两个步骤：\n1.添加一条CNAME记录，主机记录随便写（根据个人需要，比如www，url便为www.域名.根域名），记录值为你的github page的地址，比如我的就是[whbxyr.github.io](https://whbxyr.github.io/)。如下图：\n![添加CNAME记录](hexoCname/cname.png)\n2.在你放置hexo博客的github仓库的Settings里设置Custom domain，设置为你要的url，比如我的就是[www.whbxyr.cn](http://www.whbxyr.cn/)，如下图：\n![设置Custom domain](hexoCname/domain.png)\n  或者在你的本地hexo博客目录下的source文件夹里添加一个文件，文件名为CNAME，在其中输入你的域名，比如我的就是[www.whbxyr.cn](http://www.whbxyr.cn/)，如下图：\n![添加CNAME文件](hexoCname/cnamefile.png)\n","slug":"hexoCname","published":1,"updated":"2017-04-19T14:31:53.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3032s000ximw4u5marknq","content":"<h4 id=\"一共需要两个步骤：\"><a href=\"#一共需要两个步骤：\" class=\"headerlink\" title=\"一共需要两个步骤：\"></a>一共需要两个步骤：</h4><p>1.添加一条CNAME记录，主机记录随便写（根据个人需要，比如www，url便为www.域名.根域名），记录值为你的github page的地址，比如我的就是<a href=\"https://whbxyr.github.io/\" target=\"_blank\" rel=\"external\">whbxyr.github.io</a>。如下图：<br><img src=\"/2017/04/04/hexoCname/cname.png\" alt=\"添加CNAME记录\"><br>2.在你放置hexo博客的github仓库的Settings里设置Custom domain，设置为你要的url，比如我的就是<a href=\"http://www.whbxyr.cn/\">www.whbxyr.cn</a>，如下图：<br><img src=\"/2017/04/04/hexoCname/domain.png\" alt=\"设置Custom domain\"><br>  或者在你的本地hexo博客目录下的source文件夹里添加一个文件，文件名为CNAME，在其中输入你的域名，比如我的就是<a href=\"http://www.whbxyr.cn/\">www.whbxyr.cn</a>，如下图：<br><img src=\"/2017/04/04/hexoCname/cnamefile.png\" alt=\"添加CNAME文件\"></p>\n","excerpt":"","more":"<h4 id=\"一共需要两个步骤：\"><a href=\"#一共需要两个步骤：\" class=\"headerlink\" title=\"一共需要两个步骤：\"></a>一共需要两个步骤：</h4><p>1.添加一条CNAME记录，主机记录随便写（根据个人需要，比如www，url便为www.域名.根域名），记录值为你的github page的地址，比如我的就是<a href=\"https://whbxyr.github.io/\">whbxyr.github.io</a>。如下图：<br><img src=\"/2017/04/04/hexoCname/cname.png\" alt=\"添加CNAME记录\"><br>2.在你放置hexo博客的github仓库的Settings里设置Custom domain，设置为你要的url，比如我的就是<a href=\"http://www.whbxyr.cn/\">www.whbxyr.cn</a>，如下图：<br><img src=\"/2017/04/04/hexoCname/domain.png\" alt=\"设置Custom domain\"><br>  或者在你的本地hexo博客目录下的source文件夹里添加一个文件，文件名为CNAME，在其中输入你的域名，比如我的就是<a href=\"http://www.whbxyr.cn/\">www.whbxyr.cn</a>，如下图：<br><img src=\"/2017/04/04/hexoCname/cnamefile.png\" alt=\"添加CNAME文件\"></p>\n"},{"title":"iframe的优缺点","date":"2016-04-15T13:00:59.000Z","_content":"### iframe的优点\n1. iframe能够将嵌入的网页原封不动地显示出来\n2. 用iframe来实现具有统一风格的网页（相同的头部、底部）\n3. 修改方便，多个网页引用iframe，修改一处实现全部修改\n\n### iframe的缺点\n1. iframe框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差\n2. 搜索引擎的检索程序无法解读这种页面，不利于SEO\n3. iframe会阻塞主页面的Onload事件\n4. 会影响页面的并行加载，解决方法是使用js动态给iframe的src加载页面内容，示例代码如下：\n```html\n<iframe id=\"iframe\"></iframe>\n<script>\ndocument.getElementById(\"iframe\").src = \"a2.html\";\n</script>\n```","source":"_posts/iframe.md","raw":"---\ntitle: iframe的优缺点\ndate: 2016-04-15 21:00:59\ncategories: [技术类-前端]\ntags: [html]\n---\n### iframe的优点\n1. iframe能够将嵌入的网页原封不动地显示出来\n2. 用iframe来实现具有统一风格的网页（相同的头部、底部）\n3. 修改方便，多个网页引用iframe，修改一处实现全部修改\n\n### iframe的缺点\n1. iframe框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差\n2. 搜索引擎的检索程序无法解读这种页面，不利于SEO\n3. iframe会阻塞主页面的Onload事件\n4. 会影响页面的并行加载，解决方法是使用js动态给iframe的src加载页面内容，示例代码如下：\n```html\n<iframe id=\"iframe\"></iframe>\n<script>\ndocument.getElementById(\"iframe\").src = \"a2.html\";\n</script>\n```","slug":"iframe","published":1,"updated":"2017-04-19T14:31:05.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3032u0010imw4hconrp9p","content":"<h3 id=\"iframe的优点\"><a href=\"#iframe的优点\" class=\"headerlink\" title=\"iframe的优点\"></a>iframe的优点</h3><ol>\n<li>iframe能够将嵌入的网页原封不动地显示出来</li>\n<li>用iframe来实现具有统一风格的网页（相同的头部、底部）</li>\n<li>修改方便，多个网页引用iframe，修改一处实现全部修改</li>\n</ol>\n<h3 id=\"iframe的缺点\"><a href=\"#iframe的缺点\" class=\"headerlink\" title=\"iframe的缺点\"></a>iframe的缺点</h3><ol>\n<li>iframe框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差</li>\n<li>搜索引擎的检索程序无法解读这种页面，不利于SEO</li>\n<li>iframe会阻塞主页面的Onload事件</li>\n<li>会影响页面的并行加载，解决方法是使用js动态给iframe的src加载页面内容，示例代码如下：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">id</span>=<span class=\"string\">\"iframe\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"iframe\"</span>).src = <span class=\"string\">\"a2.html\"</span>;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<h3 id=\"iframe的优点\"><a href=\"#iframe的优点\" class=\"headerlink\" title=\"iframe的优点\"></a>iframe的优点</h3><ol>\n<li>iframe能够将嵌入的网页原封不动地显示出来</li>\n<li>用iframe来实现具有统一风格的网页（相同的头部、底部）</li>\n<li>修改方便，多个网页引用iframe，修改一处实现全部修改</li>\n</ol>\n<h3 id=\"iframe的缺点\"><a href=\"#iframe的缺点\" class=\"headerlink\" title=\"iframe的缺点\"></a>iframe的缺点</h3><ol>\n<li>iframe框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差</li>\n<li>搜索引擎的检索程序无法解读这种页面，不利于SEO</li>\n<li>iframe会阻塞主页面的Onload事件</li>\n<li>会影响页面的并行加载，解决方法是使用js动态给iframe的src加载页面内容，示例代码如下：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">id</span>=<span class=\"string\">\"iframe\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"iframe\"</span>).src = <span class=\"string\">\"a2.html\"</span>;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"详解 JSON 以及 JSON 在JS中的使用","date":"2015-03-16T08:03:50.000Z","_content":"## 简介\n&emsp;&emsp;`JSON`是一种数据结构而不是一种编程语言，它利用了JS中的一些模式来表示结构化数据，虽然与JS具有相同的语法形式，但是JSON并不从属于JS。另外，并不是只有JS才使用JSON，很对编程语言都有针对JSON的解析器和序列化器。\n## JSON的语法\n#### 一. 取值类型\n&emsp;&emsp;**简单值**： 可以在JSON中表示字符串、数值、布尔值和null，但不支持特殊值`undefined`。\n&emsp;&emsp;**对象**： 复杂数据类型，表示一组无序的键值对，每个键值对中的值可以是简单值，也可以是复杂数据类型的值。\n&emsp;&emsp;**数组**： 复杂数据类型，表示一组有序的值的列表，可以通过数值索引来访问其中的值，该值也可以是简单值、对象或者数组。\n#### 二. 语法\n&emsp;&emsp;JSON没有变量的概念，末尾没有分号，属性必须加双引号，举例如下：\n```json\n{\n    \"name\": \"Ray\",\n    \"age\": 20,\n    \"school\": {\n        \"name\": \"GDUT\",\n        \"location\": \"CHINA\"\n    }\n}\n```\n&emsp;&emsp;JSON数组：\n```json\n// 示例一\n[20, \"hi\", true]\n// 示例二\n[\n    {\n        \"title\": \"Story One\",\n        \"authors\": [\n            \"Ray\"\n        ],\n        \"edition\": 3,\n        \"year\": 2017\n    },\n    {\n        \"title\": \"Story Two\",\n        \"authors\": [\n            \"Tom\"\n        ],\n        \"edition\": 2,\n        \"year\": 2016\n    },\n    {\n        \"title\": \"Story Three\",\n        \"authors\": [\n            \"Amy\",\n            \"Sara\",\n            \"Jack\"\n        ],\n        \"edition\": 4,\n        \"year\": 2014\n    }\n]\n```\n## 解析与序列化\n&emsp;&emsp;ECMAScript 5对解析`JSON`的行为进行规范，定义了全局对象JSON，支持这个对象的浏览器有 IE 8+、Firefox 3.5+、Safari 4+、Chrome 和 Opera 10.5+。对于较早的、不能原生支持JSON解析的浏览器，可以使用一个shim：`https://github.com/douglascrockford/JSON-js`，这比使用eval()对JSON数据结构求值要安全，避免了一些恶意代码的执行。\n#### 一. 序列化\n&emsp;&emsp;`JSON.stringify()`用于将JS对象序列化为JSON字符串。在序列化JS对象时，所有函数及原型成员都会被有意忽略，不体现在结果中，此外，值为undefined的任何属性也会被跳过。举例如下：\n```javascript\nvar book = {\n    title: \"Story One\",\n    authors: [\n        \"Ray\"\n    ],\n    edition: 3,\n    year: 2017\n};\nvar jsonText = JSON.stringify(book);\n// jsonText中的字符串： {\"title\":\"Story One\",\"authors\":[\"Ray\"],\"edition\":3,\"year\":2017}\n```\n&emsp;&emsp;`JSON.stringify()`还可以另外接收两个可选的参数，第一个参数是个过滤器，值为一个数组或者一个函数，举例如下：\n```javascript\nvar book = {\n    \"title\": \"Story One\",\n    \"authors\": [\n        \"Ray\"\n    ],\n    edition: 3,\n    year: 2017\n};\n// 第二个参数为一个数组，表示只保留相应的属性\nvar jsonText = JSON.stringify(book, [\"title\", \"edition\"]);\n// jsonText中的字符串： {\"title\":\"Story One\",\"edition\":3}\n// 第二个参数为一个函数，通过返回指定相应属性的值，返回undefined表示删除该属性。实际上，第一次调用这个函数过滤器，传入的是一个空字符串，而值就是book对象。\nvar jsonText = JSON.stringify(book, function (key, value) {\n    switch (key) {\n        case \"authors\":\n            return value.join(\",\");\n        case \"year\":\n            return 5000;\n        case \"edition\":\n            return undefined;\n        default:\n            return value;\n    };\n});\n// jsonText中的字符串： {\"title\":\"Story One\",\"authors\":\"Ray\",\"year\":5000}\n```\n&emsp;&emsp;`JSON.stringify()`接收最后一个（第三个）参数来表示是否在JSON字符串中保留缩进。举例如下：\n```javascript\nvar book = {\n    \"title\": \"Story One\",\n    \"authors\": [\n        \"Ray\"\n    ],\n    edition: 3,\n    year: 2017\n};\n// 第三个参数为一个数值，表示每个级别缩进的空格数\nvar jsonText = JSON.stringify(book, null, 4);\n/* jsonText中的字符串：\n{\n    \"title\": \"Story One\",\n    \"authors\": [\n        \"Ray\"\n    ],\n    \"edition\": 3,\n    \"year\": 2017\n}\n*/\n// 第三个参数为一个字符串，使用这个字符串作为缩进字符\nvar jsonText = JSON.stringify(book, null, \" - -\");\n/* jsonText中的字符串：\n{\n - -\"title\": \"Story One\",\n - -\"authors\": [\n - - - -\"Ray\"\n - -],\n - -\"edition\": 3,\n - -\"year\": 2017\n}\n*/\n```\n&emsp;&emsp;给对象定义`toJSON()`方法，返回指定的JSON数据格式。可以为任何对象添加toJSON()方法。举例如下：\n```javascript\nvar book = {\n    \"title\": \"Story One\",\n    \"authors\": [\n        \"Ray\"\n    ],\n    edition: 3,\n    year: 2017,\n    toJSON: function () {\n        return this.title;\n    }\n};\nvar jsonText = JSON.stringify(book);\n// jsonText中的字符串(包括了两个双引号)： \"Story One\"\n```\n&emsp;&emsp;toJSON()可以作为函数过滤器的补充，因此理解序列化的内部顺序十分重要，假设把一个对象传入JSON.stringify()，序列化该对象的顺序如下：\n（1）如果存在toJSON()方法而且能通过它取得有效的值，则调用该方法。否则，返回对象自身。\n（2）如果提供了第二个参数，应用这个函数过滤器。传入函数过滤器的值是第（1）步返回的值。\n（3）对第（2）步返回的每个值进行相应的序列化。\n（4）如果提供了第三个参数，执行相应的格式化。\n#### 二. 解析\n&emsp;&emsp;`JSON.parse()`用于将JSON字符串解析为原生的JS值。\n&emsp;&emsp;`JSON.parse()`还可以接收另外一个参数，该参数是一个函数，称作还原函数，该还原函数返回undefined，表示要从结果中删除相应的键，如果返回其他值，则将该值插入到结果中。举例如下：\n```javascript\nvar book = {\n    \"title\": \"Story One\",\n    \"authors\": [\n        \"Ray\"\n    ],\n    edition: 3,\n    year: 2015,\n    releaseDate: new Date(2015, 3, 1)\n};\nvar jsonText = JSON.stringify(book);\nvar bookCopy = JSON.parse(jsonText, function (key, value) {\n    if (key === \"releaseDate\") {\n        return new Date(value);\n    }\n    else {\n        return value;\n    }\n});\n// 执行 bookCopy.releaseDate.getFullYear()，得到数值2015\n```\n\n## 总结\n&emsp;&emsp;JSON是一种轻量级的数据格式，可以简化表示复杂数据结构的工作量。JSON使用JS语法的子集表示对象、数组、字符串、数值、布尔值和null。即使XML也能表示同样复杂的数据结果，但是JSON没有XML那么繁琐，而且在JS中使用十分便利。我们可以使用**ECMAScript 5**定义的原生JSON对象的两个方法**stringify()**以及**parse()**来将JS对象序列化为JSON字符串或者将JSON字符串数据解析为JS对象。","source":"_posts/json.md","raw":"---\ntitle: 详解 JSON 以及 JSON 在JS中的使用\ndate: 2015-03-16 16:03:50\ncategories: [技术类-前端]\ntags: [JavaScript]\n---\n## 简介\n&emsp;&emsp;`JSON`是一种数据结构而不是一种编程语言，它利用了JS中的一些模式来表示结构化数据，虽然与JS具有相同的语法形式，但是JSON并不从属于JS。另外，并不是只有JS才使用JSON，很对编程语言都有针对JSON的解析器和序列化器。\n## JSON的语法\n#### 一. 取值类型\n&emsp;&emsp;**简单值**： 可以在JSON中表示字符串、数值、布尔值和null，但不支持特殊值`undefined`。\n&emsp;&emsp;**对象**： 复杂数据类型，表示一组无序的键值对，每个键值对中的值可以是简单值，也可以是复杂数据类型的值。\n&emsp;&emsp;**数组**： 复杂数据类型，表示一组有序的值的列表，可以通过数值索引来访问其中的值，该值也可以是简单值、对象或者数组。\n#### 二. 语法\n&emsp;&emsp;JSON没有变量的概念，末尾没有分号，属性必须加双引号，举例如下：\n```json\n{\n    \"name\": \"Ray\",\n    \"age\": 20,\n    \"school\": {\n        \"name\": \"GDUT\",\n        \"location\": \"CHINA\"\n    }\n}\n```\n&emsp;&emsp;JSON数组：\n```json\n// 示例一\n[20, \"hi\", true]\n// 示例二\n[\n    {\n        \"title\": \"Story One\",\n        \"authors\": [\n            \"Ray\"\n        ],\n        \"edition\": 3,\n        \"year\": 2017\n    },\n    {\n        \"title\": \"Story Two\",\n        \"authors\": [\n            \"Tom\"\n        ],\n        \"edition\": 2,\n        \"year\": 2016\n    },\n    {\n        \"title\": \"Story Three\",\n        \"authors\": [\n            \"Amy\",\n            \"Sara\",\n            \"Jack\"\n        ],\n        \"edition\": 4,\n        \"year\": 2014\n    }\n]\n```\n## 解析与序列化\n&emsp;&emsp;ECMAScript 5对解析`JSON`的行为进行规范，定义了全局对象JSON，支持这个对象的浏览器有 IE 8+、Firefox 3.5+、Safari 4+、Chrome 和 Opera 10.5+。对于较早的、不能原生支持JSON解析的浏览器，可以使用一个shim：`https://github.com/douglascrockford/JSON-js`，这比使用eval()对JSON数据结构求值要安全，避免了一些恶意代码的执行。\n#### 一. 序列化\n&emsp;&emsp;`JSON.stringify()`用于将JS对象序列化为JSON字符串。在序列化JS对象时，所有函数及原型成员都会被有意忽略，不体现在结果中，此外，值为undefined的任何属性也会被跳过。举例如下：\n```javascript\nvar book = {\n    title: \"Story One\",\n    authors: [\n        \"Ray\"\n    ],\n    edition: 3,\n    year: 2017\n};\nvar jsonText = JSON.stringify(book);\n// jsonText中的字符串： {\"title\":\"Story One\",\"authors\":[\"Ray\"],\"edition\":3,\"year\":2017}\n```\n&emsp;&emsp;`JSON.stringify()`还可以另外接收两个可选的参数，第一个参数是个过滤器，值为一个数组或者一个函数，举例如下：\n```javascript\nvar book = {\n    \"title\": \"Story One\",\n    \"authors\": [\n        \"Ray\"\n    ],\n    edition: 3,\n    year: 2017\n};\n// 第二个参数为一个数组，表示只保留相应的属性\nvar jsonText = JSON.stringify(book, [\"title\", \"edition\"]);\n// jsonText中的字符串： {\"title\":\"Story One\",\"edition\":3}\n// 第二个参数为一个函数，通过返回指定相应属性的值，返回undefined表示删除该属性。实际上，第一次调用这个函数过滤器，传入的是一个空字符串，而值就是book对象。\nvar jsonText = JSON.stringify(book, function (key, value) {\n    switch (key) {\n        case \"authors\":\n            return value.join(\",\");\n        case \"year\":\n            return 5000;\n        case \"edition\":\n            return undefined;\n        default:\n            return value;\n    };\n});\n// jsonText中的字符串： {\"title\":\"Story One\",\"authors\":\"Ray\",\"year\":5000}\n```\n&emsp;&emsp;`JSON.stringify()`接收最后一个（第三个）参数来表示是否在JSON字符串中保留缩进。举例如下：\n```javascript\nvar book = {\n    \"title\": \"Story One\",\n    \"authors\": [\n        \"Ray\"\n    ],\n    edition: 3,\n    year: 2017\n};\n// 第三个参数为一个数值，表示每个级别缩进的空格数\nvar jsonText = JSON.stringify(book, null, 4);\n/* jsonText中的字符串：\n{\n    \"title\": \"Story One\",\n    \"authors\": [\n        \"Ray\"\n    ],\n    \"edition\": 3,\n    \"year\": 2017\n}\n*/\n// 第三个参数为一个字符串，使用这个字符串作为缩进字符\nvar jsonText = JSON.stringify(book, null, \" - -\");\n/* jsonText中的字符串：\n{\n - -\"title\": \"Story One\",\n - -\"authors\": [\n - - - -\"Ray\"\n - -],\n - -\"edition\": 3,\n - -\"year\": 2017\n}\n*/\n```\n&emsp;&emsp;给对象定义`toJSON()`方法，返回指定的JSON数据格式。可以为任何对象添加toJSON()方法。举例如下：\n```javascript\nvar book = {\n    \"title\": \"Story One\",\n    \"authors\": [\n        \"Ray\"\n    ],\n    edition: 3,\n    year: 2017,\n    toJSON: function () {\n        return this.title;\n    }\n};\nvar jsonText = JSON.stringify(book);\n// jsonText中的字符串(包括了两个双引号)： \"Story One\"\n```\n&emsp;&emsp;toJSON()可以作为函数过滤器的补充，因此理解序列化的内部顺序十分重要，假设把一个对象传入JSON.stringify()，序列化该对象的顺序如下：\n（1）如果存在toJSON()方法而且能通过它取得有效的值，则调用该方法。否则，返回对象自身。\n（2）如果提供了第二个参数，应用这个函数过滤器。传入函数过滤器的值是第（1）步返回的值。\n（3）对第（2）步返回的每个值进行相应的序列化。\n（4）如果提供了第三个参数，执行相应的格式化。\n#### 二. 解析\n&emsp;&emsp;`JSON.parse()`用于将JSON字符串解析为原生的JS值。\n&emsp;&emsp;`JSON.parse()`还可以接收另外一个参数，该参数是一个函数，称作还原函数，该还原函数返回undefined，表示要从结果中删除相应的键，如果返回其他值，则将该值插入到结果中。举例如下：\n```javascript\nvar book = {\n    \"title\": \"Story One\",\n    \"authors\": [\n        \"Ray\"\n    ],\n    edition: 3,\n    year: 2015,\n    releaseDate: new Date(2015, 3, 1)\n};\nvar jsonText = JSON.stringify(book);\nvar bookCopy = JSON.parse(jsonText, function (key, value) {\n    if (key === \"releaseDate\") {\n        return new Date(value);\n    }\n    else {\n        return value;\n    }\n});\n// 执行 bookCopy.releaseDate.getFullYear()，得到数值2015\n```\n\n## 总结\n&emsp;&emsp;JSON是一种轻量级的数据格式，可以简化表示复杂数据结构的工作量。JSON使用JS语法的子集表示对象、数组、字符串、数值、布尔值和null。即使XML也能表示同样复杂的数据结果，但是JSON没有XML那么繁琐，而且在JS中使用十分便利。我们可以使用**ECMAScript 5**定义的原生JSON对象的两个方法**stringify()**以及**parse()**来将JS对象序列化为JSON字符串或者将JSON字符串数据解析为JS对象。","slug":"json","published":1,"updated":"2017-04-19T14:30:48.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3032x0015imw4ew3ggowy","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>&emsp;&emsp;<code>JSON</code>是一种数据结构而不是一种编程语言，它利用了JS中的一些模式来表示结构化数据，虽然与JS具有相同的语法形式，但是JSON并不从属于JS。另外，并不是只有JS才使用JSON，很对编程语言都有针对JSON的解析器和序列化器。</p>\n<h2 id=\"JSON的语法\"><a href=\"#JSON的语法\" class=\"headerlink\" title=\"JSON的语法\"></a>JSON的语法</h2><h4 id=\"一-取值类型\"><a href=\"#一-取值类型\" class=\"headerlink\" title=\"一. 取值类型\"></a>一. 取值类型</h4><p>&emsp;&emsp;<strong>简单值</strong>： 可以在JSON中表示字符串、数值、布尔值和null，但不支持特殊值<code>undefined</code>。<br>&emsp;&emsp;<strong>对象</strong>： 复杂数据类型，表示一组无序的键值对，每个键值对中的值可以是简单值，也可以是复杂数据类型的值。<br>&emsp;&emsp;<strong>数组</strong>： 复杂数据类型，表示一组有序的值的列表，可以通过数值索引来访问其中的值，该值也可以是简单值、对象或者数组。</p>\n<h4 id=\"二-语法\"><a href=\"#二-语法\" class=\"headerlink\" title=\"二. 语法\"></a>二. 语法</h4><p>&emsp;&emsp;JSON没有变量的概念，末尾没有分号，属性必须加双引号，举例如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Ray\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"attr\">\"school\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"GDUT\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"CHINA\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;JSON数组：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 示例一</div><div class=\"line\">[20, \"hi\", true]</div><div class=\"line\">// 示例二</div><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        \"title\": \"Story One\",</div><div class=\"line\">        \"authors\": [</div><div class=\"line\">            \"Ray\"</div><div class=\"line\">        ],</div><div class=\"line\">        \"edition\": 3,</div><div class=\"line\">        \"year\": 2017</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        \"title\": \"Story Two\",</div><div class=\"line\">        \"authors\": [</div><div class=\"line\">            \"Tom\"</div><div class=\"line\">        ],</div><div class=\"line\">        \"edition\": 2,</div><div class=\"line\">        \"year\": 2016</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        \"title\": \"Story Three\",</div><div class=\"line\">        \"authors\": [</div><div class=\"line\">            \"Amy\",</div><div class=\"line\">            \"Sara\",</div><div class=\"line\">            \"Jack\"</div><div class=\"line\">        ],</div><div class=\"line\">        \"edition\": 4,</div><div class=\"line\">        \"year\": 2014</div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<h2 id=\"解析与序列化\"><a href=\"#解析与序列化\" class=\"headerlink\" title=\"解析与序列化\"></a>解析与序列化</h2><p>&emsp;&emsp;ECMAScript 5对解析<code>JSON</code>的行为进行规范，定义了全局对象JSON，支持这个对象的浏览器有 IE 8+、Firefox 3.5+、Safari 4+、Chrome 和 Opera 10.5+。对于较早的、不能原生支持JSON解析的浏览器，可以使用一个shim：<code>https://github.com/douglascrockford/JSON-js</code>，这比使用eval()对JSON数据结构求值要安全，避免了一些恶意代码的执行。</p>\n<h4 id=\"一-序列化\"><a href=\"#一-序列化\" class=\"headerlink\" title=\"一. 序列化\"></a>一. 序列化</h4><p>&emsp;&emsp;<code>JSON.stringify()</code>用于将JS对象序列化为JSON字符串。在序列化JS对象时，所有函数及原型成员都会被有意忽略，不体现在结果中，此外，值为undefined的任何属性也会被跳过。举例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> book = &#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">\"Story One\"</span>,</div><div class=\"line\">    <span class=\"attr\">authors</span>: [</div><div class=\"line\">        <span class=\"string\">\"Ray\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">edition</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">year</span>: <span class=\"number\">2017</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book);</div><div class=\"line\"><span class=\"comment\">// jsonText中的字符串： &#123;\"title\":\"Story One\",\"authors\":[\"Ray\"],\"edition\":3,\"year\":2017&#125;</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;<code>JSON.stringify()</code>还可以另外接收两个可选的参数，第一个参数是个过滤器，值为一个数组或者一个函数，举例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> book = &#123;</div><div class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Story One\"</span>,</div><div class=\"line\">    <span class=\"string\">\"authors\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"Ray\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">edition</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">year</span>: <span class=\"number\">2017</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 第二个参数为一个数组，表示只保留相应的属性</span></div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book, [<span class=\"string\">\"title\"</span>, <span class=\"string\">\"edition\"</span>]);</div><div class=\"line\"><span class=\"comment\">// jsonText中的字符串： &#123;\"title\":\"Story One\",\"edition\":3&#125;</span></div><div class=\"line\"><span class=\"comment\">// 第二个参数为一个函数，通过返回指定相应属性的值，返回undefined表示删除该属性。实际上，第一次调用这个函数过滤器，传入的是一个空字符串，而值就是book对象。</span></div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (key) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"authors\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> value.join(<span class=\"string\">\",\"</span>);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"year\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">5000</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"edition\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// jsonText中的字符串： &#123;\"title\":\"Story One\",\"authors\":\"Ray\",\"year\":5000&#125;</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;<code>JSON.stringify()</code>接收最后一个（第三个）参数来表示是否在JSON字符串中保留缩进。举例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> book = &#123;</div><div class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Story One\"</span>,</div><div class=\"line\">    <span class=\"string\">\"authors\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"Ray\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">edition</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">year</span>: <span class=\"number\">2017</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 第三个参数为一个数值，表示每个级别缩进的空格数</span></div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">/* jsonText中的字符串：</span></div><div class=\"line\">&#123;</div><div class=\"line\">    \"title\": \"Story One\",</div><div class=\"line\">    \"authors\": [</div><div class=\"line\">        \"Ray\"</div><div class=\"line\">    ],</div><div class=\"line\">    \"edition\": 3,</div><div class=\"line\">    \"year\": 2017</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// 第三个参数为一个字符串，使用这个字符串作为缩进字符</span></div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book, <span class=\"literal\">null</span>, <span class=\"string\">\" - -\"</span>);</div><div class=\"line\"><span class=\"comment\">/* jsonText中的字符串：</span></div><div class=\"line\">&#123;</div><div class=\"line\"> - -\"title\": \"Story One\",</div><div class=\"line\"> - -\"authors\": [</div><div class=\"line\"> - - - -\"Ray\"</div><div class=\"line\"> - -],</div><div class=\"line\"> - -\"edition\": 3,</div><div class=\"line\"> - -\"year\": 2017</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;给对象定义<code>toJSON()</code>方法，返回指定的JSON数据格式。可以为任何对象添加toJSON()方法。举例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> book = &#123;</div><div class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Story One\"</span>,</div><div class=\"line\">    <span class=\"string\">\"authors\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"Ray\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">edition</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">year</span>: <span class=\"number\">2017</span>,</div><div class=\"line\">    <span class=\"attr\">toJSON</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.title;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book);</div><div class=\"line\"><span class=\"comment\">// jsonText中的字符串(包括了两个双引号)： \"Story One\"</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;toJSON()可以作为函数过滤器的补充，因此理解序列化的内部顺序十分重要，假设把一个对象传入JSON.stringify()，序列化该对象的顺序如下：<br>（1）如果存在toJSON()方法而且能通过它取得有效的值，则调用该方法。否则，返回对象自身。<br>（2）如果提供了第二个参数，应用这个函数过滤器。传入函数过滤器的值是第（1）步返回的值。<br>（3）对第（2）步返回的每个值进行相应的序列化。<br>（4）如果提供了第三个参数，执行相应的格式化。</p>\n<h4 id=\"二-解析\"><a href=\"#二-解析\" class=\"headerlink\" title=\"二. 解析\"></a>二. 解析</h4><p>&emsp;&emsp;<code>JSON.parse()</code>用于将JSON字符串解析为原生的JS值。<br>&emsp;&emsp;<code>JSON.parse()</code>还可以接收另外一个参数，该参数是一个函数，称作还原函数，该还原函数返回undefined，表示要从结果中删除相应的键，如果返回其他值，则将该值插入到结果中。举例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> book = &#123;</div><div class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Story One\"</span>,</div><div class=\"line\">    <span class=\"string\">\"authors\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"Ray\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">edition</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">year</span>: <span class=\"number\">2015</span>,</div><div class=\"line\">    <span class=\"attr\">releaseDate</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2015</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book);</div><div class=\"line\"><span class=\"keyword\">var</span> bookCopy = <span class=\"built_in\">JSON</span>.parse(jsonText, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (key === <span class=\"string\">\"releaseDate\"</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(value);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 执行 bookCopy.releaseDate.getFullYear()，得到数值2015</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>&emsp;&emsp;JSON是一种轻量级的数据格式，可以简化表示复杂数据结构的工作量。JSON使用JS语法的子集表示对象、数组、字符串、数值、布尔值和null。即使XML也能表示同样复杂的数据结果，但是JSON没有XML那么繁琐，而且在JS中使用十分便利。我们可以使用<strong>ECMAScript 5</strong>定义的原生JSON对象的两个方法<strong>stringify()</strong>以及<strong>parse()</strong>来将JS对象序列化为JSON字符串或者将JSON字符串数据解析为JS对象。</p>\n","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>&emsp;&emsp;<code>JSON</code>是一种数据结构而不是一种编程语言，它利用了JS中的一些模式来表示结构化数据，虽然与JS具有相同的语法形式，但是JSON并不从属于JS。另外，并不是只有JS才使用JSON，很对编程语言都有针对JSON的解析器和序列化器。</p>\n<h2 id=\"JSON的语法\"><a href=\"#JSON的语法\" class=\"headerlink\" title=\"JSON的语法\"></a>JSON的语法</h2><h4 id=\"一-取值类型\"><a href=\"#一-取值类型\" class=\"headerlink\" title=\"一. 取值类型\"></a>一. 取值类型</h4><p>&emsp;&emsp;<strong>简单值</strong>： 可以在JSON中表示字符串、数值、布尔值和null，但不支持特殊值<code>undefined</code>。<br>&emsp;&emsp;<strong>对象</strong>： 复杂数据类型，表示一组无序的键值对，每个键值对中的值可以是简单值，也可以是复杂数据类型的值。<br>&emsp;&emsp;<strong>数组</strong>： 复杂数据类型，表示一组有序的值的列表，可以通过数值索引来访问其中的值，该值也可以是简单值、对象或者数组。</p>\n<h4 id=\"二-语法\"><a href=\"#二-语法\" class=\"headerlink\" title=\"二. 语法\"></a>二. 语法</h4><p>&emsp;&emsp;JSON没有变量的概念，末尾没有分号，属性必须加双引号，举例如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Ray\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"age\"</span>: <span class=\"number\">20</span>,</div><div class=\"line\">    <span class=\"attr\">\"school\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"GDUT\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"CHINA\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;JSON数组：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 示例一</div><div class=\"line\">[20, \"hi\", true]</div><div class=\"line\">// 示例二</div><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        \"title\": \"Story One\",</div><div class=\"line\">        \"authors\": [</div><div class=\"line\">            \"Ray\"</div><div class=\"line\">        ],</div><div class=\"line\">        \"edition\": 3,</div><div class=\"line\">        \"year\": 2017</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        \"title\": \"Story Two\",</div><div class=\"line\">        \"authors\": [</div><div class=\"line\">            \"Tom\"</div><div class=\"line\">        ],</div><div class=\"line\">        \"edition\": 2,</div><div class=\"line\">        \"year\": 2016</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        \"title\": \"Story Three\",</div><div class=\"line\">        \"authors\": [</div><div class=\"line\">            \"Amy\",</div><div class=\"line\">            \"Sara\",</div><div class=\"line\">            \"Jack\"</div><div class=\"line\">        ],</div><div class=\"line\">        \"edition\": 4,</div><div class=\"line\">        \"year\": 2014</div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<h2 id=\"解析与序列化\"><a href=\"#解析与序列化\" class=\"headerlink\" title=\"解析与序列化\"></a>解析与序列化</h2><p>&emsp;&emsp;ECMAScript 5对解析<code>JSON</code>的行为进行规范，定义了全局对象JSON，支持这个对象的浏览器有 IE 8+、Firefox 3.5+、Safari 4+、Chrome 和 Opera 10.5+。对于较早的、不能原生支持JSON解析的浏览器，可以使用一个shim：<code>https://github.com/douglascrockford/JSON-js</code>，这比使用eval()对JSON数据结构求值要安全，避免了一些恶意代码的执行。</p>\n<h4 id=\"一-序列化\"><a href=\"#一-序列化\" class=\"headerlink\" title=\"一. 序列化\"></a>一. 序列化</h4><p>&emsp;&emsp;<code>JSON.stringify()</code>用于将JS对象序列化为JSON字符串。在序列化JS对象时，所有函数及原型成员都会被有意忽略，不体现在结果中，此外，值为undefined的任何属性也会被跳过。举例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> book = &#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">\"Story One\"</span>,</div><div class=\"line\">    <span class=\"attr\">authors</span>: [</div><div class=\"line\">        <span class=\"string\">\"Ray\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">edition</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">year</span>: <span class=\"number\">2017</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book);</div><div class=\"line\"><span class=\"comment\">// jsonText中的字符串： &#123;\"title\":\"Story One\",\"authors\":[\"Ray\"],\"edition\":3,\"year\":2017&#125;</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;<code>JSON.stringify()</code>还可以另外接收两个可选的参数，第一个参数是个过滤器，值为一个数组或者一个函数，举例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> book = &#123;</div><div class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Story One\"</span>,</div><div class=\"line\">    <span class=\"string\">\"authors\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"Ray\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">edition</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">year</span>: <span class=\"number\">2017</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 第二个参数为一个数组，表示只保留相应的属性</span></div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book, [<span class=\"string\">\"title\"</span>, <span class=\"string\">\"edition\"</span>]);</div><div class=\"line\"><span class=\"comment\">// jsonText中的字符串： &#123;\"title\":\"Story One\",\"edition\":3&#125;</span></div><div class=\"line\"><span class=\"comment\">// 第二个参数为一个函数，通过返回指定相应属性的值，返回undefined表示删除该属性。实际上，第一次调用这个函数过滤器，传入的是一个空字符串，而值就是book对象。</span></div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (key) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"authors\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> value.join(<span class=\"string\">\",\"</span>);</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"year\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">5000</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"edition\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// jsonText中的字符串： &#123;\"title\":\"Story One\",\"authors\":\"Ray\",\"year\":5000&#125;</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;<code>JSON.stringify()</code>接收最后一个（第三个）参数来表示是否在JSON字符串中保留缩进。举例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> book = &#123;</div><div class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Story One\"</span>,</div><div class=\"line\">    <span class=\"string\">\"authors\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"Ray\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">edition</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">year</span>: <span class=\"number\">2017</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 第三个参数为一个数值，表示每个级别缩进的空格数</span></div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">/* jsonText中的字符串：</span></div><div class=\"line\">&#123;</div><div class=\"line\">    \"title\": \"Story One\",</div><div class=\"line\">    \"authors\": [</div><div class=\"line\">        \"Ray\"</div><div class=\"line\">    ],</div><div class=\"line\">    \"edition\": 3,</div><div class=\"line\">    \"year\": 2017</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// 第三个参数为一个字符串，使用这个字符串作为缩进字符</span></div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book, <span class=\"literal\">null</span>, <span class=\"string\">\" - -\"</span>);</div><div class=\"line\"><span class=\"comment\">/* jsonText中的字符串：</span></div><div class=\"line\">&#123;</div><div class=\"line\"> - -\"title\": \"Story One\",</div><div class=\"line\"> - -\"authors\": [</div><div class=\"line\"> - - - -\"Ray\"</div><div class=\"line\"> - -],</div><div class=\"line\"> - -\"edition\": 3,</div><div class=\"line\"> - -\"year\": 2017</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;给对象定义<code>toJSON()</code>方法，返回指定的JSON数据格式。可以为任何对象添加toJSON()方法。举例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> book = &#123;</div><div class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Story One\"</span>,</div><div class=\"line\">    <span class=\"string\">\"authors\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"Ray\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">edition</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">year</span>: <span class=\"number\">2017</span>,</div><div class=\"line\">    <span class=\"attr\">toJSON</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.title;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book);</div><div class=\"line\"><span class=\"comment\">// jsonText中的字符串(包括了两个双引号)： \"Story One\"</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;toJSON()可以作为函数过滤器的补充，因此理解序列化的内部顺序十分重要，假设把一个对象传入JSON.stringify()，序列化该对象的顺序如下：<br>（1）如果存在toJSON()方法而且能通过它取得有效的值，则调用该方法。否则，返回对象自身。<br>（2）如果提供了第二个参数，应用这个函数过滤器。传入函数过滤器的值是第（1）步返回的值。<br>（3）对第（2）步返回的每个值进行相应的序列化。<br>（4）如果提供了第三个参数，执行相应的格式化。</p>\n<h4 id=\"二-解析\"><a href=\"#二-解析\" class=\"headerlink\" title=\"二. 解析\"></a>二. 解析</h4><p>&emsp;&emsp;<code>JSON.parse()</code>用于将JSON字符串解析为原生的JS值。<br>&emsp;&emsp;<code>JSON.parse()</code>还可以接收另外一个参数，该参数是一个函数，称作还原函数，该还原函数返回undefined，表示要从结果中删除相应的键，如果返回其他值，则将该值插入到结果中。举例如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> book = &#123;</div><div class=\"line\">    <span class=\"string\">\"title\"</span>: <span class=\"string\">\"Story One\"</span>,</div><div class=\"line\">    <span class=\"string\">\"authors\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"Ray\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">edition</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"attr\">year</span>: <span class=\"number\">2015</span>,</div><div class=\"line\">    <span class=\"attr\">releaseDate</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2015</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> jsonText = <span class=\"built_in\">JSON</span>.stringify(book);</div><div class=\"line\"><span class=\"keyword\">var</span> bookCopy = <span class=\"built_in\">JSON</span>.parse(jsonText, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (key === <span class=\"string\">\"releaseDate\"</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(value);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 执行 bookCopy.releaseDate.getFullYear()，得到数值2015</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>&emsp;&emsp;JSON是一种轻量级的数据格式，可以简化表示复杂数据结构的工作量。JSON使用JS语法的子集表示对象、数组、字符串、数值、布尔值和null。即使XML也能表示同样复杂的数据结果，但是JSON没有XML那么繁琐，而且在JS中使用十分便利。我们可以使用<strong>ECMAScript 5</strong>定义的原生JSON对象的两个方法<strong>stringify()</strong>以及<strong>parse()</strong>来将JS对象序列化为JSON字符串或者将JSON字符串数据解析为JS对象。</p>\n"},{"title":"es6(一) 之 let 和 const 命令","date":"2016-12-26T06:27:31.000Z","_content":"### <font style=\"color: #f00;\">let命令</font>\n```javascript\n```\n(1)  let命令声明的变量只在所在的`代码块内`有效\n(2)  for循环的循环语句是一个`父级作用域`，而循环体内部是一个单独的`子作用域`\n(3)  for循环的每次循环中的变量`i`都是`重新声明`的，作用域之间无关系\n(4)  `不存在声明提前`，在声明之前使用变量会报错“ReferenceError: i is not defined”\n(5) 存在`暂时性死区`，只要块级作用域内存在let命令，它所声明的变量就“绑定","source":"_posts/letncst.md","raw":"---\ntitle: es6(一) 之 let 和 const 命令\ndate: 2016-12-26 14:27:31\ncategories: [技术类-前端]\ntags: [JavaScript, es6]\n---\n### <font style=\"color: #f00;\">let命令</font>\n```javascript\n```\n(1)  let命令声明的变量只在所在的`代码块内`有效\n(2)  for循环的循环语句是一个`父级作用域`，而循环体内部是一个单独的`子作用域`\n(3)  for循环的每次循环中的变量`i`都是`重新声明`的，作用域之间无关系\n(4)  `不存在声明提前`，在声明之前使用变量会报错“ReferenceError: i is not defined”\n(5) 存在`暂时性死区`，只要块级作用域内存在let命令，它所声明的变量就“绑定","slug":"letncst","published":1,"updated":"2017-04-26T10:49:56.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3032z0018imw4oijs725w","content":"<h3 id=\"let命令\"><a href=\"#let命令\" class=\"headerlink\" title=\"let命令\"></a><font style=\"color: #f00;\">let命令</font></h3><pre><code class=\"javascript\">\n</code></pre>\n<p>(1)  let命令声明的变量只在所在的<code>代码块内</code>有效<br>(2)  for循环的循环语句是一个<code>父级作用域</code>，而循环体内部是一个单独的<code>子作用域</code><br>(3)  for循环的每次循环中的变量<code>i</code>都是<code>重新声明</code>的，作用域之间无关系<br>(4)  <code>不存在声明提前</code>，在声明之前使用变量会报错“ReferenceError: i is not defined”<br>(5) 存在<code>暂时性死区</code>，只要块级作用域内存在let命令，它所声明的变量就“绑定</p>\n","excerpt":"","more":"<h3 id=\"let命令\"><a href=\"#let命令\" class=\"headerlink\" title=\"let命令\"></a><font style=\"color: #f00;\">let命令</font></h3><pre><code class=\"javascript\">\n</code></pre>\n<p>(1)  let命令声明的变量只在所在的<code>代码块内</code>有效<br>(2)  for循环的循环语句是一个<code>父级作用域</code>，而循环体内部是一个单独的<code>子作用域</code><br>(3)  for循环的每次循环中的变量<code>i</code>都是<code>重新声明</code>的，作用域之间无关系<br>(4)  <code>不存在声明提前</code>，在声明之前使用变量会报错“ReferenceError: i is not defined”<br>(5) 存在<code>暂时性死区</code>，只要块级作用域内存在let命令，它所声明的变量就“绑定</p>\n"},{"title":"path.join 与 path.resolve 的区别","date":"2017-05-31T13:07:48.000Z","_content":"## <font color=\"#f00\">何为 path ？</font>\n&emsp;&emsp;`path`是`node`提供的用于处理文件路径的小工具，我们可以通过以下方式引入该模块：\n```javascript\nvar path = require('path');\n```\n&emsp;&emsp;`path.join`以及`path.resolve`便是该模块中的两个方法。官方对这两个方法的定义分别如下：\n\n|path.join([path1][, path2][, ...])|path.resolve([from ...], to)|\n|:-----|:-----|\n|用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是\"/\"，Windows系统是\"\\\"。|将 to 参数解析为绝对路径。|\n\n&emsp;&emsp;很多同学在使用中分不清楚它们两者之间的区别。接下来，我们就来看看它们二者之间的区别。\n## <font color=\"#f00\">path.join 与 path.resolve 的区别</font>\n+ <font color=\"#00f\">相同点</font>\n\n**1.**二者都是输出路径字符串\n\n**2**.二者都能正确处理父级标识`'../'`\n例子：现假设在 ububtu 的 home 目录的 test 文件夹里新建一个 path.js 文件。（以下均以这个文件作为例子讲解）\n```javascript\n/**\n * path.js\n */\nvar path = require('path');\n\n// 使用 path.join\nconsole.log(path.join(__dirname, '../hexo'));\n// 输出 /home/whbxyr/hexo\n\n// 使用 path.resolve\nconsole.log(path.resolve(__dirname, '../hexo'));\n// 输出 /home/whbxyr/hexo\n```\n&emsp;&emsp;可见二者均是将`'../'`视为父级目录，而不是当成简单的字符串。\n\n+ <font color=\"#00f\">不同点</font>\n\n**1.**path.join 只是简单的连接路径，而 path.resolve 则是将最后一个参数的路径解析为`绝对路径`。\n```javascript\n/**\n * path.js\n */\nvar path = require('path');\n\n// 使用 path.join\nconsole.log(path.join('test', './hexo'));\n// 输出 test/hexo\n\n// 使用 path.resolve\nconsole.log(path.resolve('test', './hexo'));\n// 输出 /home/whbxyr/test/test/hexo\n```\n\n**2.**path.join 将`'/'`视为简单的当前路径，而 path.resolve 将`'/'`视为根目录。\n```javascript\n/**\n * path.js\n */\nvar path = require('path');\n\n// 使用 path.join\nconsole.log(path.join(__dirname, '/hexo'));\n// 输出 /home/whbxyr/test/hexo\n\n// 使用 path.resolve\nconsole.log(path.resolve(__dirname, '/hexo'));\n// 输出 /hexo\n```\n&emsp;&emsp;path.join 的第二个参数前面有个`'/'`，但是输出的结果也仅仅是简单的当前路径的连接，而 path.resolve 的第二个参数前面也有`'/'`，但是由于它将其视为根目录，因此第二个参数的绝对路径便直接是根目录下的。\n\n## <font color=\"#f00\">总结</font>\n&emsp;&emsp;path.join 与 path.resolve 虽然有时候运行结果是相同的，有些情况下使用哪个都可以，但是它们二者之间还是有本质区别的，我们在平常的使用中应该要多加注意，加以区分。","source":"_posts/path-join-path-resolve.md","raw":"---\ntitle: path.join 与 path.resolve 的区别\ndate: 2017-05-31 21:07:48\ncategories: [技术类-前端]\ntags: [node,  JavaScript]\n---\n## <font color=\"#f00\">何为 path ？</font>\n&emsp;&emsp;`path`是`node`提供的用于处理文件路径的小工具，我们可以通过以下方式引入该模块：\n```javascript\nvar path = require('path');\n```\n&emsp;&emsp;`path.join`以及`path.resolve`便是该模块中的两个方法。官方对这两个方法的定义分别如下：\n\n|path.join([path1][, path2][, ...])|path.resolve([from ...], to)|\n|:-----|:-----|\n|用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是\"/\"，Windows系统是\"\\\"。|将 to 参数解析为绝对路径。|\n\n&emsp;&emsp;很多同学在使用中分不清楚它们两者之间的区别。接下来，我们就来看看它们二者之间的区别。\n## <font color=\"#f00\">path.join 与 path.resolve 的区别</font>\n+ <font color=\"#00f\">相同点</font>\n\n**1.**二者都是输出路径字符串\n\n**2**.二者都能正确处理父级标识`'../'`\n例子：现假设在 ububtu 的 home 目录的 test 文件夹里新建一个 path.js 文件。（以下均以这个文件作为例子讲解）\n```javascript\n/**\n * path.js\n */\nvar path = require('path');\n\n// 使用 path.join\nconsole.log(path.join(__dirname, '../hexo'));\n// 输出 /home/whbxyr/hexo\n\n// 使用 path.resolve\nconsole.log(path.resolve(__dirname, '../hexo'));\n// 输出 /home/whbxyr/hexo\n```\n&emsp;&emsp;可见二者均是将`'../'`视为父级目录，而不是当成简单的字符串。\n\n+ <font color=\"#00f\">不同点</font>\n\n**1.**path.join 只是简单的连接路径，而 path.resolve 则是将最后一个参数的路径解析为`绝对路径`。\n```javascript\n/**\n * path.js\n */\nvar path = require('path');\n\n// 使用 path.join\nconsole.log(path.join('test', './hexo'));\n// 输出 test/hexo\n\n// 使用 path.resolve\nconsole.log(path.resolve('test', './hexo'));\n// 输出 /home/whbxyr/test/test/hexo\n```\n\n**2.**path.join 将`'/'`视为简单的当前路径，而 path.resolve 将`'/'`视为根目录。\n```javascript\n/**\n * path.js\n */\nvar path = require('path');\n\n// 使用 path.join\nconsole.log(path.join(__dirname, '/hexo'));\n// 输出 /home/whbxyr/test/hexo\n\n// 使用 path.resolve\nconsole.log(path.resolve(__dirname, '/hexo'));\n// 输出 /hexo\n```\n&emsp;&emsp;path.join 的第二个参数前面有个`'/'`，但是输出的结果也仅仅是简单的当前路径的连接，而 path.resolve 的第二个参数前面也有`'/'`，但是由于它将其视为根目录，因此第二个参数的绝对路径便直接是根目录下的。\n\n## <font color=\"#f00\">总结</font>\n&emsp;&emsp;path.join 与 path.resolve 虽然有时候运行结果是相同的，有些情况下使用哪个都可以，但是它们二者之间还是有本质区别的，我们在平常的使用中应该要多加注意，加以区分。","slug":"path-join-path-resolve","published":1,"updated":"2017-05-31T14:22:35.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d30332001cimw4qkp3htb3","content":"<h2 id=\"何为-path-？\"><a href=\"#何为-path-？\" class=\"headerlink\" title=\"何为 path ？\"></a><font color=\"#f00\">何为 path ？</font></h2><p>&emsp;&emsp;<code>path</code>是<code>node</code>提供的用于处理文件路径的小工具，我们可以通过以下方式引入该模块：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;<code>path.join</code>以及<code>path.resolve</code>便是该模块中的两个方法。官方对这两个方法的定义分别如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">path.join([path1][, path2][, …])</th>\n<th style=\"text-align:left\">path.resolve([from …], to)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\\”。</td>\n<td style=\"text-align:left\">将 to 参数解析为绝对路径。</td>\n</tr>\n</tbody>\n</table>\n<p>&emsp;&emsp;很多同学在使用中分不清楚它们两者之间的区别。接下来，我们就来看看它们二者之间的区别。</p>\n<h2 id=\"path-join-与-path-resolve-的区别\"><a href=\"#path-join-与-path-resolve-的区别\" class=\"headerlink\" title=\"path.join 与 path.resolve 的区别\"></a><font color=\"#f00\">path.join 与 path.resolve 的区别</font></h2><ul>\n<li><font color=\"#00f\">相同点</font>\n\n</li>\n</ul>\n<p><strong>1.</strong>二者都是输出路径字符串</p>\n<p><strong>2</strong>.二者都能正确处理父级标识<code>&#39;../&#39;</code><br>例子：现假设在 ububtu 的 home 目录的 test 文件夹里新建一个 path.js 文件。（以下均以这个文件作为例子讲解）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * path.js</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 path.join</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(path.join(__dirname, <span class=\"string\">'../hexo'</span>));</div><div class=\"line\"><span class=\"comment\">// 输出 /home/whbxyr/hexo</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 path.resolve</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(path.resolve(__dirname, <span class=\"string\">'../hexo'</span>));</div><div class=\"line\"><span class=\"comment\">// 输出 /home/whbxyr/hexo</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;可见二者均是将<code>&#39;../&#39;</code>视为父级目录，而不是当成简单的字符串。</p>\n<ul>\n<li><font color=\"#00f\">不同点</font>\n\n</li>\n</ul>\n<p><strong>1.</strong>path.join 只是简单的连接路径，而 path.resolve 则是将最后一个参数的路径解析为<code>绝对路径</code>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * path.js</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 path.join</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(path.join(<span class=\"string\">'test'</span>, <span class=\"string\">'./hexo'</span>));</div><div class=\"line\"><span class=\"comment\">// 输出 test/hexo</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 path.resolve</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(path.resolve(<span class=\"string\">'test'</span>, <span class=\"string\">'./hexo'</span>));</div><div class=\"line\"><span class=\"comment\">// 输出 /home/whbxyr/test/test/hexo</span></div></pre></td></tr></table></figure></p>\n<p><strong>2.</strong>path.join 将<code>&#39;/&#39;</code>视为简单的当前路径，而 path.resolve 将<code>&#39;/&#39;</code>视为根目录。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * path.js</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 path.join</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(path.join(__dirname, <span class=\"string\">'/hexo'</span>));</div><div class=\"line\"><span class=\"comment\">// 输出 /home/whbxyr/test/hexo</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 path.resolve</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(path.resolve(__dirname, <span class=\"string\">'/hexo'</span>));</div><div class=\"line\"><span class=\"comment\">// 输出 /hexo</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;path.join 的第二个参数前面有个<code>&#39;/&#39;</code>，但是输出的结果也仅仅是简单的当前路径的连接，而 path.resolve 的第二个参数前面也有<code>&#39;/&#39;</code>，但是由于它将其视为根目录，因此第二个参数的绝对路径便直接是根目录下的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><font color=\"#f00\">总结</font></h2><p>&emsp;&emsp;path.join 与 path.resolve 虽然有时候运行结果是相同的，有些情况下使用哪个都可以，但是它们二者之间还是有本质区别的，我们在平常的使用中应该要多加注意，加以区分。</p>\n","excerpt":"","more":"<h2 id=\"何为-path-？\"><a href=\"#何为-path-？\" class=\"headerlink\" title=\"何为 path ？\"></a><font color=\"#f00\">何为 path ？</font></h2><p>&emsp;&emsp;<code>path</code>是<code>node</code>提供的用于处理文件路径的小工具，我们可以通过以下方式引入该模块：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;<code>path.join</code>以及<code>path.resolve</code>便是该模块中的两个方法。官方对这两个方法的定义分别如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">path.join([path1][, path2][, …])</th>\n<th style=\"text-align:left\">path.resolve([from …], to)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\\”。</td>\n<td style=\"text-align:left\">将 to 参数解析为绝对路径。</td>\n</tr>\n</tbody>\n</table>\n<p>&emsp;&emsp;很多同学在使用中分不清楚它们两者之间的区别。接下来，我们就来看看它们二者之间的区别。</p>\n<h2 id=\"path-join-与-path-resolve-的区别\"><a href=\"#path-join-与-path-resolve-的区别\" class=\"headerlink\" title=\"path.join 与 path.resolve 的区别\"></a><font color=\"#f00\">path.join 与 path.resolve 的区别</font></h2><ul>\n<li><font color=\"#00f\">相同点</font>\n\n</li>\n</ul>\n<p><strong>1.</strong>二者都是输出路径字符串</p>\n<p><strong>2</strong>.二者都能正确处理父级标识<code>&#39;../&#39;</code><br>例子：现假设在 ububtu 的 home 目录的 test 文件夹里新建一个 path.js 文件。（以下均以这个文件作为例子讲解）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * path.js</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 path.join</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(path.join(__dirname, <span class=\"string\">'../hexo'</span>));</div><div class=\"line\"><span class=\"comment\">// 输出 /home/whbxyr/hexo</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 path.resolve</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(path.resolve(__dirname, <span class=\"string\">'../hexo'</span>));</div><div class=\"line\"><span class=\"comment\">// 输出 /home/whbxyr/hexo</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;可见二者均是将<code>&#39;../&#39;</code>视为父级目录，而不是当成简单的字符串。</p>\n<ul>\n<li><font color=\"#00f\">不同点</font>\n\n</li>\n</ul>\n<p><strong>1.</strong>path.join 只是简单的连接路径，而 path.resolve 则是将最后一个参数的路径解析为<code>绝对路径</code>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * path.js</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 path.join</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(path.join(<span class=\"string\">'test'</span>, <span class=\"string\">'./hexo'</span>));</div><div class=\"line\"><span class=\"comment\">// 输出 test/hexo</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 path.resolve</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(path.resolve(<span class=\"string\">'test'</span>, <span class=\"string\">'./hexo'</span>));</div><div class=\"line\"><span class=\"comment\">// 输出 /home/whbxyr/test/test/hexo</span></div></pre></td></tr></table></figure></p>\n<p><strong>2.</strong>path.join 将<code>&#39;/&#39;</code>视为简单的当前路径，而 path.resolve 将<code>&#39;/&#39;</code>视为根目录。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * path.js</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 path.join</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(path.join(__dirname, <span class=\"string\">'/hexo'</span>));</div><div class=\"line\"><span class=\"comment\">// 输出 /home/whbxyr/test/hexo</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 path.resolve</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(path.resolve(__dirname, <span class=\"string\">'/hexo'</span>));</div><div class=\"line\"><span class=\"comment\">// 输出 /hexo</span></div></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;path.join 的第二个参数前面有个<code>&#39;/&#39;</code>，但是输出的结果也仅仅是简单的当前路径的连接，而 path.resolve 的第二个参数前面也有<code>&#39;/&#39;</code>，但是由于它将其视为根目录，因此第二个参数的绝对路径便直接是根目录下的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><font color=\"#f00\">总结</font></h2><p>&emsp;&emsp;path.join 与 path.resolve 虽然有时候运行结果是相同的，有些情况下使用哪个都可以，但是它们二者之间还是有本质区别的，我们在平常的使用中应该要多加注意，加以区分。</p>\n"},{"title":"排序算法总结","date":"2016-04-02T05:19:03.000Z","_content":"<h1 align=\"center\">各大排序算法综合总结</h1>\n###### 详解中包括了时间复杂度（最差/平均/最优），面试宝典\n|  算法  |  最差  |  平均  |  最优  |  空间  |  稳定性  |\n|:-------|:------:|:------:|:------:|:------:|:--------:|\n| 直接插入排序 | O(n^2) | O(n^2) | O(n) | O(1) | 稳定 |\n| 希尔排序 | O(nlogn) | O(nlogn) | 视情况而定 | O(1) | 不稳定 |\n| 基数排序 | O(d(n+r)) | O(d(n+r)) | O(d(n+r)) | O(n+r) | 稳定 |\n| 快速排序 | O(n^2) | O(nlogn) | O(nlogn) | O(nlogn) | 不稳定 |\n| 选择排序 | O(n^2) | O(n^2) | O(n^2) | O(1) | 不稳定 |\n| 冒泡排序 | O(n^2) | O(n^2) | O(n) | O(1) | 稳定 |\n| 桶排序 | O(n) | O(n) | O(n) | max | 稳定 |\n| 归并排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(1) | 稳定 |\n| 堆排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(1) | 不稳定 |\n###### 这些都是面试的时候比较经常问的排序算法，有错误可以发邮件给我！\n","source":"_posts/sortAlgorithm.md","raw":"---\ntitle: 排序算法总结\ndate: 2016-04-02 13:19:03\ncategories: [技术类-算法]\ntags: [算法]\n---\n<h1 align=\"center\">各大排序算法综合总结</h1>\n###### 详解中包括了时间复杂度（最差/平均/最优），面试宝典\n|  算法  |  最差  |  平均  |  最优  |  空间  |  稳定性  |\n|:-------|:------:|:------:|:------:|:------:|:--------:|\n| 直接插入排序 | O(n^2) | O(n^2) | O(n) | O(1) | 稳定 |\n| 希尔排序 | O(nlogn) | O(nlogn) | 视情况而定 | O(1) | 不稳定 |\n| 基数排序 | O(d(n+r)) | O(d(n+r)) | O(d(n+r)) | O(n+r) | 稳定 |\n| 快速排序 | O(n^2) | O(nlogn) | O(nlogn) | O(nlogn) | 不稳定 |\n| 选择排序 | O(n^2) | O(n^2) | O(n^2) | O(1) | 不稳定 |\n| 冒泡排序 | O(n^2) | O(n^2) | O(n) | O(1) | 稳定 |\n| 桶排序 | O(n) | O(n) | O(n) | max | 稳定 |\n| 归并排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(1) | 稳定 |\n| 堆排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(1) | 不稳定 |\n###### 这些都是面试的时候比较经常问的排序算法，有错误可以发邮件给我！\n","slug":"sortAlgorithm","published":1,"updated":"2017-04-19T14:30:28.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d30334001fimw4fhr3vwhb","content":"<p></p><h1 align=\"center\">各大排序算法综合总结</h1><p></p>\n<h6 id=\"详解中包括了时间复杂度（最差-平均-最优），面试宝典\"><a href=\"#详解中包括了时间复杂度（最差-平均-最优），面试宝典\" class=\"headerlink\" title=\"详解中包括了时间复杂度（最差/平均/最优），面试宝典\"></a>详解中包括了时间复杂度（最差/平均/最优），面试宝典</h6><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">算法</th>\n<th style=\"text-align:center\">最差</th>\n<th style=\"text-align:center\">平均</th>\n<th style=\"text-align:center\">最优</th>\n<th style=\"text-align:center\">空间</th>\n<th style=\"text-align:center\">稳定性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">直接插入排序</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">希尔排序</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">视情况而定</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">不稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">基数排序</td>\n<td style=\"text-align:center\">O(d(n+r))</td>\n<td style=\"text-align:center\">O(d(n+r))</td>\n<td style=\"text-align:center\">O(d(n+r))</td>\n<td style=\"text-align:center\">O(n+r)</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快速排序</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">不稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">选择排序</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">不稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">冒泡排序</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">桶排序</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">max</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">归并排序</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">堆排序</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">不稳定</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"这些都是面试的时候比较经常问的排序算法，有错误可以发邮件给我！\"><a href=\"#这些都是面试的时候比较经常问的排序算法，有错误可以发邮件给我！\" class=\"headerlink\" title=\"这些都是面试的时候比较经常问的排序算法，有错误可以发邮件给我！\"></a>这些都是面试的时候比较经常问的排序算法，有错误可以发邮件给我！</h6>","excerpt":"","more":"<p></p><h1 align=\"center\">各大排序算法综合总结</h1><p></p>\n<h6 id=\"详解中包括了时间复杂度（最差-平均-最优），面试宝典\"><a href=\"#详解中包括了时间复杂度（最差-平均-最优），面试宝典\" class=\"headerlink\" title=\"详解中包括了时间复杂度（最差/平均/最优），面试宝典\"></a>详解中包括了时间复杂度（最差/平均/最优），面试宝典</h6><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">算法</th>\n<th style=\"text-align:center\">最差</th>\n<th style=\"text-align:center\">平均</th>\n<th style=\"text-align:center\">最优</th>\n<th style=\"text-align:center\">空间</th>\n<th style=\"text-align:center\">稳定性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">直接插入排序</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">希尔排序</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">视情况而定</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">不稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">基数排序</td>\n<td style=\"text-align:center\">O(d(n+r))</td>\n<td style=\"text-align:center\">O(d(n+r))</td>\n<td style=\"text-align:center\">O(d(n+r))</td>\n<td style=\"text-align:center\">O(n+r)</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">快速排序</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">不稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">选择排序</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">不稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">冒泡排序</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(n^2)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">桶排序</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">O(n)</td>\n<td style=\"text-align:center\">max</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">归并排序</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">稳定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">堆排序</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(nlogn)</td>\n<td style=\"text-align:center\">O(1)</td>\n<td style=\"text-align:center\">不稳定</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"这些都是面试的时候比较经常问的排序算法，有错误可以发邮件给我！\"><a href=\"#这些都是面试的时候比较经常问的排序算法，有错误可以发邮件给我！\" class=\"headerlink\" title=\"这些都是面试的时候比较经常问的排序算法，有错误可以发邮件给我！\"></a>这些都是面试的时候比较经常问的排序算法，有错误可以发邮件给我！</h6>"},{"title":"利用tinymce编写网页文章并插入到MySQL数据库","date":"2016-10-04T10:23:22.000Z","_content":"#### tinymce是一个轻量级的基于浏览器的所见即所得编辑器，由JavaScript写成。以下我将为大家介绍如何使用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库。（将文章数据库表设计为只有两个字段，一个是int型的自增长id字段，另一个是text类型的article字段）\n##### 　　第一步：在你的网站根目录（或者其他网站目录也行）下新建一个editor.html文件，编辑代码如下：\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>tinymce编辑文章</title>\n    <script src=\"http://cdn.tinymce.com/4/tinymce.min.js\"><script>\n    <script src=\"./event.js\"></script>\n    <script src=\"./htmlcode.js\"></script>\n</head>\n<body>\n    <textarea id=\"editor\" name=\"content\"></textarea>\n    <input id=\"handin\" type=\"button\" value=\"提交\">\n</body>\n</html>\n```\n 　　这个文件将tinymce文章编辑器插件成功应用到我们的页面当中,并添加了一个用于提交文章到数据库的“提交”按钮。\n\n 　　其中引入的event.js文件代码如下，应将其置于同一目录下。它是一个为DOM添加事件处理的兼容脚本。\n```javascript\n/**\n * 为DOM添加事件处理的兼容脚本\n * /\nvar EventUtil = {\n    // 添加句柄\n    addHandler: function (element, type, handler) {\n        if (element.addEventListener) {\n            element.addEventListener(type, handler, false);\n        }\n        else if (element.attachEvent) {\n            element.attachEvent('on'+type, handler);\n        }\n        else {\n            element['on'+type] = handler;\n        }\n    }\n} \n```\n 　　其中引入的htmlcode.js文件代码如下，同样将其置于editor.html同一目录下。它是一个实现html转码的脚本。\n```javascript\n/**\n * 用浏览器内部转换器实现\n * javascript处理HTML的Encode(转码)和Decode(解码)\n */\nvar HtmlUtil = {\n    // 用浏览器内部转换器实现html转码\n    // 首先动态创建一个容器标签元素，如DIV，\n    // 然后将要转换的字符串设置为这个元素的innerText(ie支持)\n    // 或者textContent(火狐，google支持)，最后返回这个元素的innerHTML，\n    // 即得到经过HTML编码转换的字符串了。\n        htmlEncode: function (html) {  \n            var div = document.createElement('div');  \n            div.appendChild(document.createTextNode(html));  \n            return div.innerHTML;\n        },\n        // 用浏览器内部转换器实现html解码\n        // 首先动态创建一个容器标签元素，如DIV，\n        // 然后将要转换的字符串设置为这个元素的innerHTML(ie，火狐，google都支持)，\n        // 最后返回这个元素的innerText(ie支持)或者textContent(火狐，google支持)，\n        // 即得到经过HTML解码的字符串了。\n        htmlDecode: function (text) {  \n            var div = document.createElement('div');  \n            div.innerHTML = text;  \n            return div.innerText || div.textContent;\n        }\n    }\n```\n##### 　　第二步：将以下代码插入到editor.html文件的底部，其实就是一些用script标签包起来的JavaScript代码。\n```javascript\nEventUtil.addHandler(document.getElementById('handin'), 'click', function () {\n    // 创建一个XMLHttpRequest对象\n    var request = new XMLHttpRequest();\n    // 对articleToDB.php文件发出POST请求\n    request.open('POST', './articleToDB.php');\n\n\n    // ajax传过去的参数都会被处理为字符串，因此不需要再将参数转换为字符串\n    // 先进行“去\\n”操作，再进行html编码，使用的是浏览器内部转换器\n    var article = HtmlUtil.htmlEncode((tinyMCE.activeEditor.getContent()).replace(/[\\n]/ig, ''));\n    // tinyMCE.activeEditor.getContent()方法会在我们写的文章里面的每一个\\前再加一个\\\n    // 当我们在文章里只写了一个\\时，\n    // tinyMCE.activeEditor.getContent()方法给我们多加了一个\\\n    // 此时就有了两个\\，但是正则表达式不会匹配第一个作为转义字符作用的反斜杠'\\'，\n    // 在用正则表达式匹配字符串时，转义符相当于不存在\n    // 因此在这里用正则匹配时就只需要4个转义符\n    // 用replace()方法将其替换为4个\\\n    // 即符合mysql数据库3个转义符转义一个字符的规则\n    article = article.replace(/\\\\/g, '\\\\\\\\');\n    // 将获取的html代码中的\"替换为\\\\\\\"\n    // 这样ajax才能正确读取参数并将其完整插入数据库\n    article = article.replace(/[\"]/g, '\\\\\\\"');\n    // 对处理完的字符串进行最终的编码，去除取值符等敏感字符对ajax传值的影响\n    article = encodeURIComponent(article);\n    // 拼接请求主体\n    var data = 'article=' + article;\n    // POST请求方式必须设置的请求头格式\n    request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n    request.send(data);\n\n\n    request.onreadystatechange = function () {\n        if (request.readyState === 4) {\n            if (request.status === 200) {\n                // 弹出相关文字提示\n                alert(request.responseText);\n            }\n            else {\n                // 当请求不到数据时就会导致错误，用以下方法显示\n                alert('发生错误：' + request.status);\n            }\n        }\n    }\n});\n```\n##### 　　第三步：编写articleToDB.php文件实现文章插入MySQL数据库，并将其置于editor.html同一目录下。\n```php\n    <?php\n    header('Content-Type: application/json; charset=utf-8');\n    // 若取不到值，那么进行相应的信息反馈并结束\n    if (!isset($_POST['article']) || empty($_POST['article'])) {\n        echo '您还没有编辑文章';\n        exit;\n    }\n    // 面向对象的建立数据库连接的方法\n    // 应该填写服务器数据库的主机名，用户名以及相对应的密码\n    // 比如$db = new mysqli('localhost','root','123456789');\n    $db = new mysqli('主机名','用户名','密码');\n\n    if (mysqli_connect_errno()) {\n        echo '连接数据库失败，请稍后重试！';\n        exit;\n    }\n    // 判断数据库是否存在\n    $select = $db->select_db('article');\n    if (!$select) {\n        // 创建数据库失败后的处理提示\n        $createDB_query = 'create database article';\n        $createDB = $db->query($createDB_query);\n        if (!$createDB) {\n            echo '创建数据库失败';\n            exit;\n        }\n        //使用数据库失败后的处理提示\n        $useDB_query = 'use article';\n        $useDB = $db->query($useDB_query);\n        if (!$useDB) {\n            echo '使用数据库失败';\n            exit;\n        }\n        else {\n\t        echo '成功';\n            exit;\n        }\n    }\n    // 设置数据库编码\n    $db->query('set names utf8');\n    // 此处在接收到经过编码的article后，通过=操作符，实现了解码\n    $article = $_POST['article'];\n    $insert_query = 'insert into text2 values(NULL, \"'.$article.'\")';\n    $insert_result = $db->query($insert_query);\n    // 对返回结果进行判断\n    if ($insert_result) {\n        echo '成功！管理员文章发布成功！';\n    }\n    else {\n        echo '失败！管理员文章发布失败！';\n    }\n    // 关闭数据库连接\n    $db->close();\n```\n#### 　　以上三步便是利用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库的全过程，需要注意的点有以下几个：\n 　　1. html代码必须经过转码后才能插入数据库; \n\n 　　2. 字符串'\\\\\\'长度为1而不是2;\n\n 　　3. 正则表达式匹配字符串时并不匹配起转义字符作用的反斜杠'\\';\n\n 　　4. 在插入MySQL数据库时，3个转义字符转义一个字符","source":"_posts/tinymce-MySQL.md","raw":"---\ntitle: 利用tinymce编写网页文章并插入到MySQL数据库\ndate: 2016-10-04 18:23:22\ncategories: [技术类-前端]\ntags: [插件]\n---\n#### tinymce是一个轻量级的基于浏览器的所见即所得编辑器，由JavaScript写成。以下我将为大家介绍如何使用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库。（将文章数据库表设计为只有两个字段，一个是int型的自增长id字段，另一个是text类型的article字段）\n##### 　　第一步：在你的网站根目录（或者其他网站目录也行）下新建一个editor.html文件，编辑代码如下：\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>tinymce编辑文章</title>\n    <script src=\"http://cdn.tinymce.com/4/tinymce.min.js\"><script>\n    <script src=\"./event.js\"></script>\n    <script src=\"./htmlcode.js\"></script>\n</head>\n<body>\n    <textarea id=\"editor\" name=\"content\"></textarea>\n    <input id=\"handin\" type=\"button\" value=\"提交\">\n</body>\n</html>\n```\n 　　这个文件将tinymce文章编辑器插件成功应用到我们的页面当中,并添加了一个用于提交文章到数据库的“提交”按钮。\n\n 　　其中引入的event.js文件代码如下，应将其置于同一目录下。它是一个为DOM添加事件处理的兼容脚本。\n```javascript\n/**\n * 为DOM添加事件处理的兼容脚本\n * /\nvar EventUtil = {\n    // 添加句柄\n    addHandler: function (element, type, handler) {\n        if (element.addEventListener) {\n            element.addEventListener(type, handler, false);\n        }\n        else if (element.attachEvent) {\n            element.attachEvent('on'+type, handler);\n        }\n        else {\n            element['on'+type] = handler;\n        }\n    }\n} \n```\n 　　其中引入的htmlcode.js文件代码如下，同样将其置于editor.html同一目录下。它是一个实现html转码的脚本。\n```javascript\n/**\n * 用浏览器内部转换器实现\n * javascript处理HTML的Encode(转码)和Decode(解码)\n */\nvar HtmlUtil = {\n    // 用浏览器内部转换器实现html转码\n    // 首先动态创建一个容器标签元素，如DIV，\n    // 然后将要转换的字符串设置为这个元素的innerText(ie支持)\n    // 或者textContent(火狐，google支持)，最后返回这个元素的innerHTML，\n    // 即得到经过HTML编码转换的字符串了。\n        htmlEncode: function (html) {  \n            var div = document.createElement('div');  \n            div.appendChild(document.createTextNode(html));  \n            return div.innerHTML;\n        },\n        // 用浏览器内部转换器实现html解码\n        // 首先动态创建一个容器标签元素，如DIV，\n        // 然后将要转换的字符串设置为这个元素的innerHTML(ie，火狐，google都支持)，\n        // 最后返回这个元素的innerText(ie支持)或者textContent(火狐，google支持)，\n        // 即得到经过HTML解码的字符串了。\n        htmlDecode: function (text) {  \n            var div = document.createElement('div');  \n            div.innerHTML = text;  \n            return div.innerText || div.textContent;\n        }\n    }\n```\n##### 　　第二步：将以下代码插入到editor.html文件的底部，其实就是一些用script标签包起来的JavaScript代码。\n```javascript\nEventUtil.addHandler(document.getElementById('handin'), 'click', function () {\n    // 创建一个XMLHttpRequest对象\n    var request = new XMLHttpRequest();\n    // 对articleToDB.php文件发出POST请求\n    request.open('POST', './articleToDB.php');\n\n\n    // ajax传过去的参数都会被处理为字符串，因此不需要再将参数转换为字符串\n    // 先进行“去\\n”操作，再进行html编码，使用的是浏览器内部转换器\n    var article = HtmlUtil.htmlEncode((tinyMCE.activeEditor.getContent()).replace(/[\\n]/ig, ''));\n    // tinyMCE.activeEditor.getContent()方法会在我们写的文章里面的每一个\\前再加一个\\\n    // 当我们在文章里只写了一个\\时，\n    // tinyMCE.activeEditor.getContent()方法给我们多加了一个\\\n    // 此时就有了两个\\，但是正则表达式不会匹配第一个作为转义字符作用的反斜杠'\\'，\n    // 在用正则表达式匹配字符串时，转义符相当于不存在\n    // 因此在这里用正则匹配时就只需要4个转义符\n    // 用replace()方法将其替换为4个\\\n    // 即符合mysql数据库3个转义符转义一个字符的规则\n    article = article.replace(/\\\\/g, '\\\\\\\\');\n    // 将获取的html代码中的\"替换为\\\\\\\"\n    // 这样ajax才能正确读取参数并将其完整插入数据库\n    article = article.replace(/[\"]/g, '\\\\\\\"');\n    // 对处理完的字符串进行最终的编码，去除取值符等敏感字符对ajax传值的影响\n    article = encodeURIComponent(article);\n    // 拼接请求主体\n    var data = 'article=' + article;\n    // POST请求方式必须设置的请求头格式\n    request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n    request.send(data);\n\n\n    request.onreadystatechange = function () {\n        if (request.readyState === 4) {\n            if (request.status === 200) {\n                // 弹出相关文字提示\n                alert(request.responseText);\n            }\n            else {\n                // 当请求不到数据时就会导致错误，用以下方法显示\n                alert('发生错误：' + request.status);\n            }\n        }\n    }\n});\n```\n##### 　　第三步：编写articleToDB.php文件实现文章插入MySQL数据库，并将其置于editor.html同一目录下。\n```php\n    <?php\n    header('Content-Type: application/json; charset=utf-8');\n    // 若取不到值，那么进行相应的信息反馈并结束\n    if (!isset($_POST['article']) || empty($_POST['article'])) {\n        echo '您还没有编辑文章';\n        exit;\n    }\n    // 面向对象的建立数据库连接的方法\n    // 应该填写服务器数据库的主机名，用户名以及相对应的密码\n    // 比如$db = new mysqli('localhost','root','123456789');\n    $db = new mysqli('主机名','用户名','密码');\n\n    if (mysqli_connect_errno()) {\n        echo '连接数据库失败，请稍后重试！';\n        exit;\n    }\n    // 判断数据库是否存在\n    $select = $db->select_db('article');\n    if (!$select) {\n        // 创建数据库失败后的处理提示\n        $createDB_query = 'create database article';\n        $createDB = $db->query($createDB_query);\n        if (!$createDB) {\n            echo '创建数据库失败';\n            exit;\n        }\n        //使用数据库失败后的处理提示\n        $useDB_query = 'use article';\n        $useDB = $db->query($useDB_query);\n        if (!$useDB) {\n            echo '使用数据库失败';\n            exit;\n        }\n        else {\n\t        echo '成功';\n            exit;\n        }\n    }\n    // 设置数据库编码\n    $db->query('set names utf8');\n    // 此处在接收到经过编码的article后，通过=操作符，实现了解码\n    $article = $_POST['article'];\n    $insert_query = 'insert into text2 values(NULL, \"'.$article.'\")';\n    $insert_result = $db->query($insert_query);\n    // 对返回结果进行判断\n    if ($insert_result) {\n        echo '成功！管理员文章发布成功！';\n    }\n    else {\n        echo '失败！管理员文章发布失败！';\n    }\n    // 关闭数据库连接\n    $db->close();\n```\n#### 　　以上三步便是利用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库的全过程，需要注意的点有以下几个：\n 　　1. html代码必须经过转码后才能插入数据库; \n\n 　　2. 字符串'\\\\\\'长度为1而不是2;\n\n 　　3. 正则表达式匹配字符串时并不匹配起转义字符作用的反斜杠'\\';\n\n 　　4. 在插入MySQL数据库时，3个转义字符转义一个字符","slug":"tinymce-MySQL","published":1,"updated":"2017-04-19T14:30:15.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d30337001jimw47lzqfj1j","content":"<h4 id=\"tinymce是一个轻量级的基于浏览器的所见即所得编辑器，由JavaScript写成。以下我将为大家介绍如何使用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库。（将文章数据库表设计为只有两个字段，一个是int型的自增长id字段，另一个是text类型的article字段）\"><a href=\"#tinymce是一个轻量级的基于浏览器的所见即所得编辑器，由JavaScript写成。以下我将为大家介绍如何使用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库。（将文章数据库表设计为只有两个字段，一个是int型的自增长id字段，另一个是text类型的article字段）\" class=\"headerlink\" title=\"tinymce是一个轻量级的基于浏览器的所见即所得编辑器，由JavaScript写成。以下我将为大家介绍如何使用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库。（将文章数据库表设计为只有两个字段，一个是int型的自增长id字段，另一个是text类型的article字段）\"></a>tinymce是一个轻量级的基于浏览器的所见即所得编辑器，由JavaScript写成。以下我将为大家介绍如何使用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库。（将文章数据库表设计为只有两个字段，一个是int型的自增长id字段，另一个是text类型的article字段）</h4><h5 id=\"第一步：在你的网站根目录（或者其他网站目录也行）下新建一个editor-html文件，编辑代码如下：\"><a href=\"#第一步：在你的网站根目录（或者其他网站目录也行）下新建一个editor-html文件，编辑代码如下：\" class=\"headerlink\" title=\"　　第一步：在你的网站根目录（或者其他网站目录也行）下新建一个editor.html文件，编辑代码如下：\"></a>　　第一步：在你的网站根目录（或者其他网站目录也行）下新建一个editor.html文件，编辑代码如下：</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>tinymce编辑文章<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.tinymce.com/4/tinymce.min.js\"</span>&gt;</span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"xml\"></span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./event.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./htmlcode.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">id</span>=<span class=\"string\">\"editor\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"handin\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p> 　　这个文件将tinymce文章编辑器插件成功应用到我们的页面当中,并添加了一个用于提交文章到数据库的“提交”按钮。</p>\n<p> 　　其中引入的event.js文件代码如下，应将其置于同一目录下。它是一个为DOM添加事件处理的兼容脚本。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 为DOM添加事件处理的兼容脚本</div><div class=\"line\"> * /</div><div class=\"line\">var EventUtil = &#123;</div><div class=\"line\">    // 添加句柄</div><div class=\"line\">    addHandler: function (element, type, handler) &#123;</div><div class=\"line\">        if (element.addEventListener) &#123;</div><div class=\"line\">            element.addEventListener(type, handler, false);</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if (element.attachEvent) &#123;</div><div class=\"line\">            element.attachEvent('on'+type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">        else &#123;</div><div class=\"line\">            element['on'+type] = handler;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 　　其中引入的htmlcode.js文件代码如下，同样将其置于editor.html同一目录下。它是一个实现html转码的脚本。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 用浏览器内部转换器实现</div><div class=\"line\"> * javascript处理HTML的Encode(转码)和Decode(解码)</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlUtil = &#123;</div><div class=\"line\">    <span class=\"comment\">// 用浏览器内部转换器实现html转码</span></div><div class=\"line\">    <span class=\"comment\">// 首先动态创建一个容器标签元素，如DIV，</span></div><div class=\"line\">    <span class=\"comment\">// 然后将要转换的字符串设置为这个元素的innerText(ie支持)</span></div><div class=\"line\">    <span class=\"comment\">// 或者textContent(火狐，google支持)，最后返回这个元素的innerHTML，</span></div><div class=\"line\">    <span class=\"comment\">// 即得到经过HTML编码转换的字符串了。</span></div><div class=\"line\">        htmlEncode: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">html</span>) </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);  </div><div class=\"line\">            div.appendChild(<span class=\"built_in\">document</span>.createTextNode(html));  </div><div class=\"line\">            <span class=\"keyword\">return</span> div.innerHTML;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"comment\">// 用浏览器内部转换器实现html解码</span></div><div class=\"line\">        <span class=\"comment\">// 首先动态创建一个容器标签元素，如DIV，</span></div><div class=\"line\">        <span class=\"comment\">// 然后将要转换的字符串设置为这个元素的innerHTML(ie，火狐，google都支持)，</span></div><div class=\"line\">        <span class=\"comment\">// 最后返回这个元素的innerText(ie支持)或者textContent(火狐，google支持)，</span></div><div class=\"line\">        <span class=\"comment\">// 即得到经过HTML解码的字符串了。</span></div><div class=\"line\">        htmlDecode: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);  </div><div class=\"line\">            div.innerHTML = text;  </div><div class=\"line\">            <span class=\"keyword\">return</span> div.innerText || div.textContent;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"第二步：将以下代码插入到editor-html文件的底部，其实就是一些用script标签包起来的JavaScript代码。\"><a href=\"#第二步：将以下代码插入到editor-html文件的底部，其实就是一些用script标签包起来的JavaScript代码。\" class=\"headerlink\" title=\"　　第二步：将以下代码插入到editor.html文件的底部，其实就是一些用script标签包起来的JavaScript代码。\"></a>　　第二步：将以下代码插入到editor.html文件的底部，其实就是一些用script标签包起来的JavaScript代码。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">EventUtil.addHandler(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'handin'</span>), <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 创建一个XMLHttpRequest对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    <span class=\"comment\">// 对articleToDB.php文件发出POST请求</span></div><div class=\"line\">    request.open(<span class=\"string\">'POST'</span>, <span class=\"string\">'./articleToDB.php'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ajax传过去的参数都会被处理为字符串，因此不需要再将参数转换为字符串</span></div><div class=\"line\">    <span class=\"comment\">// 先进行“去\\n”操作，再进行html编码，使用的是浏览器内部转换器</span></div><div class=\"line\">    <span class=\"keyword\">var</span> article = HtmlUtil.htmlEncode((tinyMCE.activeEditor.getContent()).replace(<span class=\"regexp\">/[\\n]/ig</span>, <span class=\"string\">''</span>));</div><div class=\"line\">    <span class=\"comment\">// tinyMCE.activeEditor.getContent()方法会在我们写的文章里面的每一个\\前再加一个\\</span></div><div class=\"line\">    <span class=\"comment\">// 当我们在文章里只写了一个\\时，</span></div><div class=\"line\">    <span class=\"comment\">// tinyMCE.activeEditor.getContent()方法给我们多加了一个\\</span></div><div class=\"line\">    <span class=\"comment\">// 此时就有了两个\\，但是正则表达式不会匹配第一个作为转义字符作用的反斜杠'\\'，</span></div><div class=\"line\">    <span class=\"comment\">// 在用正则表达式匹配字符串时，转义符相当于不存在</span></div><div class=\"line\">    <span class=\"comment\">// 因此在这里用正则匹配时就只需要4个转义符</span></div><div class=\"line\">    <span class=\"comment\">// 用replace()方法将其替换为4个\\</span></div><div class=\"line\">    <span class=\"comment\">// 即符合mysql数据库3个转义符转义一个字符的规则</span></div><div class=\"line\">    article = article.replace(<span class=\"regexp\">/\\\\/g</span>, <span class=\"string\">'\\\\\\\\'</span>);</div><div class=\"line\">    <span class=\"comment\">// 将获取的html代码中的\"替换为\\\\\\\"</span></div><div class=\"line\">    <span class=\"comment\">// 这样ajax才能正确读取参数并将其完整插入数据库</span></div><div class=\"line\">    article = article.replace(<span class=\"regexp\">/[\"]/g</span>, <span class=\"string\">'\\\\\\\"'</span>);</div><div class=\"line\">    <span class=\"comment\">// 对处理完的字符串进行最终的编码，去除取值符等敏感字符对ajax传值的影响</span></div><div class=\"line\">    article = <span class=\"built_in\">encodeURIComponent</span>(article);</div><div class=\"line\">    <span class=\"comment\">// 拼接请求主体</span></div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"string\">'article='</span> + article;</div><div class=\"line\">    <span class=\"comment\">// POST请求方式必须设置的请求头格式</span></div><div class=\"line\">    request.setRequestHeader(<span class=\"string\">'Content-type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</div><div class=\"line\">    request.send(data);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    request.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (request.readyState === <span class=\"number\">4</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (request.status === <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// 弹出相关文字提示</span></div><div class=\"line\">                alert(request.responseText);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 当请求不到数据时就会导致错误，用以下方法显示</span></div><div class=\"line\">                alert(<span class=\"string\">'发生错误：'</span> + request.status);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"第三步：编写articleToDB-php文件实现文章插入MySQL数据库，并将其置于editor-html同一目录下。\"><a href=\"#第三步：编写articleToDB-php文件实现文章插入MySQL数据库，并将其置于editor-html同一目录下。\" class=\"headerlink\" title=\"　　第三步：编写articleToDB.php文件实现文章插入MySQL数据库，并将其置于editor.html同一目录下。\"></a>　　第三步：编写articleToDB.php文件实现文章插入MySQL数据库，并将其置于editor.html同一目录下。</h5><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">header(<span class=\"string\">'Content-Type: application/json; charset=utf-8'</span>);</div><div class=\"line\"><span class=\"comment\">// 若取不到值，那么进行相应的信息反馈并结束</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($_POST[<span class=\"string\">'article'</span>]) || <span class=\"keyword\">empty</span>($_POST[<span class=\"string\">'article'</span>])) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'您还没有编辑文章'</span>;</div><div class=\"line\">    <span class=\"keyword\">exit</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 面向对象的建立数据库连接的方法</span></div><div class=\"line\"><span class=\"comment\">// 应该填写服务器数据库的主机名，用户名以及相对应的密码</span></div><div class=\"line\"><span class=\"comment\">// 比如$db = new mysqli('localhost','root','123456789');</span></div><div class=\"line\">$db = <span class=\"keyword\">new</span> mysqli(<span class=\"string\">'主机名'</span>,<span class=\"string\">'用户名'</span>,<span class=\"string\">'密码'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (mysqli_connect_errno()) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'连接数据库失败，请稍后重试！'</span>;</div><div class=\"line\">    <span class=\"keyword\">exit</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 判断数据库是否存在</span></div><div class=\"line\">$select = $db-&gt;select_db(<span class=\"string\">'article'</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$select) &#123;</div><div class=\"line\">    <span class=\"comment\">// 创建数据库失败后的处理提示</span></div><div class=\"line\">    $createDB_query = <span class=\"string\">'create database article'</span>;</div><div class=\"line\">    $createDB = $db-&gt;query($createDB_query);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!$createDB) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'创建数据库失败'</span>;</div><div class=\"line\">        <span class=\"keyword\">exit</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//使用数据库失败后的处理提示</span></div><div class=\"line\">    $useDB_query = <span class=\"string\">'use article'</span>;</div><div class=\"line\">    $useDB = $db-&gt;query($useDB_query);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!$useDB) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'使用数据库失败'</span>;</div><div class=\"line\">        <span class=\"keyword\">exit</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">     <span class=\"keyword\">echo</span> <span class=\"string\">'成功'</span>;</div><div class=\"line\">        <span class=\"keyword\">exit</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 设置数据库编码</span></div><div class=\"line\">$db-&gt;query(<span class=\"string\">'set names utf8'</span>);</div><div class=\"line\"><span class=\"comment\">// 此处在接收到经过编码的article后，通过=操作符，实现了解码</span></div><div class=\"line\">$article = $_POST[<span class=\"string\">'article'</span>];</div><div class=\"line\">$insert_query = <span class=\"string\">'insert into text2 values(NULL, \"'</span>.$article.<span class=\"string\">'\")'</span>;</div><div class=\"line\">$insert_result = $db-&gt;query($insert_query);</div><div class=\"line\"><span class=\"comment\">// 对返回结果进行判断</span></div><div class=\"line\"><span class=\"keyword\">if</span> ($insert_result) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'成功！管理员文章发布成功！'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'失败！管理员文章发布失败！'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 关闭数据库连接</span></div><div class=\"line\">$db-&gt;close();</div></pre></td></tr></table></figure>\n<h4 id=\"以上三步便是利用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库的全过程，需要注意的点有以下几个：\"><a href=\"#以上三步便是利用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库的全过程，需要注意的点有以下几个：\" class=\"headerlink\" title=\"　　以上三步便是利用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库的全过程，需要注意的点有以下几个：\"></a>　　以上三步便是利用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库的全过程，需要注意的点有以下几个：</h4><p> 　　1. html代码必须经过转码后才能插入数据库; </p>\n<p> 　　2. 字符串’\\\\’长度为1而不是2;</p>\n<p> 　　3. 正则表达式匹配字符串时并不匹配起转义字符作用的反斜杠’\\’;</p>\n<p> 　　4. 在插入MySQL数据库时，3个转义字符转义一个字符</p>\n","excerpt":"","more":"<h4 id=\"tinymce是一个轻量级的基于浏览器的所见即所得编辑器，由JavaScript写成。以下我将为大家介绍如何使用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库。（将文章数据库表设计为只有两个字段，一个是int型的自增长id字段，另一个是text类型的article字段）\"><a href=\"#tinymce是一个轻量级的基于浏览器的所见即所得编辑器，由JavaScript写成。以下我将为大家介绍如何使用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库。（将文章数据库表设计为只有两个字段，一个是int型的自增长id字段，另一个是text类型的article字段）\" class=\"headerlink\" title=\"tinymce是一个轻量级的基于浏览器的所见即所得编辑器，由JavaScript写成。以下我将为大家介绍如何使用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库。（将文章数据库表设计为只有两个字段，一个是int型的自增长id字段，另一个是text类型的article字段）\"></a>tinymce是一个轻量级的基于浏览器的所见即所得编辑器，由JavaScript写成。以下我将为大家介绍如何使用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库。（将文章数据库表设计为只有两个字段，一个是int型的自增长id字段，另一个是text类型的article字段）</h4><h5 id=\"第一步：在你的网站根目录（或者其他网站目录也行）下新建一个editor-html文件，编辑代码如下：\"><a href=\"#第一步：在你的网站根目录（或者其他网站目录也行）下新建一个editor-html文件，编辑代码如下：\" class=\"headerlink\" title=\"　　第一步：在你的网站根目录（或者其他网站目录也行）下新建一个editor.html文件，编辑代码如下：\"></a>　　第一步：在你的网站根目录（或者其他网站目录也行）下新建一个editor.html文件，编辑代码如下：</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>tinymce编辑文章<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.tinymce.com/4/tinymce.min.js\"</span>&gt;</span><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"xml\"></span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./event.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./htmlcode.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">id</span>=<span class=\"string\">\"editor\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"handin\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p> 　　这个文件将tinymce文章编辑器插件成功应用到我们的页面当中,并添加了一个用于提交文章到数据库的“提交”按钮。</p>\n<p> 　　其中引入的event.js文件代码如下，应将其置于同一目录下。它是一个为DOM添加事件处理的兼容脚本。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 为DOM添加事件处理的兼容脚本</div><div class=\"line\"> * /</div><div class=\"line\">var EventUtil = &#123;</div><div class=\"line\">    // 添加句柄</div><div class=\"line\">    addHandler: function (element, type, handler) &#123;</div><div class=\"line\">        if (element.addEventListener) &#123;</div><div class=\"line\">            element.addEventListener(type, handler, false);</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if (element.attachEvent) &#123;</div><div class=\"line\">            element.attachEvent('on'+type, handler);</div><div class=\"line\">        &#125;</div><div class=\"line\">        else &#123;</div><div class=\"line\">            element['on'+type] = handler;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 　　其中引入的htmlcode.js文件代码如下，同样将其置于editor.html同一目录下。它是一个实现html转码的脚本。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 用浏览器内部转换器实现</div><div class=\"line\"> * javascript处理HTML的Encode(转码)和Decode(解码)</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlUtil = &#123;</div><div class=\"line\">    <span class=\"comment\">// 用浏览器内部转换器实现html转码</span></div><div class=\"line\">    <span class=\"comment\">// 首先动态创建一个容器标签元素，如DIV，</span></div><div class=\"line\">    <span class=\"comment\">// 然后将要转换的字符串设置为这个元素的innerText(ie支持)</span></div><div class=\"line\">    <span class=\"comment\">// 或者textContent(火狐，google支持)，最后返回这个元素的innerHTML，</span></div><div class=\"line\">    <span class=\"comment\">// 即得到经过HTML编码转换的字符串了。</span></div><div class=\"line\">        htmlEncode: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">html</span>) </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);  </div><div class=\"line\">            div.appendChild(<span class=\"built_in\">document</span>.createTextNode(html));  </div><div class=\"line\">            <span class=\"keyword\">return</span> div.innerHTML;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"comment\">// 用浏览器内部转换器实现html解码</span></div><div class=\"line\">        <span class=\"comment\">// 首先动态创建一个容器标签元素，如DIV，</span></div><div class=\"line\">        <span class=\"comment\">// 然后将要转换的字符串设置为这个元素的innerHTML(ie，火狐，google都支持)，</span></div><div class=\"line\">        <span class=\"comment\">// 最后返回这个元素的innerText(ie支持)或者textContent(火狐，google支持)，</span></div><div class=\"line\">        <span class=\"comment\">// 即得到经过HTML解码的字符串了。</span></div><div class=\"line\">        htmlDecode: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">text</span>) </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);  </div><div class=\"line\">            div.innerHTML = text;  </div><div class=\"line\">            <span class=\"keyword\">return</span> div.innerText || div.textContent;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"第二步：将以下代码插入到editor-html文件的底部，其实就是一些用script标签包起来的JavaScript代码。\"><a href=\"#第二步：将以下代码插入到editor-html文件的底部，其实就是一些用script标签包起来的JavaScript代码。\" class=\"headerlink\" title=\"　　第二步：将以下代码插入到editor.html文件的底部，其实就是一些用script标签包起来的JavaScript代码。\"></a>　　第二步：将以下代码插入到editor.html文件的底部，其实就是一些用script标签包起来的JavaScript代码。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">EventUtil.addHandler(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'handin'</span>), <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 创建一个XMLHttpRequest对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">    <span class=\"comment\">// 对articleToDB.php文件发出POST请求</span></div><div class=\"line\">    request.open(<span class=\"string\">'POST'</span>, <span class=\"string\">'./articleToDB.php'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ajax传过去的参数都会被处理为字符串，因此不需要再将参数转换为字符串</span></div><div class=\"line\">    <span class=\"comment\">// 先进行“去\\n”操作，再进行html编码，使用的是浏览器内部转换器</span></div><div class=\"line\">    <span class=\"keyword\">var</span> article = HtmlUtil.htmlEncode((tinyMCE.activeEditor.getContent()).replace(<span class=\"regexp\">/[\\n]/ig</span>, <span class=\"string\">''</span>));</div><div class=\"line\">    <span class=\"comment\">// tinyMCE.activeEditor.getContent()方法会在我们写的文章里面的每一个\\前再加一个\\</span></div><div class=\"line\">    <span class=\"comment\">// 当我们在文章里只写了一个\\时，</span></div><div class=\"line\">    <span class=\"comment\">// tinyMCE.activeEditor.getContent()方法给我们多加了一个\\</span></div><div class=\"line\">    <span class=\"comment\">// 此时就有了两个\\，但是正则表达式不会匹配第一个作为转义字符作用的反斜杠'\\'，</span></div><div class=\"line\">    <span class=\"comment\">// 在用正则表达式匹配字符串时，转义符相当于不存在</span></div><div class=\"line\">    <span class=\"comment\">// 因此在这里用正则匹配时就只需要4个转义符</span></div><div class=\"line\">    <span class=\"comment\">// 用replace()方法将其替换为4个\\</span></div><div class=\"line\">    <span class=\"comment\">// 即符合mysql数据库3个转义符转义一个字符的规则</span></div><div class=\"line\">    article = article.replace(<span class=\"regexp\">/\\\\/g</span>, <span class=\"string\">'\\\\\\\\'</span>);</div><div class=\"line\">    <span class=\"comment\">// 将获取的html代码中的\"替换为\\\\\\\"</span></div><div class=\"line\">    <span class=\"comment\">// 这样ajax才能正确读取参数并将其完整插入数据库</span></div><div class=\"line\">    article = article.replace(<span class=\"regexp\">/[\"]/g</span>, <span class=\"string\">'\\\\\\\"'</span>);</div><div class=\"line\">    <span class=\"comment\">// 对处理完的字符串进行最终的编码，去除取值符等敏感字符对ajax传值的影响</span></div><div class=\"line\">    article = <span class=\"built_in\">encodeURIComponent</span>(article);</div><div class=\"line\">    <span class=\"comment\">// 拼接请求主体</span></div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"string\">'article='</span> + article;</div><div class=\"line\">    <span class=\"comment\">// POST请求方式必须设置的请求头格式</span></div><div class=\"line\">    request.setRequestHeader(<span class=\"string\">'Content-type'</span>, <span class=\"string\">'application/x-www-form-urlencoded'</span>);</div><div class=\"line\">    request.send(data);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    request.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (request.readyState === <span class=\"number\">4</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (request.status === <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// 弹出相关文字提示</span></div><div class=\"line\">                alert(request.responseText);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 当请求不到数据时就会导致错误，用以下方法显示</span></div><div class=\"line\">                alert(<span class=\"string\">'发生错误：'</span> + request.status);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"第三步：编写articleToDB-php文件实现文章插入MySQL数据库，并将其置于editor-html同一目录下。\"><a href=\"#第三步：编写articleToDB-php文件实现文章插入MySQL数据库，并将其置于editor-html同一目录下。\" class=\"headerlink\" title=\"　　第三步：编写articleToDB.php文件实现文章插入MySQL数据库，并将其置于editor.html同一目录下。\"></a>　　第三步：编写articleToDB.php文件实现文章插入MySQL数据库，并将其置于editor.html同一目录下。</h5><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">header(<span class=\"string\">'Content-Type: application/json; charset=utf-8'</span>);</div><div class=\"line\"><span class=\"comment\">// 若取不到值，那么进行相应的信息反馈并结束</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($_POST[<span class=\"string\">'article'</span>]) || <span class=\"keyword\">empty</span>($_POST[<span class=\"string\">'article'</span>])) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'您还没有编辑文章'</span>;</div><div class=\"line\">    <span class=\"keyword\">exit</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 面向对象的建立数据库连接的方法</span></div><div class=\"line\"><span class=\"comment\">// 应该填写服务器数据库的主机名，用户名以及相对应的密码</span></div><div class=\"line\"><span class=\"comment\">// 比如$db = new mysqli('localhost','root','123456789');</span></div><div class=\"line\">$db = <span class=\"keyword\">new</span> mysqli(<span class=\"string\">'主机名'</span>,<span class=\"string\">'用户名'</span>,<span class=\"string\">'密码'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (mysqli_connect_errno()) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'连接数据库失败，请稍后重试！'</span>;</div><div class=\"line\">    <span class=\"keyword\">exit</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 判断数据库是否存在</span></div><div class=\"line\">$select = $db-&gt;select_db(<span class=\"string\">'article'</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (!$select) &#123;</div><div class=\"line\">    <span class=\"comment\">// 创建数据库失败后的处理提示</span></div><div class=\"line\">    $createDB_query = <span class=\"string\">'create database article'</span>;</div><div class=\"line\">    $createDB = $db-&gt;query($createDB_query);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!$createDB) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'创建数据库失败'</span>;</div><div class=\"line\">        <span class=\"keyword\">exit</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//使用数据库失败后的处理提示</span></div><div class=\"line\">    $useDB_query = <span class=\"string\">'use article'</span>;</div><div class=\"line\">    $useDB = $db-&gt;query($useDB_query);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!$useDB) &#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'使用数据库失败'</span>;</div><div class=\"line\">        <span class=\"keyword\">exit</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">     <span class=\"keyword\">echo</span> <span class=\"string\">'成功'</span>;</div><div class=\"line\">        <span class=\"keyword\">exit</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 设置数据库编码</span></div><div class=\"line\">$db-&gt;query(<span class=\"string\">'set names utf8'</span>);</div><div class=\"line\"><span class=\"comment\">// 此处在接收到经过编码的article后，通过=操作符，实现了解码</span></div><div class=\"line\">$article = $_POST[<span class=\"string\">'article'</span>];</div><div class=\"line\">$insert_query = <span class=\"string\">'insert into text2 values(NULL, \"'</span>.$article.<span class=\"string\">'\")'</span>;</div><div class=\"line\">$insert_result = $db-&gt;query($insert_query);</div><div class=\"line\"><span class=\"comment\">// 对返回结果进行判断</span></div><div class=\"line\"><span class=\"keyword\">if</span> ($insert_result) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'成功！管理员文章发布成功！'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'失败！管理员文章发布失败！'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 关闭数据库连接</span></div><div class=\"line\">$db-&gt;close();</div></pre></td></tr></table></figure>\n<h4 id=\"以上三步便是利用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库的全过程，需要注意的点有以下几个：\"><a href=\"#以上三步便是利用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库的全过程，需要注意的点有以下几个：\" class=\"headerlink\" title=\"　　以上三步便是利用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库的全过程，需要注意的点有以下几个：\"></a>　　以上三步便是利用JavaScript的Ajax、配合使用php将tinymce中编写的文章经过转码后顺利存储进MySQL数据库的全过程，需要注意的点有以下几个：</h4><p> 　　1. html代码必须经过转码后才能插入数据库; </p>\n<p> 　　2. 字符串’\\\\’长度为1而不是2;</p>\n<p> 　　3. 正则表达式匹配字符串时并不匹配起转义字符作用的反斜杠’\\’;</p>\n<p> 　　4. 在插入MySQL数据库时，3个转义字符转义一个字符</p>\n"},{"title":"ubuntu下各种出错情况的解决方法","date":"2017-04-13T05:51:05.000Z","_content":"#### <font color=\"#f00\">1. 网络连接报错“device not managed”</font>\n**<font color=\"#00f\">第一步:</font>**  编辑/etc/NetworkManager/NetworkManager.conf：\n```bash\n$ sudo gedit /etc/NetworkManager/NetworkManager.conf\n```\n将其中的managed=false改为managed=true\n\n**<font color=\"#00f\">第二步:</font>**  重启network-manager service：\n```bash\n$ sudo service network-manager restart\n```\n#### <font color=\"#f00\">2. Ubuntu下Sublime Text 3解决无法输入中文的方法</font>\n**<font color=\"#00f\">第一步:</font>**  更新并升级系统为最新(较新的系统会解决很多可能出现的问题)\n```bash\n$ sudo apt-get update && sudo apt-get upgrade\n```\n\n**<font color=\"#00f\">第二步:</font>**  克隆项目到本地 \n```\n$ git clone https://github.com/lyfeyaj/sublime-text-imfix.git\n```\n\n**<font color=\"#00f\">第三步:</font>**  运行脚本\n```bash\n$ cd sublime-text-imfix && ./sublime-imfix\n```\n完成! 重新启动后就可以在 Sublime Text 2/3 中 使用 Fcitx了! 注意: 皮肤可能需要自己选择。\n效果图如下：\n![ubuntu下成功在sublime text中输入中文](ubuntuTip/1.png)\n\n#### <font color=\"#f00\">3. Ubuntu下解决搜狗输入法无法正常输入中文的方法</font>\n![Ubuntu下搜狗输入法无法正常输入中文错误示例图](ubuntuTip/3.png)\n**<font color=\"#00f\">第一步:</font>**  找到搜狗输入法的配置文件\n```bash\n$ cd ~\n$ cd .config/\n```\n找到的搜狗输入法的配置文件如下图：\n![搜狗输入法的配置文件](ubuntuTip/2.png)\n\n**<font color=\"#00f\">第二步:</font>**  删除有关搜狗输入法的配置文件\n```bash\n$ rm -rf SogouPY\n$ rm -rf SogouPY.users\n$ rm -rf sogou-qimpanel\n```\n\n**<font color=\"#00f\">第三步:</font>**  操作系统注销后重新登录，搜狗输入法即可恢复正常\n\n#### <font color=\"#f00\">4. Ubuntu下安装 Node 版本管理器nvm的方法</font>\n```bash\n// 执行以下命令，等待安装完成后重启terminal，即可使用nvm安装、使用和管理各种版本的node和npm\n$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash\n```","source":"_posts/ubuntuTip.md","raw":"---\ntitle: ubuntu下各种出错情况的解决方法\ndate: 2017-04-13 13:51:05\ncategories: [技术类-linux]\ntags: [ubuntu, 奇淫巧技]\n---\n#### <font color=\"#f00\">1. 网络连接报错“device not managed”</font>\n**<font color=\"#00f\">第一步:</font>**  编辑/etc/NetworkManager/NetworkManager.conf：\n```bash\n$ sudo gedit /etc/NetworkManager/NetworkManager.conf\n```\n将其中的managed=false改为managed=true\n\n**<font color=\"#00f\">第二步:</font>**  重启network-manager service：\n```bash\n$ sudo service network-manager restart\n```\n#### <font color=\"#f00\">2. Ubuntu下Sublime Text 3解决无法输入中文的方法</font>\n**<font color=\"#00f\">第一步:</font>**  更新并升级系统为最新(较新的系统会解决很多可能出现的问题)\n```bash\n$ sudo apt-get update && sudo apt-get upgrade\n```\n\n**<font color=\"#00f\">第二步:</font>**  克隆项目到本地 \n```\n$ git clone https://github.com/lyfeyaj/sublime-text-imfix.git\n```\n\n**<font color=\"#00f\">第三步:</font>**  运行脚本\n```bash\n$ cd sublime-text-imfix && ./sublime-imfix\n```\n完成! 重新启动后就可以在 Sublime Text 2/3 中 使用 Fcitx了! 注意: 皮肤可能需要自己选择。\n效果图如下：\n![ubuntu下成功在sublime text中输入中文](ubuntuTip/1.png)\n\n#### <font color=\"#f00\">3. Ubuntu下解决搜狗输入法无法正常输入中文的方法</font>\n![Ubuntu下搜狗输入法无法正常输入中文错误示例图](ubuntuTip/3.png)\n**<font color=\"#00f\">第一步:</font>**  找到搜狗输入法的配置文件\n```bash\n$ cd ~\n$ cd .config/\n```\n找到的搜狗输入法的配置文件如下图：\n![搜狗输入法的配置文件](ubuntuTip/2.png)\n\n**<font color=\"#00f\">第二步:</font>**  删除有关搜狗输入法的配置文件\n```bash\n$ rm -rf SogouPY\n$ rm -rf SogouPY.users\n$ rm -rf sogou-qimpanel\n```\n\n**<font color=\"#00f\">第三步:</font>**  操作系统注销后重新登录，搜狗输入法即可恢复正常\n\n#### <font color=\"#f00\">4. Ubuntu下安装 Node 版本管理器nvm的方法</font>\n```bash\n// 执行以下命令，等待安装完成后重启terminal，即可使用nvm安装、使用和管理各种版本的node和npm\n$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash\n```","slug":"ubuntuTip","published":1,"updated":"2017-04-21T08:59:57.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d30339001nimw4ipmbrkbj","content":"<h4 id=\"1-网络连接报错“device-not-managed”\"><a href=\"#1-网络连接报错“device-not-managed”\" class=\"headerlink\" title=\"1. 网络连接报错“device not managed”\"></a><font color=\"#f00\">1. 网络连接报错“device not managed”</font></h4><p><strong><font color=\"#00f\">第一步:</font></strong>  编辑/etc/NetworkManager/NetworkManager.conf：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo gedit /etc/NetworkManager/NetworkManager.conf</div></pre></td></tr></table></figure></p>\n<p>将其中的managed=false改为managed=true</p>\n<p><strong><font color=\"#00f\">第二步:</font></strong>  重启network-manager service：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo service network-manager restart</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-Ubuntu下Sublime-Text-3解决无法输入中文的方法\"><a href=\"#2-Ubuntu下Sublime-Text-3解决无法输入中文的方法\" class=\"headerlink\" title=\"2. Ubuntu下Sublime Text 3解决无法输入中文的方法\"></a><font color=\"#f00\">2. Ubuntu下Sublime Text 3解决无法输入中文的方法</font></h4><p><strong><font color=\"#00f\">第一步:</font></strong>  更新并升级系统为最新(较新的系统会解决很多可能出现的问题)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get update &amp;&amp; sudo apt-get upgrade</div></pre></td></tr></table></figure></p>\n<p><strong><font color=\"#00f\">第二步:</font></strong>  克隆项目到本地<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/lyfeyaj/sublime-text-imfix.git</div></pre></td></tr></table></figure></p>\n<p><strong><font color=\"#00f\">第三步:</font></strong>  运行脚本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> sublime-text-imfix &amp;&amp; ./sublime-imfix</div></pre></td></tr></table></figure></p>\n<p>完成! 重新启动后就可以在 Sublime Text 2/3 中 使用 Fcitx了! 注意: 皮肤可能需要自己选择。<br>效果图如下：<br><img src=\"/2017/04/13/ubuntuTip/1.png\" alt=\"ubuntu下成功在sublime text中输入中文\"></p>\n<h4 id=\"3-Ubuntu下解决搜狗输入法无法正常输入中文的方法\"><a href=\"#3-Ubuntu下解决搜狗输入法无法正常输入中文的方法\" class=\"headerlink\" title=\"3. Ubuntu下解决搜狗输入法无法正常输入中文的方法\"></a><font color=\"#f00\">3. Ubuntu下解决搜狗输入法无法正常输入中文的方法</font></h4><p><img src=\"/2017/04/13/ubuntuTip/3.png\" alt=\"Ubuntu下搜狗输入法无法正常输入中文错误示例图\"><br><strong><font color=\"#00f\">第一步:</font></strong>  找到搜狗输入法的配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~</div><div class=\"line\">$ <span class=\"built_in\">cd</span> .config/</div></pre></td></tr></table></figure></p>\n<p>找到的搜狗输入法的配置文件如下图：<br><img src=\"/2017/04/13/ubuntuTip/2.png\" alt=\"搜狗输入法的配置文件\"></p>\n<p><strong><font color=\"#00f\">第二步:</font></strong>  删除有关搜狗输入法的配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rm -rf SogouPY</div><div class=\"line\">$ rm -rf SogouPY.users</div><div class=\"line\">$ rm -rf sogou-qimpanel</div></pre></td></tr></table></figure></p>\n<p><strong><font color=\"#00f\">第三步:</font></strong>  操作系统注销后重新登录，搜狗输入法即可恢复正常</p>\n<h4 id=\"4-Ubuntu下安装-Node-版本管理器nvm的方法\"><a href=\"#4-Ubuntu下安装-Node-版本管理器nvm的方法\" class=\"headerlink\" title=\"4. Ubuntu下安装 Node 版本管理器nvm的方法\"></a><font color=\"#f00\">4. Ubuntu下安装 Node 版本管理器nvm的方法</font></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 执行以下命令，等待安装完成后重启terminal，即可使用nvm安装、使用和管理各种版本的node和npm</div><div class=\"line\">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash</div></pre></td></tr></table></figure>","excerpt":"","more":"<h4 id=\"1-网络连接报错“device-not-managed”\"><a href=\"#1-网络连接报错“device-not-managed”\" class=\"headerlink\" title=\"1. 网络连接报错“device not managed”\"></a><font color=\"#f00\">1. 网络连接报错“device not managed”</font></h4><p><strong><font color=\"#00f\">第一步:</font></strong>  编辑/etc/NetworkManager/NetworkManager.conf：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo gedit /etc/NetworkManager/NetworkManager.conf</div></pre></td></tr></table></figure></p>\n<p>将其中的managed=false改为managed=true</p>\n<p><strong><font color=\"#00f\">第二步:</font></strong>  重启network-manager service：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo service network-manager restart</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-Ubuntu下Sublime-Text-3解决无法输入中文的方法\"><a href=\"#2-Ubuntu下Sublime-Text-3解决无法输入中文的方法\" class=\"headerlink\" title=\"2. Ubuntu下Sublime Text 3解决无法输入中文的方法\"></a><font color=\"#f00\">2. Ubuntu下Sublime Text 3解决无法输入中文的方法</font></h4><p><strong><font color=\"#00f\">第一步:</font></strong>  更新并升级系统为最新(较新的系统会解决很多可能出现的问题)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get update &amp;&amp; sudo apt-get upgrade</div></pre></td></tr></table></figure></p>\n<p><strong><font color=\"#00f\">第二步:</font></strong>  克隆项目到本地<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone https://github.com/lyfeyaj/sublime-text-imfix.git</div></pre></td></tr></table></figure></p>\n<p><strong><font color=\"#00f\">第三步:</font></strong>  运行脚本<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> sublime-text-imfix &amp;&amp; ./sublime-imfix</div></pre></td></tr></table></figure></p>\n<p>完成! 重新启动后就可以在 Sublime Text 2/3 中 使用 Fcitx了! 注意: 皮肤可能需要自己选择。<br>效果图如下：<br><img src=\"/2017/04/13/ubuntuTip/1.png\" alt=\"ubuntu下成功在sublime text中输入中文\"></p>\n<h4 id=\"3-Ubuntu下解决搜狗输入法无法正常输入中文的方法\"><a href=\"#3-Ubuntu下解决搜狗输入法无法正常输入中文的方法\" class=\"headerlink\" title=\"3. Ubuntu下解决搜狗输入法无法正常输入中文的方法\"></a><font color=\"#f00\">3. Ubuntu下解决搜狗输入法无法正常输入中文的方法</font></h4><p><img src=\"/2017/04/13/ubuntuTip/3.png\" alt=\"Ubuntu下搜狗输入法无法正常输入中文错误示例图\"><br><strong><font color=\"#00f\">第一步:</font></strong>  找到搜狗输入法的配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~</div><div class=\"line\">$ <span class=\"built_in\">cd</span> .config/</div></pre></td></tr></table></figure></p>\n<p>找到的搜狗输入法的配置文件如下图：<br><img src=\"/2017/04/13/ubuntuTip/2.png\" alt=\"搜狗输入法的配置文件\"></p>\n<p><strong><font color=\"#00f\">第二步:</font></strong>  删除有关搜狗输入法的配置文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ rm -rf SogouPY</div><div class=\"line\">$ rm -rf SogouPY.users</div><div class=\"line\">$ rm -rf sogou-qimpanel</div></pre></td></tr></table></figure></p>\n<p><strong><font color=\"#00f\">第三步:</font></strong>  操作系统注销后重新登录，搜狗输入法即可恢复正常</p>\n<h4 id=\"4-Ubuntu下安装-Node-版本管理器nvm的方法\"><a href=\"#4-Ubuntu下安装-Node-版本管理器nvm的方法\" class=\"headerlink\" title=\"4. Ubuntu下安装 Node 版本管理器nvm的方法\"></a><font color=\"#f00\">4. Ubuntu下安装 Node 版本管理器nvm的方法</font></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 执行以下命令，等待安装完成后重启terminal，即可使用nvm安装、使用和管理各种版本的node和npm</div><div class=\"line\">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash</div></pre></td></tr></table></figure>"},{"title":"ubuntu下配置 Cisco VPN 的方法","date":"2017-04-13T06:12:31.000Z","_content":"## （一） 命令行安装并使用 Cisco VPN\n#### 1. 连接 Cisco VPN\n&emsp;&emsp;切换到root后安装vpnc并设置各项参数\n```bash\n// 切换到root\n$ su\n// 安装vpnc\n# apt-get install vpnc\n// 使用vpnc命令并设置参数\n# vpnc\n// 之后按照提示输入各项设置，可见下图\n```\n![vpnc参数配置](ubuntuVpn/1.png)\n\n#### 2. 查看 Cisco VPN\n```bash\n// 使用命令 ifconfig 查看 Cisco VPN 连接情况\n# ifconfig\n```\n![ifconfig查看 Cisco VPN](ubuntuVpn/2.png)\n\n#### 3. 断开 Cisco VPN\n```bash\n// 使用命令 vpnc-disconnect 断开 Cisco VPN\n# vpnc-disconnect\n```\n\n## （二）图形界面配置 Cisco VPN（需要先安装）\n#### 第一步： 命令行安装图形化的 Cisco VPN\n```\n$ sudo apt-get install network-manager-vpnc network-manager-vpnc-gnome\n```\n\n#### 第二步： 打开Network Connections 并选择 Cisco Compatible VPN(vpnc)，如下图\n![添加 Cisco VPN](ubuntuVpn/3.png)\n\n#### 第三步： 点击 Create... 后进行配置，配置的参数包括 Gateway(网关)，User name(用户名)，User password(喻户密码)，Group name(组名称)，Group password(组密码)，配置完成后点击 Save 保存设置。如下图：\n![设置 Cisco VPN 参数](ubuntuVpn/4.png)\n\n#### 第三步： 点击 VPN Connections 并选择刚刚设置的 Cisco VPN（比如 VPN connection 1），若能看到以下标志，则说明成功链接 Cisco VPN\n![成功连接 Cisco VPN](ubuntuVpn/5.png)","source":"_posts/ubuntuVpn.md","raw":"---\ntitle: ubuntu下配置 Cisco VPN 的方法\ndate: 2017-04-13 14:12:31\ncategories: [技术类-linux]\ntags: [ubuntu, 奇淫巧技]\n---\n## （一） 命令行安装并使用 Cisco VPN\n#### 1. 连接 Cisco VPN\n&emsp;&emsp;切换到root后安装vpnc并设置各项参数\n```bash\n// 切换到root\n$ su\n// 安装vpnc\n# apt-get install vpnc\n// 使用vpnc命令并设置参数\n# vpnc\n// 之后按照提示输入各项设置，可见下图\n```\n![vpnc参数配置](ubuntuVpn/1.png)\n\n#### 2. 查看 Cisco VPN\n```bash\n// 使用命令 ifconfig 查看 Cisco VPN 连接情况\n# ifconfig\n```\n![ifconfig查看 Cisco VPN](ubuntuVpn/2.png)\n\n#### 3. 断开 Cisco VPN\n```bash\n// 使用命令 vpnc-disconnect 断开 Cisco VPN\n# vpnc-disconnect\n```\n\n## （二）图形界面配置 Cisco VPN（需要先安装）\n#### 第一步： 命令行安装图形化的 Cisco VPN\n```\n$ sudo apt-get install network-manager-vpnc network-manager-vpnc-gnome\n```\n\n#### 第二步： 打开Network Connections 并选择 Cisco Compatible VPN(vpnc)，如下图\n![添加 Cisco VPN](ubuntuVpn/3.png)\n\n#### 第三步： 点击 Create... 后进行配置，配置的参数包括 Gateway(网关)，User name(用户名)，User password(喻户密码)，Group name(组名称)，Group password(组密码)，配置完成后点击 Save 保存设置。如下图：\n![设置 Cisco VPN 参数](ubuntuVpn/4.png)\n\n#### 第三步： 点击 VPN Connections 并选择刚刚设置的 Cisco VPN（比如 VPN connection 1），若能看到以下标志，则说明成功链接 Cisco VPN\n![成功连接 Cisco VPN](ubuntuVpn/5.png)","slug":"ubuntuVpn","published":1,"updated":"2017-04-19T14:29:49.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3033b001rimw451waw0wq","content":"<h2 id=\"（一）-命令行安装并使用-Cisco-VPN\"><a href=\"#（一）-命令行安装并使用-Cisco-VPN\" class=\"headerlink\" title=\"（一） 命令行安装并使用 Cisco VPN\"></a>（一） 命令行安装并使用 Cisco VPN</h2><h4 id=\"1-连接-Cisco-VPN\"><a href=\"#1-连接-Cisco-VPN\" class=\"headerlink\" title=\"1. 连接 Cisco VPN\"></a>1. 连接 Cisco VPN</h4><p>&emsp;&emsp;切换到root后安装vpnc并设置各项参数<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 切换到root</div><div class=\"line\">$ su</div><div class=\"line\">// 安装vpnc</div><div class=\"line\"><span class=\"comment\"># apt-get install vpnc</span></div><div class=\"line\">// 使用vpnc命令并设置参数</div><div class=\"line\"><span class=\"comment\"># vpnc</span></div><div class=\"line\">// 之后按照提示输入各项设置，可见下图</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/04/13/ubuntuVpn/1.png\" alt=\"vpnc参数配置\"></p>\n<h4 id=\"2-查看-Cisco-VPN\"><a href=\"#2-查看-Cisco-VPN\" class=\"headerlink\" title=\"2. 查看 Cisco VPN\"></a>2. 查看 Cisco VPN</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 使用命令 ifconfig 查看 Cisco VPN 连接情况</div><div class=\"line\"><span class=\"comment\"># ifconfig</span></div></pre></td></tr></table></figure>\n<p><img src=\"/2017/04/13/ubuntuVpn/2.png\" alt=\"ifconfig查看 Cisco VPN\"></p>\n<h4 id=\"3-断开-Cisco-VPN\"><a href=\"#3-断开-Cisco-VPN\" class=\"headerlink\" title=\"3. 断开 Cisco VPN\"></a>3. 断开 Cisco VPN</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 使用命令 vpnc-disconnect 断开 Cisco VPN</div><div class=\"line\"><span class=\"comment\"># vpnc-disconnect</span></div></pre></td></tr></table></figure>\n<h2 id=\"（二）图形界面配置-Cisco-VPN（需要先安装）\"><a href=\"#（二）图形界面配置-Cisco-VPN（需要先安装）\" class=\"headerlink\" title=\"（二）图形界面配置 Cisco VPN（需要先安装）\"></a>（二）图形界面配置 Cisco VPN（需要先安装）</h2><h4 id=\"第一步：-命令行安装图形化的-Cisco-VPN\"><a href=\"#第一步：-命令行安装图形化的-Cisco-VPN\" class=\"headerlink\" title=\"第一步： 命令行安装图形化的 Cisco VPN\"></a>第一步： 命令行安装图形化的 Cisco VPN</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install network-manager-vpnc network-manager-vpnc-gnome</div></pre></td></tr></table></figure>\n<h4 id=\"第二步：-打开Network-Connections-并选择-Cisco-Compatible-VPN-vpnc-，如下图\"><a href=\"#第二步：-打开Network-Connections-并选择-Cisco-Compatible-VPN-vpnc-，如下图\" class=\"headerlink\" title=\"第二步： 打开Network Connections 并选择 Cisco Compatible VPN(vpnc)，如下图\"></a>第二步： 打开Network Connections 并选择 Cisco Compatible VPN(vpnc)，如下图</h4><p><img src=\"/2017/04/13/ubuntuVpn/3.png\" alt=\"添加 Cisco VPN\"></p>\n<h4 id=\"第三步：-点击-Create…-后进行配置，配置的参数包括-Gateway-网关-，User-name-用户名-，User-password-喻户密码-，Group-name-组名称-，Group-password-组密码-，配置完成后点击-Save-保存设置。如下图：\"><a href=\"#第三步：-点击-Create…-后进行配置，配置的参数包括-Gateway-网关-，User-name-用户名-，User-password-喻户密码-，Group-name-组名称-，Group-password-组密码-，配置完成后点击-Save-保存设置。如下图：\" class=\"headerlink\" title=\"第三步： 点击 Create… 后进行配置，配置的参数包括 Gateway(网关)，User name(用户名)，User password(喻户密码)，Group name(组名称)，Group password(组密码)，配置完成后点击 Save 保存设置。如下图：\"></a>第三步： 点击 Create… 后进行配置，配置的参数包括 Gateway(网关)，User name(用户名)，User password(喻户密码)，Group name(组名称)，Group password(组密码)，配置完成后点击 Save 保存设置。如下图：</h4><p><img src=\"/2017/04/13/ubuntuVpn/4.png\" alt=\"设置 Cisco VPN 参数\"></p>\n<h4 id=\"第三步：-点击-VPN-Connections-并选择刚刚设置的-Cisco-VPN（比如-VPN-connection-1），若能看到以下标志，则说明成功链接-Cisco-VPN\"><a href=\"#第三步：-点击-VPN-Connections-并选择刚刚设置的-Cisco-VPN（比如-VPN-connection-1），若能看到以下标志，则说明成功链接-Cisco-VPN\" class=\"headerlink\" title=\"第三步： 点击 VPN Connections 并选择刚刚设置的 Cisco VPN（比如 VPN connection 1），若能看到以下标志，则说明成功链接 Cisco VPN\"></a>第三步： 点击 VPN Connections 并选择刚刚设置的 Cisco VPN（比如 VPN connection 1），若能看到以下标志，则说明成功链接 Cisco VPN</h4><p><img src=\"/2017/04/13/ubuntuVpn/5.png\" alt=\"成功连接 Cisco VPN\"></p>\n","excerpt":"","more":"<h2 id=\"（一）-命令行安装并使用-Cisco-VPN\"><a href=\"#（一）-命令行安装并使用-Cisco-VPN\" class=\"headerlink\" title=\"（一） 命令行安装并使用 Cisco VPN\"></a>（一） 命令行安装并使用 Cisco VPN</h2><h4 id=\"1-连接-Cisco-VPN\"><a href=\"#1-连接-Cisco-VPN\" class=\"headerlink\" title=\"1. 连接 Cisco VPN\"></a>1. 连接 Cisco VPN</h4><p>&emsp;&emsp;切换到root后安装vpnc并设置各项参数<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 切换到root</div><div class=\"line\">$ su</div><div class=\"line\">// 安装vpnc</div><div class=\"line\"><span class=\"comment\"># apt-get install vpnc</span></div><div class=\"line\">// 使用vpnc命令并设置参数</div><div class=\"line\"><span class=\"comment\"># vpnc</span></div><div class=\"line\">// 之后按照提示输入各项设置，可见下图</div></pre></td></tr></table></figure></p>\n<p><img src=\"/2017/04/13/ubuntuVpn/1.png\" alt=\"vpnc参数配置\"></p>\n<h4 id=\"2-查看-Cisco-VPN\"><a href=\"#2-查看-Cisco-VPN\" class=\"headerlink\" title=\"2. 查看 Cisco VPN\"></a>2. 查看 Cisco VPN</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 使用命令 ifconfig 查看 Cisco VPN 连接情况</div><div class=\"line\"><span class=\"comment\"># ifconfig</span></div></pre></td></tr></table></figure>\n<p><img src=\"/2017/04/13/ubuntuVpn/2.png\" alt=\"ifconfig查看 Cisco VPN\"></p>\n<h4 id=\"3-断开-Cisco-VPN\"><a href=\"#3-断开-Cisco-VPN\" class=\"headerlink\" title=\"3. 断开 Cisco VPN\"></a>3. 断开 Cisco VPN</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 使用命令 vpnc-disconnect 断开 Cisco VPN</div><div class=\"line\"><span class=\"comment\"># vpnc-disconnect</span></div></pre></td></tr></table></figure>\n<h2 id=\"（二）图形界面配置-Cisco-VPN（需要先安装）\"><a href=\"#（二）图形界面配置-Cisco-VPN（需要先安装）\" class=\"headerlink\" title=\"（二）图形界面配置 Cisco VPN（需要先安装）\"></a>（二）图形界面配置 Cisco VPN（需要先安装）</h2><h4 id=\"第一步：-命令行安装图形化的-Cisco-VPN\"><a href=\"#第一步：-命令行安装图形化的-Cisco-VPN\" class=\"headerlink\" title=\"第一步： 命令行安装图形化的 Cisco VPN\"></a>第一步： 命令行安装图形化的 Cisco VPN</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install network-manager-vpnc network-manager-vpnc-gnome</div></pre></td></tr></table></figure>\n<h4 id=\"第二步：-打开Network-Connections-并选择-Cisco-Compatible-VPN-vpnc-，如下图\"><a href=\"#第二步：-打开Network-Connections-并选择-Cisco-Compatible-VPN-vpnc-，如下图\" class=\"headerlink\" title=\"第二步： 打开Network Connections 并选择 Cisco Compatible VPN(vpnc)，如下图\"></a>第二步： 打开Network Connections 并选择 Cisco Compatible VPN(vpnc)，如下图</h4><p><img src=\"/2017/04/13/ubuntuVpn/3.png\" alt=\"添加 Cisco VPN\"></p>\n<h4 id=\"第三步：-点击-Create…-后进行配置，配置的参数包括-Gateway-网关-，User-name-用户名-，User-password-喻户密码-，Group-name-组名称-，Group-password-组密码-，配置完成后点击-Save-保存设置。如下图：\"><a href=\"#第三步：-点击-Create…-后进行配置，配置的参数包括-Gateway-网关-，User-name-用户名-，User-password-喻户密码-，Group-name-组名称-，Group-password-组密码-，配置完成后点击-Save-保存设置。如下图：\" class=\"headerlink\" title=\"第三步： 点击 Create… 后进行配置，配置的参数包括 Gateway(网关)，User name(用户名)，User password(喻户密码)，Group name(组名称)，Group password(组密码)，配置完成后点击 Save 保存设置。如下图：\"></a>第三步： 点击 Create… 后进行配置，配置的参数包括 Gateway(网关)，User name(用户名)，User password(喻户密码)，Group name(组名称)，Group password(组密码)，配置完成后点击 Save 保存设置。如下图：</h4><p><img src=\"/2017/04/13/ubuntuVpn/4.png\" alt=\"设置 Cisco VPN 参数\"></p>\n<h4 id=\"第三步：-点击-VPN-Connections-并选择刚刚设置的-Cisco-VPN（比如-VPN-connection-1），若能看到以下标志，则说明成功链接-Cisco-VPN\"><a href=\"#第三步：-点击-VPN-Connections-并选择刚刚设置的-Cisco-VPN（比如-VPN-connection-1），若能看到以下标志，则说明成功链接-Cisco-VPN\" class=\"headerlink\" title=\"第三步： 点击 VPN Connections 并选择刚刚设置的 Cisco VPN（比如 VPN connection 1），若能看到以下标志，则说明成功链接 Cisco VPN\"></a>第三步： 点击 VPN Connections 并选择刚刚设置的 Cisco VPN（比如 VPN connection 1），若能看到以下标志，则说明成功链接 Cisco VPN</h4><p><img src=\"/2017/04/13/ubuntuVpn/5.png\" alt=\"成功连接 Cisco VPN\"></p>\n"},{"title":"《读大学，究竟读什么？》（覃彪喜）读后感","date":"2015-07-18T08:55:02.000Z","_content":"### <font style=\"color: #f00;\">《读大学，究竟读什么？》（覃彪喜）读后感</font>\n&emsp;&emsp;《读大学，究竟读什么？》——到了大一结束时的现在才读完这本书的我，深深地感受到了以后求职的艰难！读大学真的就会有优势吗？在读完覃彪喜的这本书后，我知道，读大学可以有优势，但条件是在大学期间要好好学习！然而，能否充分利用这些优势，还是另外一个问题。\n\n&emsp;&emsp;覃彪喜开门见山大谈“读大学，究竟读什么”，并得出读大学不是读技校，而是“读大师，读图书馆，读同学”的过程的结论。紧接着一一论述大学生在学习生涯以及毕业后求职生涯中可能出现以及应该注意的问题，并依据此思路将全书分为了18个章节。\n\n&emsp;&emsp;其中，令我印象最深刻的是“做事不如做人，人脉决定成败”这一章。一个人本身的知识、文化、技术水平确实对个人的就业及事业发展起着很大作用，但是，人脉对一个人的发展也产生着足够大的不容小觑的影响，有时甚至起着决定性的作用。书中覃彪喜形象地将“人脉”比作“木桶效应”中的桶底，没有了桶底，一切努力都将付之东流。这一比喻或许太过极端，然而它却时刻警告着我们人脉之重要性！如果我们连社交能力都存在问题，那想在社会上很好地立足就不会太容易了，更别说要干出一番事业了。\n\n&emsp;&emsp;书中作者对于大学生毕业后就业问题的描述也是极其详细。毕业后大学生遇到了很多问题，有的“病急乱投医”，有的盲目创业，这些问题都是普遍存在的。覃彪喜鼓励大学生“骑驴找马”，即先找一份或许不是很让人满意的工作，从经验中学习工作、就业方法，待自己成熟后，再去找自己真正意义上的第一份工作！这何尝不是一种就业的好方法呢！\n\n&emsp;&emsp;作为即将步入大二的我，看完这本书后，最大的感触就是要珍惜当前，毕竟韶光易逝，若不好好趁现在装备自己，以后就只能是师弟师妹们眼中的失败案例！","source":"_posts/whatUniversity.md","raw":"---\ntitle: 《读大学，究竟读什么？》（覃彪喜）读后感\ndate: 2015-07-18 16:55:02\ncategories: [文学类]\ntags: [文学]\n---\n### <font style=\"color: #f00;\">《读大学，究竟读什么？》（覃彪喜）读后感</font>\n&emsp;&emsp;《读大学，究竟读什么？》——到了大一结束时的现在才读完这本书的我，深深地感受到了以后求职的艰难！读大学真的就会有优势吗？在读完覃彪喜的这本书后，我知道，读大学可以有优势，但条件是在大学期间要好好学习！然而，能否充分利用这些优势，还是另外一个问题。\n\n&emsp;&emsp;覃彪喜开门见山大谈“读大学，究竟读什么”，并得出读大学不是读技校，而是“读大师，读图书馆，读同学”的过程的结论。紧接着一一论述大学生在学习生涯以及毕业后求职生涯中可能出现以及应该注意的问题，并依据此思路将全书分为了18个章节。\n\n&emsp;&emsp;其中，令我印象最深刻的是“做事不如做人，人脉决定成败”这一章。一个人本身的知识、文化、技术水平确实对个人的就业及事业发展起着很大作用，但是，人脉对一个人的发展也产生着足够大的不容小觑的影响，有时甚至起着决定性的作用。书中覃彪喜形象地将“人脉”比作“木桶效应”中的桶底，没有了桶底，一切努力都将付之东流。这一比喻或许太过极端，然而它却时刻警告着我们人脉之重要性！如果我们连社交能力都存在问题，那想在社会上很好地立足就不会太容易了，更别说要干出一番事业了。\n\n&emsp;&emsp;书中作者对于大学生毕业后就业问题的描述也是极其详细。毕业后大学生遇到了很多问题，有的“病急乱投医”，有的盲目创业，这些问题都是普遍存在的。覃彪喜鼓励大学生“骑驴找马”，即先找一份或许不是很让人满意的工作，从经验中学习工作、就业方法，待自己成熟后，再去找自己真正意义上的第一份工作！这何尝不是一种就业的好方法呢！\n\n&emsp;&emsp;作为即将步入大二的我，看完这本书后，最大的感触就是要珍惜当前，毕竟韶光易逝，若不好好趁现在装备自己，以后就只能是师弟师妹们眼中的失败案例！","slug":"whatUniversity","published":1,"updated":"2017-04-25T12:11:37.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3d3033c001uimw4b2trkfow","content":"<h3 id=\"《读大学，究竟读什么？》（覃彪喜）读后感\"><a href=\"#《读大学，究竟读什么？》（覃彪喜）读后感\" class=\"headerlink\" title=\"《读大学，究竟读什么？》（覃彪喜）读后感\"></a><font style=\"color: #f00;\">《读大学，究竟读什么？》（覃彪喜）读后感</font></h3><p>&emsp;&emsp;《读大学，究竟读什么？》——到了大一结束时的现在才读完这本书的我，深深地感受到了以后求职的艰难！读大学真的就会有优势吗？在读完覃彪喜的这本书后，我知道，读大学可以有优势，但条件是在大学期间要好好学习！然而，能否充分利用这些优势，还是另外一个问题。</p>\n<p>&emsp;&emsp;覃彪喜开门见山大谈“读大学，究竟读什么”，并得出读大学不是读技校，而是“读大师，读图书馆，读同学”的过程的结论。紧接着一一论述大学生在学习生涯以及毕业后求职生涯中可能出现以及应该注意的问题，并依据此思路将全书分为了18个章节。</p>\n<p>&emsp;&emsp;其中，令我印象最深刻的是“做事不如做人，人脉决定成败”这一章。一个人本身的知识、文化、技术水平确实对个人的就业及事业发展起着很大作用，但是，人脉对一个人的发展也产生着足够大的不容小觑的影响，有时甚至起着决定性的作用。书中覃彪喜形象地将“人脉”比作“木桶效应”中的桶底，没有了桶底，一切努力都将付之东流。这一比喻或许太过极端，然而它却时刻警告着我们人脉之重要性！如果我们连社交能力都存在问题，那想在社会上很好地立足就不会太容易了，更别说要干出一番事业了。</p>\n<p>&emsp;&emsp;书中作者对于大学生毕业后就业问题的描述也是极其详细。毕业后大学生遇到了很多问题，有的“病急乱投医”，有的盲目创业，这些问题都是普遍存在的。覃彪喜鼓励大学生“骑驴找马”，即先找一份或许不是很让人满意的工作，从经验中学习工作、就业方法，待自己成熟后，再去找自己真正意义上的第一份工作！这何尝不是一种就业的好方法呢！</p>\n<p>&emsp;&emsp;作为即将步入大二的我，看完这本书后，最大的感触就是要珍惜当前，毕竟韶光易逝，若不好好趁现在装备自己，以后就只能是师弟师妹们眼中的失败案例！</p>\n","excerpt":"","more":"<h3 id=\"《读大学，究竟读什么？》（覃彪喜）读后感\"><a href=\"#《读大学，究竟读什么？》（覃彪喜）读后感\" class=\"headerlink\" title=\"《读大学，究竟读什么？》（覃彪喜）读后感\"></a><font style=\"color: #f00;\">《读大学，究竟读什么？》（覃彪喜）读后感</font></h3><p>&emsp;&emsp;《读大学，究竟读什么？》——到了大一结束时的现在才读完这本书的我，深深地感受到了以后求职的艰难！读大学真的就会有优势吗？在读完覃彪喜的这本书后，我知道，读大学可以有优势，但条件是在大学期间要好好学习！然而，能否充分利用这些优势，还是另外一个问题。</p>\n<p>&emsp;&emsp;覃彪喜开门见山大谈“读大学，究竟读什么”，并得出读大学不是读技校，而是“读大师，读图书馆，读同学”的过程的结论。紧接着一一论述大学生在学习生涯以及毕业后求职生涯中可能出现以及应该注意的问题，并依据此思路将全书分为了18个章节。</p>\n<p>&emsp;&emsp;其中，令我印象最深刻的是“做事不如做人，人脉决定成败”这一章。一个人本身的知识、文化、技术水平确实对个人的就业及事业发展起着很大作用，但是，人脉对一个人的发展也产生着足够大的不容小觑的影响，有时甚至起着决定性的作用。书中覃彪喜形象地将“人脉”比作“木桶效应”中的桶底，没有了桶底，一切努力都将付之东流。这一比喻或许太过极端，然而它却时刻警告着我们人脉之重要性！如果我们连社交能力都存在问题，那想在社会上很好地立足就不会太容易了，更别说要干出一番事业了。</p>\n<p>&emsp;&emsp;书中作者对于大学生毕业后就业问题的描述也是极其详细。毕业后大学生遇到了很多问题，有的“病急乱投医”，有的盲目创业，这些问题都是普遍存在的。覃彪喜鼓励大学生“骑驴找马”，即先找一份或许不是很让人满意的工作，从经验中学习工作、就业方法，待自己成熟后，再去找自己真正意义上的第一份工作！这何尝不是一种就业的好方法呢！</p>\n<p>&emsp;&emsp;作为即将步入大二的我，看完这本书后，最大的感触就是要珍惜当前，毕竟韶光易逝，若不好好趁现在装备自己，以后就只能是师弟师妹们眼中的失败案例！</p>\n"}],"PostAsset":[{"_id":"source/_posts/HTTPprotocol/1-2.png","slug":"1-2.png","post":"cj3d303260008imw4eyxu03tj","modified":0,"renderable":0},{"_id":"source/_posts/event/1.png","slug":"1.png","post":"cj3d3032q000simw4ba91cjue","modified":0,"renderable":0},{"_id":"source/_posts/HTTPprotocol/1-1.png","slug":"1-1.png","post":"cj3d303260008imw4eyxu03tj","modified":0,"renderable":0},{"_id":"source/_posts/hexoCname/cname.png","slug":"cname.png","post":"cj3d3032s000ximw4u5marknq","modified":0,"renderable":0},{"_id":"source/_posts/hexoCname/cnamefile.png","slug":"cnamefile.png","post":"cj3d3032s000ximw4u5marknq","modified":0,"renderable":0},{"_id":"source/_posts/hexoCname/domain.png","slug":"domain.png","post":"cj3d3032s000ximw4u5marknq","modified":0,"renderable":0},{"_id":"source/_posts/ubuntuTip/1.png","slug":"1.png","post":"cj3d30339001nimw4ipmbrkbj","modified":0,"renderable":0},{"_id":"source/_posts/ubuntuTip/2.png","slug":"2.png","post":"cj3d30339001nimw4ipmbrkbj","modified":0,"renderable":0},{"_id":"source/_posts/ubuntuTip/3.png","slug":"3.png","post":"cj3d30339001nimw4ipmbrkbj","modified":0,"renderable":0},{"_id":"source/_posts/ubuntuVpn/1.png","slug":"1.png","post":"cj3d3033b001rimw451waw0wq","modified":0,"renderable":0},{"_id":"source/_posts/ubuntuVpn/2.png","slug":"2.png","post":"cj3d3033b001rimw451waw0wq","modified":0,"renderable":0},{"_id":"source/_posts/ubuntuVpn/3.png","slug":"3.png","post":"cj3d3033b001rimw451waw0wq","modified":0,"renderable":0},{"_id":"source/_posts/ubuntuVpn/4.png","slug":"4.png","post":"cj3d3033b001rimw451waw0wq","modified":0,"renderable":0},{"_id":"source/_posts/ubuntuVpn/5.png","slug":"5.png","post":"cj3d3033b001rimw451waw0wq","modified":0,"renderable":0},{"_id":"source/_posts/ubuntuVpn/6.png","slug":"6.png","post":"cj3d3033b001rimw451waw0wq","modified":0,"renderable":0},{"_id":"source/_posts/ubuntuVpn/7.png","slug":"7.png","post":"cj3d3033b001rimw451waw0wq","modified":0,"renderable":0},{"_id":"source/_posts/ubuntuVpn/8.png","slug":"8.png","post":"cj3d3033b001rimw451waw0wq","modified":0,"renderable":0},{"_id":"source/_posts/EventLoop/1.png","slug":"1.png","post":"cj3d3031w0004imw4hw48t4wi","modified":0,"renderable":0},{"_id":"source/_posts/EventLoop/2-1.png","slug":"2-1.png","post":"cj3d3031w0004imw4hw48t4wi","modified":0,"renderable":0},{"_id":"source/_posts/EventLoop/2-2.png","slug":"2-2.png","post":"cj3d3031w0004imw4hw48t4wi","modified":0,"renderable":0},{"_id":"source/_posts/EventLoop/2-3.png","slug":"2-3.png","post":"cj3d3031w0004imw4hw48t4wi","modified":0,"renderable":0},{"_id":"source/_posts/EventLoop/2-4.png","slug":"2-4.png","post":"cj3d3031w0004imw4hw48t4wi","modified":0,"renderable":0},{"_id":"source/_posts/EventLoop/2-5.png","slug":"2-5.png","post":"cj3d3031w0004imw4hw48t4wi","modified":0,"renderable":0},{"_id":"source/_posts/EventLoop/2-6.png","slug":"2-6.png","post":"cj3d3031w0004imw4hw48t4wi","modified":0,"renderable":0},{"_id":"source/_posts/EventLoop/2-7.png","slug":"2-7.png","post":"cj3d3031w0004imw4hw48t4wi","modified":0,"renderable":0},{"_id":"source/_posts/EventLoop/2-8.png","slug":"2-8.png","post":"cj3d3031w0004imw4hw48t4wi","modified":0,"renderable":0},{"_id":"source/_posts/EventLoopUp/1-1.png","slug":"1-1.png","post":"cj3d303290009imw47ea3is83","modified":0,"renderable":0},{"_id":"source/_posts/EventLoopUp/1-2.png","slug":"1-2.png","post":"cj3d303290009imw47ea3is83","modified":0,"renderable":0},{"_id":"source/_posts/EventLoopUp/1-3.png","slug":"1-3.png","post":"cj3d303290009imw47ea3is83","modified":0,"renderable":0},{"_id":"source/_posts/EventLoopUp/1-4-1.png","slug":"1-4-1.png","post":"cj3d303290009imw47ea3is83","modified":0,"renderable":0},{"_id":"source/_posts/EventLoopUp/1-4-2.png","slug":"1-4-2.png","post":"cj3d303290009imw47ea3is83","modified":0,"renderable":0},{"_id":"source/_posts/EventLoopUp/1-5.png","slug":"1-5.png","post":"cj3d303290009imw47ea3is83","modified":0,"renderable":0},{"_id":"source/_posts/EventLoopUp/1-6.png","slug":"1-6.png","post":"cj3d303290009imw47ea3is83","modified":0,"renderable":0},{"_id":"source/_posts/EventLoopUp/1-7-1.png","slug":"1-7-1.png","post":"cj3d303290009imw47ea3is83","modified":0,"renderable":0},{"_id":"source/_posts/EventLoopUp/1-7-2.png","slug":"1-7-2.png","post":"cj3d303290009imw47ea3is83","modified":0,"renderable":0},{"_id":"source/_posts/EventLoopUp/1-8.png","slug":"1-8.png","post":"cj3d303290009imw47ea3is83","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cj3d3031r0002imw437bna19i","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d3032h000dimw4siroh4wh"},{"post_id":"cj3d303290009imw47ea3is83","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d3032i000himw4jpdoyu8n"},{"post_id":"cj3d3032f000cimw4krfra8bw","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d3032k000jimw4atyey81q"},{"post_id":"cj3d3031w0004imw4hw48t4wi","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d3032n000oimw4r8d91xlk"},{"post_id":"cj3d3032j000iimw4oxvznwjw","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d3032q000rimw4uidgwwbp"},{"post_id":"cj3d303210007imw4kbxihf7p","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d3032r000wimw4g57hv0au"},{"post_id":"cj3d3032k000kimw4w89vt3w7","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d3032t000zimw4pgyhvgb7"},{"post_id":"cj3d3032n000pimw43p1effjf","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d3032w0014imw4dfg7nx8y"},{"post_id":"cj3d303260008imw4eyxu03tj","category_id":"cj3d3032l000limw4of0axol7","_id":"cj3d3032z0017imw4hx6y1s1h"},{"post_id":"cj3d3032q000simw4ba91cjue","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d30332001bimw4yg65apfr"},{"post_id":"cj3d3032h000eimw43gpuhxep","category_id":"cj3d3032r000timw4f6j2g3j1","_id":"cj3d30334001eimw4tqzk1ewx"},{"post_id":"cj3d3032u0010imw4hconrp9p","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d30336001himw4nsehqenu"},{"post_id":"cj3d3032x0015imw4ew3ggowy","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d30339001mimw4xld85ods"},{"post_id":"cj3d3032z0018imw4oijs725w","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d3033a001pimw49gd1szy5"},{"post_id":"cj3d3032s000ximw4u5marknq","category_id":"cj3d3032w0012imw4y78loh4n","_id":"cj3d3033b001timw4jyx8an9a"},{"post_id":"cj3d30332001cimw4qkp3htb3","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d3033e001wimw42er662x7"},{"post_id":"cj3d30337001jimw47lzqfj1j","category_id":"cj3d3031z0005imw4j34n3o4g","_id":"cj3d3033f001zimw44soysc0j"},{"post_id":"cj3d30339001nimw4ipmbrkbj","category_id":"cj3d3032r000timw4f6j2g3j1","_id":"cj3d3033f0020imw4bo6nzj4a"},{"post_id":"cj3d3033b001rimw451waw0wq","category_id":"cj3d3032r000timw4f6j2g3j1","_id":"cj3d3033h0022imw41qxow2fv"},{"post_id":"cj3d30334001fimw4fhr3vwhb","category_id":"cj3d30339001kimw4gr9z61n4","_id":"cj3d3033h0024imw4sb9kmc9k"},{"post_id":"cj3d3033c001uimw4b2trkfow","category_id":"cj3d3033f001yimw4rwaz2atd","_id":"cj3d3033i0027imw4vtv7kd4b"}],"PostTag":[{"post_id":"cj3d3032j000iimw4oxvznwjw","tag_id":"cj3d3032i000gimw4ksw4y3le","_id":"cj3d3032n000nimw4dvuy5fmi"},{"post_id":"cj3d3031r0002imw437bna19i","tag_id":"cj3d303210006imw4atafxyxo","_id":"cj3d3032p000qimw4mngo4knc"},{"post_id":"cj3d3031r0002imw437bna19i","tag_id":"cj3d3032c000bimw4jq2pymmd","_id":"cj3d3032r000vimw418t3b3mj"},{"post_id":"cj3d3031r0002imw437bna19i","tag_id":"cj3d3032i000gimw4ksw4y3le","_id":"cj3d3032t000yimw4wqzpalfh"},{"post_id":"cj3d3031w0004imw4hw48t4wi","tag_id":"cj3d3032i000gimw4ksw4y3le","_id":"cj3d3032w0013imw4uwidswrm"},{"post_id":"cj3d3032q000simw4ba91cjue","tag_id":"cj3d3032i000gimw4ksw4y3le","_id":"cj3d3032y0016imw4mz0niz27"},{"post_id":"cj3d3032q000simw4ba91cjue","tag_id":"cj3d303210006imw4atafxyxo","_id":"cj3d30332001aimw4tgyx0q49"},{"post_id":"cj3d3032u0010imw4hconrp9p","tag_id":"cj3d3032c000bimw4jq2pymmd","_id":"cj3d30334001dimw4f74k7tvv"},{"post_id":"cj3d3032x0015imw4ew3ggowy","tag_id":"cj3d3032i000gimw4ksw4y3le","_id":"cj3d30336001gimw4uh1dsb5f"},{"post_id":"cj3d303210007imw4kbxihf7p","tag_id":"cj3d303210006imw4atafxyxo","_id":"cj3d30339001limw4q67chgqo"},{"post_id":"cj3d303210007imw4kbxihf7p","tag_id":"cj3d3032i000gimw4ksw4y3le","_id":"cj3d3033a001oimw41e10nguq"},{"post_id":"cj3d303260008imw4eyxu03tj","tag_id":"cj3d303320019imw4m15u2yzj","_id":"cj3d3033b001simw43e1yc55p"},{"post_id":"cj3d303290009imw47ea3is83","tag_id":"cj3d3032i000gimw4ksw4y3le","_id":"cj3d3033d001vimw4s2ko15k6"},{"post_id":"cj3d3032f000cimw4krfra8bw","tag_id":"cj3d3033a001qimw4al5skyae","_id":"cj3d3033h0023imw4ist56bvq"},{"post_id":"cj3d3032f000cimw4krfra8bw","tag_id":"cj3d3032i000gimw4ksw4y3le","_id":"cj3d3033h0025imw4ijxwxycj"},{"post_id":"cj3d3032h000eimw43gpuhxep","tag_id":"cj3d3033g0021imw4y1g9l3eb","_id":"cj3d3033j0028imw4fkjgascy"},{"post_id":"cj3d3032k000kimw4w89vt3w7","tag_id":"cj3d3033h0026imw49glz7tnq","_id":"cj3d3033j002aimw4e1a40w8e"},{"post_id":"cj3d3032n000pimw43p1effjf","tag_id":"cj3d3032c000bimw4jq2pymmd","_id":"cj3d3033k002cimw404tdus2x"},{"post_id":"cj3d3032n000pimw43p1effjf","tag_id":"cj3d3033j0029imw45zorhdxq","_id":"cj3d3033k002dimw4ptsueaga"},{"post_id":"cj3d3032s000ximw4u5marknq","tag_id":"cj3d3033j002bimw4fb6n1qd4","_id":"cj3d3033k002fimw40f1gbaqh"},{"post_id":"cj3d3032z0018imw4oijs725w","tag_id":"cj3d3032i000gimw4ksw4y3le","_id":"cj3d3033l002himw4kof4j89z"},{"post_id":"cj3d3032z0018imw4oijs725w","tag_id":"cj3d3033k002eimw46sfemnx4","_id":"cj3d3033l002iimw4fbzfsp91"},{"post_id":"cj3d30332001cimw4qkp3htb3","tag_id":"cj3d3033l002gimw4ub0gcfbu","_id":"cj3d3033m002kimw486hjy7t2"},{"post_id":"cj3d30332001cimw4qkp3htb3","tag_id":"cj3d3032i000gimw4ksw4y3le","_id":"cj3d3033m002limw4a6dzy4nu"},{"post_id":"cj3d30334001fimw4fhr3vwhb","tag_id":"cj3d3033l002jimw4ihrez3zj","_id":"cj3d3033m002nimw4g2dgrmwv"},{"post_id":"cj3d30337001jimw47lzqfj1j","tag_id":"cj3d3033m002mimw4ep8ula1m","_id":"cj3d3033n002pimw49ihvxmh9"},{"post_id":"cj3d30339001nimw4ipmbrkbj","tag_id":"cj3d3033g0021imw4y1g9l3eb","_id":"cj3d3033o002simw4g81zux5t"},{"post_id":"cj3d30339001nimw4ipmbrkbj","tag_id":"cj3d3033j002bimw4fb6n1qd4","_id":"cj3d3033p002timw40lwnspma"},{"post_id":"cj3d3033b001rimw451waw0wq","tag_id":"cj3d3033g0021imw4y1g9l3eb","_id":"cj3d3033p002wimw48e1ra9ec"},{"post_id":"cj3d3033b001rimw451waw0wq","tag_id":"cj3d3033j002bimw4fb6n1qd4","_id":"cj3d3033q002ximw4x40sueao"},{"post_id":"cj3d3033c001uimw4b2trkfow","tag_id":"cj3d3033p002vimw4juqzyxzb","_id":"cj3d3033q002yimw4zdr0ngr3"}],"Tag":[{"name":"DOM","_id":"cj3d303210006imw4atafxyxo"},{"name":"html","_id":"cj3d3032c000bimw4jq2pymmd"},{"name":"JavaScript","_id":"cj3d3032i000gimw4ksw4y3le"},{"name":"网络协议","_id":"cj3d303320019imw4m15u2yzj"},{"name":"ajax","_id":"cj3d3033a001qimw4al5skyae"},{"name":"ubuntu","_id":"cj3d3033g0021imw4y1g9l3eb"},{"name":"浏览器","_id":"cj3d3033h0026imw49glz7tnq"},{"name":"css","_id":"cj3d3033j0029imw45zorhdxq"},{"name":"奇淫巧技","_id":"cj3d3033j002bimw4fb6n1qd4"},{"name":"es6","_id":"cj3d3033k002eimw46sfemnx4"},{"name":"node","_id":"cj3d3033l002gimw4ub0gcfbu"},{"name":"算法","_id":"cj3d3033l002jimw4ihrez3zj"},{"name":"插件","_id":"cj3d3033m002mimw4ep8ula1m"},{"name":"文学","_id":"cj3d3033p002vimw4juqzyxzb"}]}}